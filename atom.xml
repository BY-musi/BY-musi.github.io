<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OhMyDarkSpace</title>
  <icon>http://example.com/icon.png</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-17T02:33:21.504Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CaiShao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>路径穿越基础介绍</title>
    <link href="http://example.com/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2023/12/17/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-12-16T16:00:00.000Z</published>
    <updated>2023-12-17T02:33:21.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[!quote]<br>你的 web 服务器不过是我的文件管理器罢了 :-\</p></blockquote><h1 id="1-什么是路径穿越"><a href="#1-什么是路径穿越" class="headerlink" title="1 什么是路径穿越"></a>1 什么是路径穿越</h1><p>路径穿越，path-traversal，也称为路径遍历、目录穿越&#x2F;遍历（directory traversal），是一种能让攻击者通过使用一些类似 <code>../</code> 的<strong>目录控制序列</strong>访问 web 服务器上<strong>任意文件</strong>的安全漏洞。</p><p>任意文件主要包括：</p><ul><li>程序源码和数据</li><li>服务端证书</li><li>敏感的系统文件，<code>/etc/passwd</code></li></ul><p>path-traversal 被 OWASP 收录的 Broken Access Control（BAC，越权访问）一栏，BAC 可是 <a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a> 2021 版中的 No.1 哦。</p><h1 id="2-测试方法"><a href="#2-测试方法" class="headerlink" title="2 测试方法"></a>2 测试方法</h1><p>寻找路径穿越漏洞分两步：</p><ol><li>输入向量枚举，定位注入点。</li><li>测试，绕过</li></ol><h2 id="2-1-不同OS的敏感文件位置"><a href="#2-1-不同OS的敏感文件位置" class="headerlink" title="2.1 不同OS的敏感文件位置"></a>2.1 不同OS的敏感文件位置</h2><p>需要了解 <strong>web app 服务端的架构、操作系统及其文件管理方式</strong>，就算存在路径穿越但你不知道你想要的文件放哪就尴尬了。</p><ul><li>Unix-like OS:<ul><li>root directory: <code>/</code></li><li>directory separator: <code>/</code></li><li>网站根目录：<code>/var/www/</code>, <code>/var/www/images/</code></li><li>常用 payload: <code>../../../etc/passwd</code></li></ul></li><li>Windows OS:<ul><li>root directory: <code>&lt;drive letter&gt;:</code></li><li>directory separator: <code>\</code> or <code>/</code></li></ul></li></ul><h2 id="2-2-举个栗子"><a href="#2-2-举个栗子" class="headerlink" title="2.2 举个栗子"></a>2.2 举个栗子</h2><p>以 PortSwigger Labs 中的一个简单<a href="https://portswigger.net/web-security/file-path-traversal/lab-simple">例子</a>进行说明：</p><p>开启 burp 再打开一个页面。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110748.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110748.png"></a></p><p>观察 HTTP history，找到一个 GET 图片文件的请求，这里可能存在路径穿越。（一堆 google 自动发的包，裂开</p><p>这里能直接看到一个访问请求，我就不枚举用户输入向量了，一般情况要要测试用户所有可能的输入向量，包括 GET 和 POST 等请求。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209110859.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209110859.png"></a></p><p>网页源码里面也能看到。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209111405.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209111405.png"></a></p><p>发送到 Repeater 重放，测试。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231206224112.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231206224112.png"></a></p><p>得到的响应报文如下，可以看到已经拿到了 <code>/etc/passwd</code> 的内容了。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231207222507.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231207222507.png"></a></p><h1 id="3-常规防御与绕过"><a href="#3-常规防御与绕过" class="headerlink" title="3 常规防御与绕过"></a>3 常规防御与绕过</h1><h2 id="3-1-使用绝对路径"><a href="#3-1-使用绝对路径" class="headerlink" title="3.1 使用绝对路径"></a>3.1 使用绝对路径</h2><p>删掉所有目录遍历序列，如 <code>../</code> 等 <a href="https://portswigger.net/web-security/file-path-traversal/lab-absolute-path-bypass">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-2-双写绕过"><a href="#3-2-双写绕过" class="headerlink" title="3.2 双写绕过"></a>3.2 双写绕过</h2><p>仅将 <code>../</code> 替换为空，未对替换处理后的 filename 进行二次检查(non-recursively) <a href="https://portswigger.net/web-security/file-path-traversal/lab-sequences-stripped-non-recursively">no case, no learning</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=....//..././..././etc/passwd</span><br></pre></td></tr></table></figure><h2 id="3-3-编码绕过"><a href="#3-3-编码绕过" class="headerlink" title="3.3 编码绕过"></a>3.3 编码绕过</h2><p>先放一个好用的编码工具：<a href="https://gchq.github.io/CyberChef/">CyberChef</a>。</p><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209113640.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209113640.png"></a></p><h3 id="3-3-1-URL-编码-与-double-URL-编码"><a href="#3-3-1-URL-编码-与-double-URL-编码" class="headerlink" title="3.3.1 URL 编码 与 double URL 编码"></a>3.3.1 URL 编码 与 double URL 编码</h3><p><code>../</code> 和 <code>..\</code> 各个部分url 编码的排列组合，我简单列几个。</p><ul><li>%2E%2E%2F –&gt; ..&#x2F;</li><li>%2E%2E&#x2F; –&gt; ..&#x2F;</li><li>..%2F –&gt; ..&#x2F;</li><li>%252E%252E%252F</li><li>..%5C –&gt; ..\</li><li>%2E%2E%5C –&gt; ..\</li><li>%252E%252E%255C –&gt; ..\</li></ul><h3 id="3-3-2-unicode-编码"><a href="#3-3-2-unicode-编码" class="headerlink" title="3.3.2 unicode 编码"></a>3.3.2 unicode 编码</h3><p><a data-fancybox="gallery" data-src="/images/2023/12/17/Pasted-image-20231209122622.png" data-caption=""><img src="/images/2023/12/17/Pasted-image-20231209122622.png"></a></p><ul><li>\u002E\u002E\u002F –&gt; ..&#x2F;</li><li>\u002E\u002E\u005C –&gt; ..\</li></ul><h3 id="3-3-3-其他非标准编码"><a href="#3-3-3-其他非标准编码" class="headerlink" title="3.3.3 其他非标准编码"></a>3.3.3 其他非标准编码</h3><ul><li>..%c0%af</li><li>..%ef%bc%8f</li></ul><h2 id="3-4-其他绕过方式"><a href="#3-4-其他绕过方式" class="headerlink" title="3.4 其他绕过方式"></a>3.4 其他绕过方式</h2><h3 id="3-4-1-00-截断"><a href="#3-4-1-00-截断" class="headerlink" title="3.4.1 %00 截断"></a>3.4.1 %00 截断</h3><p>某些情况下 web app 会验证文件的扩展名，如必须以 <code>.png</code> 结尾等。如果简单构造 <code>filename=../../../etc/passwd.png</code> 显然无法拿到我们想要的文件。</p><p>而截断机制既能绕过输入有效性验证，又能在解析文件时拿到我们想要的文件。 <a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-file-extension-null-byte-bypass">no case, no learning</a></p><p>%00 截断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=../../../etc/passwd%00.jpg</span><br></pre></td></tr></table></figure><p>#todo</p><ul><li><input disabled="" type="checkbox"> 调研其他截断机制？</li></ul><h3 id="3-4-2-必须包含某些路径"><a href="#3-4-2-必须包含某些路径" class="headerlink" title="3.4.2 必须包含某些路径"></a>3.4.2 必须包含某些路径</h3><p>有些 web app 要求文件名中必须包含某些特定的目录 (base folder)，这时我们仍可以使用 <code>../</code> 拿到我们想要的内容。<a href="https://portswigger.net/web-security/file-path-traversal/lab-validate-start-of-path">no case, no learning</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=/var/www/images/../../../etc/passwd</span><br></pre></td></tr></table></figure><p>#todo </p><ul><li><input disabled="" type="checkbox"> 汇总常见 Payload</li></ul><h1 id="4-防御手段"><a href="#4-防御手段" class="headerlink" title="4 防御手段"></a>4 防御手段</h1><p>最有效的防御方法就是<strong>缩小攻击面</strong>，典型的例子：中国防火墙 Great Firewall。对于路径穿越的防御也同样适用，避免用户与 filesystem APIs 交互能有效减少路径穿越攻击的风险。</p><p>但大部分情况下无法避免用户提供的输入与 filesystem APIs 交互，防御方法如下：</p><ol><li>使用<strong>白名单</strong>对<strong>用户输入</strong>进行验证与过滤</li><li>使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用</li></ol><h1 id="5-工具"><a href="#5-工具" class="headerlink" title="5 工具"></a>5 工具</h1><p>说实话感觉这玩意手动测试的话也太麻烦了。</p><p>一些常用的工具:</p><ul><li>BurpSuite Intruder 可用这些 <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal/Intruder">字典</a> 对其进行配置</li><li><a href="https://github.com/wireghoul/dotdotpwn">DotDotPwn</a> 好久不更新了呀</li><li><a href="https://www.zaproxy.org/">OWASP ZAP</a></li><li><a href="https://github.com/xmendez/wfuzz">wfuzz</a></li></ul><p>常回来看看：</p><ul><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings">PayloadsAllTheThings</a></li></ul><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6 参考链接"></a>6 参考链接</h1><ul><li><a href="https://github.com/OWASP/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.md">OWASP wstg path-traversal</a></li><li><a href="https://portswigger.net/web-security/file-path-traversal">path-traversal by PortSwigger</a></li><li><a href="https://websec.readthedocs.io/zh/latest/vuln/pathtraversal.html">目录穿越</a></li><li><a href="https://code.google.com/archive/p/teenage-mutant-ninja-turtles/wikis/AdvancedObfuscationPathtraversal.wiki">Advanced Directory Traversal filter bypassing</a></li><li><a href="https://blog.csdn.net/qingzhantianxia/article/details/128204437">路径穿越（Path Traversal）详解</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="owaspTop10" scheme="http://example.com/tags/owaspTop10/"/>
    
    <category term="path-traversal" scheme="http://example.com/tags/path-traversal/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/12/09/hello-world/"/>
    <id>http://example.com/2023/12/09/hello-world/</id>
    <published>2023-12-09T07:20:44.364Z</published>
    <updated>2023-12-10T02:07:23.618Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
</feed>
